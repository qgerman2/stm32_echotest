
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000116f8  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003848  080118f8  080118f8  000128f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015140  08015140  000171c8  2**0
                  CONTENTS
  4 .ARM          00000008  08015140  08015140  00016140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015148  08015148  000171c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015148  08015148  00016148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801514c  0801514c  0001614c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08015150  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000088  080151d8  00017088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000128  08015278  00017128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000088cc  200001c8  08015318  000171c8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20008a94  08015318  00017a94  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000171c8  2**0
                  CONTENTS, READONLY
 14 .debug_info   000224be  00000000  00000000  000171f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005b4a  00000000  00000000  000396b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000018d0  00000000  00000000  0003f200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000013c1  00000000  00000000  00040ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000349d2  00000000  00000000  00041e91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002abfe  00000000  00000000  00076863  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010c919  00000000  00000000  000a1461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001add7a  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006ecc  00000000  00000000  001addc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005f  00000000  00000000  001b4c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001c8 	.word	0x200001c8
 800021c:	00000000 	.word	0x00000000
 8000220:	080118e0 	.word	0x080118e0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001cc 	.word	0x200001cc
 800023c:	080118e0 	.word	0x080118e0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 80005d8:	1d39      	adds	r1, r7, #4
 80005da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005de:	2201      	movs	r2, #1
 80005e0:	4803      	ldr	r0, [pc, #12]	@ (80005f0 <__io_putchar+0x20>)
 80005e2:	f003 fcfb 	bl	8003fdc <HAL_UART_Transmit>
    return ch;
 80005e6:	687b      	ldr	r3, [r7, #4]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	200001e4 	.word	0x200001e4

080005f4 <tcp_accept_handler>:

#define TIMEOUT_ms 3000
static err_t tcp_accept_handler(void *arg, struct tcp_pcb *newpcb, err_t err) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	4613      	mov	r3, r2
 8000600:	71fb      	strb	r3, [r7, #7]
    client_t *client = mem_malloc(sizeof(client_t));
 8000602:	200c      	movs	r0, #12
 8000604:	f005 fd00 	bl	8006008 <mem_malloc>
 8000608:	6178      	str	r0, [r7, #20]
    client->tpcb = newpcb;
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	68ba      	ldr	r2, [r7, #8]
 800060e:	601a      	str	r2, [r3, #0]
    client->last_msg = HAL_GetTick();
 8000610:	f000 fdf2 	bl	80011f8 <HAL_GetTick>
 8000614:	4602      	mov	r2, r0
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	605a      	str	r2, [r3, #4]
    client->p = NULL;
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
    tcp_arg(newpcb, client);
 8000620:	6979      	ldr	r1, [r7, #20]
 8000622:	68b8      	ldr	r0, [r7, #8]
 8000624:	f008 fc3e 	bl	8008ea4 <tcp_arg>
    tcp_recv(newpcb, tcp_recv_handler);
 8000628:	4906      	ldr	r1, [pc, #24]	@ (8000644 <tcp_accept_handler+0x50>)
 800062a:	68b8      	ldr	r0, [r7, #8]
 800062c:	f008 fc4c 	bl	8008ec8 <tcp_recv>
    tcp_poll(newpcb, tcp_poll_handler, 0);
 8000630:	2200      	movs	r2, #0
 8000632:	4905      	ldr	r1, [pc, #20]	@ (8000648 <tcp_accept_handler+0x54>)
 8000634:	68b8      	ldr	r0, [r7, #8]
 8000636:	f008 fc81 	bl	8008f3c <tcp_poll>
    return ERR_OK;
 800063a:	2300      	movs	r3, #0
}
 800063c:	4618      	mov	r0, r3
 800063e:	3718      	adds	r7, #24
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	0800064d 	.word	0x0800064d
 8000648:	080006a5 	.word	0x080006a5

0800064c <tcp_recv_handler>:

static err_t tcp_recv_handler(void *arg, struct tcp_pcb *tpcb, struct pbuf *p,
        err_t err) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0
 8000652:	60f8      	str	r0, [r7, #12]
 8000654:	60b9      	str	r1, [r7, #8]
 8000656:	607a      	str	r2, [r7, #4]
 8000658:	70fb      	strb	r3, [r7, #3]
    client_t *client = (client_t*) (arg);
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	617b      	str	r3, [r7, #20]
    if (p == NULL) {
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d105      	bne.n	8000670 <tcp_recv_handler+0x24>
        return tcp_disconnect(client, tpcb);
 8000664:	68b9      	ldr	r1, [r7, #8]
 8000666:	6978      	ldr	r0, [r7, #20]
 8000668:	f000 f82f 	bl	80006ca <tcp_disconnect>
 800066c:	4603      	mov	r3, r0
 800066e:	e015      	b.n	800069c <tcp_recv_handler+0x50>
    } else {
        if (err != ERR_OK) {
 8000670:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d005      	beq.n	8000684 <tcp_recv_handler+0x38>
            client->p = NULL;
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
            pbuf_free(p);
 800067e:	6878      	ldr	r0, [r7, #4]
 8000680:	f006 fd38 	bl	80070f4 <pbuf_free>
        }
        client->last_msg = HAL_GetTick();
 8000684:	f000 fdb8 	bl	80011f8 <HAL_GetTick>
 8000688:	4602      	mov	r2, r0
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	605a      	str	r2, [r3, #4]
        client->p = p;
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	609a      	str	r2, [r3, #8]
        tcp_process_pbufs(client);
 8000694:	6978      	ldr	r0, [r7, #20]
 8000696:	f000 f834 	bl	8000702 <tcp_process_pbufs>
    }
    return ERR_OK;
 800069a:	2300      	movs	r3, #0
}
 800069c:	4618      	mov	r0, r3
 800069e:	3718      	adds	r7, #24
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <tcp_poll_handler>:

static err_t tcp_poll_handler(void *arg, struct tcp_pcb *tpcb) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	6039      	str	r1, [r7, #0]
    client_t *client = (client_t*) (arg);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	60fb      	str	r3, [r7, #12]
    if (client->p != NULL) {
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	689b      	ldr	r3, [r3, #8]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d002      	beq.n	80006c0 <tcp_poll_handler+0x1c>
        tcp_process_pbufs(client);
 80006ba:	68f8      	ldr	r0, [r7, #12]
 80006bc:	f000 f821 	bl	8000702 <tcp_process_pbufs>
    }
//    if (HAL_GetTick() - client->last_msg > TIMEOUT_ms) {
//        return tcp_disconnect(client, tpcb);
//    }
    return ERR_OK;
 80006c0:	2300      	movs	r3, #0
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}

080006ca <tcp_disconnect>:

err_t tcp_disconnect(client_t *client, struct tcp_pcb *tpcb) {
 80006ca:	b580      	push	{r7, lr}
 80006cc:	b084      	sub	sp, #16
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	6078      	str	r0, [r7, #4]
 80006d2:	6039      	str	r1, [r7, #0]
    if (client->p != NULL) {
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	689b      	ldr	r3, [r3, #8]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d004      	beq.n	80006e6 <tcp_disconnect+0x1c>
        pbuf_free(client->p);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	689b      	ldr	r3, [r3, #8]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f006 fd07 	bl	80070f4 <pbuf_free>
    }
    err_t ret_err = tcp_close(tpcb);
 80006e6:	6838      	ldr	r0, [r7, #0]
 80006e8:	f007 f9a2 	bl	8007a30 <tcp_close>
 80006ec:	4603      	mov	r3, r0
 80006ee:	73fb      	strb	r3, [r7, #15]
    mem_free(client);
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f005 fb23 	bl	8005d3c <mem_free>
    return ret_err;
 80006f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3710      	adds	r7, #16
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <tcp_process_pbufs>:

void tcp_process_pbufs(client_t *client) {
 8000702:	b580      	push	{r7, lr}
 8000704:	b084      	sub	sp, #16
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
    while (client->p != NULL) {
 800070a:	e024      	b.n	8000756 <tcp_process_pbufs+0x54>
       //echo
       err_t wr_err = tcp_write(client->tpcb, client->p->payload, client->p->len, TCP_WRITE_FLAG_COPY);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	6818      	ldr	r0, [r3, #0]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	689b      	ldr	r3, [r3, #8]
 8000714:	6859      	ldr	r1, [r3, #4]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	689b      	ldr	r3, [r3, #8]
 800071a:	895a      	ldrh	r2, [r3, #10]
 800071c:	2301      	movs	r3, #1
 800071e:	f00b fbf1 	bl	800bf04 <tcp_write>
 8000722:	4603      	mov	r3, r0
 8000724:	73fb      	strb	r3, [r7, #15]
       if (wr_err != ERR_OK) {break;}
 8000726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d118      	bne.n	8000760 <tcp_process_pbufs+0x5e>
       //end echo
       struct pbuf *ptr = client->p;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	689b      	ldr	r3, [r3, #8]
 8000732:	60bb      	str	r3, [r7, #8]
       client->p = client->p->next;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	689b      	ldr	r3, [r3, #8]
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	609a      	str	r2, [r3, #8]
       if (client->p != NULL) {
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	689b      	ldr	r3, [r3, #8]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d004      	beq.n	8000750 <tcp_process_pbufs+0x4e>
           pbuf_ref(client->p);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	689b      	ldr	r3, [r3, #8]
 800074a:	4618      	mov	r0, r3
 800074c:	f006 fd72 	bl	8007234 <pbuf_ref>
       }
       pbuf_free(ptr);
 8000750:	68b8      	ldr	r0, [r7, #8]
 8000752:	f006 fccf 	bl	80070f4 <pbuf_free>
    while (client->p != NULL) {
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	689b      	ldr	r3, [r3, #8]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d1d6      	bne.n	800070c <tcp_process_pbufs+0xa>
   }
}
 800075e:	e000      	b.n	8000762 <tcp_process_pbufs+0x60>
       if (wr_err != ERR_OK) {break;}
 8000760:	bf00      	nop
}
 8000762:	bf00      	nop
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000772:	f000 fcf0 	bl	8001156 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000776:	f000 f83d 	bl	80007f4 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800077a:	f000 f90b 	bl	8000994 <MX_GPIO_Init>
    MX_USART3_UART_Init();
 800077e:	f000 f8ab 	bl	80008d8 <MX_USART3_UART_Init>
    MX_USB_OTG_FS_PCD_Init();
 8000782:	f000 f8d9 	bl	8000938 <MX_USB_OTG_FS_PCD_Init>
    MX_LWIP_Init();
 8000786:	f004 fc23 	bl	8004fd0 <MX_LWIP_Init>
    /* USER CODE BEGIN 2 */
    struct tcp_pcb *tcpb = tcp_new();
 800078a:	f008 fb83 	bl	8008e94 <tcp_new>
 800078e:	6078      	str	r0, [r7, #4]
    assert(tcpb != NULL);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d105      	bne.n	80007a2 <main+0x36>
 8000796:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <main+0x70>)
 8000798:	4a11      	ldr	r2, [pc, #68]	@ (80007e0 <main+0x74>)
 800079a:	21b4      	movs	r1, #180	@ 0xb4
 800079c:	4811      	ldr	r0, [pc, #68]	@ (80007e4 <main+0x78>)
 800079e:	f00f fffd 	bl	801079c <__assert_func>
    err_t err;
    err = tcp_bind(tcpb, IP_ADDR_ANY, 7);
 80007a2:	2207      	movs	r2, #7
 80007a4:	4910      	ldr	r1, [pc, #64]	@ (80007e8 <main+0x7c>)
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f007 fa42 	bl	8007c30 <tcp_bind>
 80007ac:	4603      	mov	r3, r0
 80007ae:	70fb      	strb	r3, [r7, #3]
    assert(err == ERR_OK);
 80007b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d005      	beq.n	80007c4 <main+0x58>
 80007b8:	4b0c      	ldr	r3, [pc, #48]	@ (80007ec <main+0x80>)
 80007ba:	4a09      	ldr	r2, [pc, #36]	@ (80007e0 <main+0x74>)
 80007bc:	21b7      	movs	r1, #183	@ 0xb7
 80007be:	4809      	ldr	r0, [pc, #36]	@ (80007e4 <main+0x78>)
 80007c0:	f00f ffec 	bl	801079c <__assert_func>
    tcpb = tcp_listen(tcpb);
 80007c4:	21ff      	movs	r1, #255	@ 0xff
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f007 faf2 	bl	8007db0 <tcp_listen_with_backlog>
 80007cc:	6078      	str	r0, [r7, #4]
    tcp_accept(tcpb, tcp_accept_handler);
 80007ce:	4908      	ldr	r1, [pc, #32]	@ (80007f0 <main+0x84>)
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f008 fb9b 	bl	8008f0c <tcp_accept>
    /* USER CODE BEGIN WHILE */
    while (1) {
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
        MX_LWIP_Process();
 80007d6:	f004 fd3b 	bl	8005250 <MX_LWIP_Process>
 80007da:	e7fc      	b.n	80007d6 <main+0x6a>
 80007dc:	080118f8 	.word	0x080118f8
 80007e0:	08014f00 	.word	0x08014f00
 80007e4:	08011908 	.word	0x08011908
 80007e8:	08015050 	.word	0x08015050
 80007ec:	0801191c 	.word	0x0801191c
 80007f0:	080005f5 	.word	0x080005f5

080007f4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b094      	sub	sp, #80	@ 0x50
 80007f8:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	2234      	movs	r2, #52	@ 0x34
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f010 fa5a 	bl	8010cbc <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000808:	f107 0308 	add.w	r3, r7, #8
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]

    /** Configure LSE Drive Capability
     */
    HAL_PWR_EnableBkUpAccess();
 8000818:	f002 fa36 	bl	8002c88 <HAL_PWR_EnableBkUpAccess>

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 800081c:	4b2c      	ldr	r3, [pc, #176]	@ (80008d0 <SystemClock_Config+0xdc>)
 800081e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000820:	4a2b      	ldr	r2, [pc, #172]	@ (80008d0 <SystemClock_Config+0xdc>)
 8000822:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000826:	6413      	str	r3, [r2, #64]	@ 0x40
 8000828:	4b29      	ldr	r3, [pc, #164]	@ (80008d0 <SystemClock_Config+0xdc>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800082c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000834:	4b27      	ldr	r3, [pc, #156]	@ (80008d4 <SystemClock_Config+0xe0>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800083c:	4a25      	ldr	r2, [pc, #148]	@ (80008d4 <SystemClock_Config+0xe0>)
 800083e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000842:	6013      	str	r3, [r2, #0]
 8000844:	4b23      	ldr	r3, [pc, #140]	@ (80008d4 <SystemClock_Config+0xe0>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800084c:	603b      	str	r3, [r7, #0]
 800084e:	683b      	ldr	r3, [r7, #0]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000850:	2301      	movs	r3, #1
 8000852:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000854:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000858:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085a:	2302      	movs	r3, #2
 800085c:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800085e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000862:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLM = 4;
 8000864:	2304      	movs	r3, #4
 8000866:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLN = 96;
 8000868:	2360      	movs	r3, #96	@ 0x60
 800086a:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800086c:	2302      	movs	r3, #2
 800086e:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8000870:	2304      	movs	r3, #4
 8000872:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLR = 2;
 8000874:	2302      	movs	r3, #2
 8000876:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	4618      	mov	r0, r3
 800087e:	f002 fa63 	bl	8002d48 <HAL_RCC_OscConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0x98>
        Error_Handler();
 8000888:	f000 f926 	bl	8000ad8 <Error_Handler>
    }

    /** Activate the Over-Drive mode
     */
    if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800088c:	f002 fa0c 	bl	8002ca8 <HAL_PWREx_EnableOverDrive>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <SystemClock_Config+0xa6>
        Error_Handler();
 8000896:	f000 f91f 	bl	8000ad8 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800089a:	230f      	movs	r3, #15
 800089c:	60bb      	str	r3, [r7, #8]
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800089e:	2302      	movs	r3, #2
 80008a0:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008aa:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80008b0:	f107 0308 	add.w	r3, r7, #8
 80008b4:	2103      	movs	r1, #3
 80008b6:	4618      	mov	r0, r3
 80008b8:	f002 fcf4 	bl	80032a4 <HAL_RCC_ClockConfig>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <SystemClock_Config+0xd2>
        Error_Handler();
 80008c2:	f000 f909 	bl	8000ad8 <Error_Handler>
    }
}
 80008c6:	bf00      	nop
 80008c8:	3750      	adds	r7, #80	@ 0x50
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40007000 	.word	0x40007000

080008d8 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
    /* USER CODE END USART3_Init 0 */

    /* USER CODE BEGIN USART3_Init 1 */

    /* USER CODE END USART3_Init 1 */
    huart3.Instance = USART3;
 80008dc:	4b14      	ldr	r3, [pc, #80]	@ (8000930 <MX_USART3_UART_Init+0x58>)
 80008de:	4a15      	ldr	r2, [pc, #84]	@ (8000934 <MX_USART3_UART_Init+0x5c>)
 80008e0:	601a      	str	r2, [r3, #0]
    huart3.Init.BaudRate = 115200;
 80008e2:	4b13      	ldr	r3, [pc, #76]	@ (8000930 <MX_USART3_UART_Init+0x58>)
 80008e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008e8:	605a      	str	r2, [r3, #4]
    huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008ea:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <MX_USART3_UART_Init+0x58>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
    huart3.Init.StopBits = UART_STOPBITS_1;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000930 <MX_USART3_UART_Init+0x58>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
    huart3.Init.Parity = UART_PARITY_NONE;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <MX_USART3_UART_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
    huart3.Init.Mode = UART_MODE_TX_RX;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <MX_USART3_UART_Init+0x58>)
 80008fe:	220c      	movs	r2, #12
 8000900:	615a      	str	r2, [r3, #20]
    huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000902:	4b0b      	ldr	r3, [pc, #44]	@ (8000930 <MX_USART3_UART_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000908:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <MX_USART3_UART_Init+0x58>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]
    huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800090e:	4b08      	ldr	r3, [pc, #32]	@ (8000930 <MX_USART3_UART_Init+0x58>)
 8000910:	2200      	movs	r2, #0
 8000912:	621a      	str	r2, [r3, #32]
    huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000914:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <MX_USART3_UART_Init+0x58>)
 8000916:	2200      	movs	r2, #0
 8000918:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_UART_Init(&huart3) != HAL_OK) {
 800091a:	4805      	ldr	r0, [pc, #20]	@ (8000930 <MX_USART3_UART_Init+0x58>)
 800091c:	f003 fb10 	bl	8003f40 <HAL_UART_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_USART3_UART_Init+0x52>
        Error_Handler();
 8000926:	f000 f8d7 	bl	8000ad8 <Error_Handler>
    }
    /* USER CODE BEGIN USART3_Init 2 */

    /* USER CODE END USART3_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	200001e4 	.word	0x200001e4
 8000934:	40004800 	.word	0x40004800

08000938 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
    /* USER CODE END USB_OTG_FS_Init 0 */

    /* USER CODE BEGIN USB_OTG_FS_Init 1 */

    /* USER CODE END USB_OTG_FS_Init 1 */
    hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800093c:	4b14      	ldr	r3, [pc, #80]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000942:	601a      	str	r2, [r3, #0]
    hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000944:	4b12      	ldr	r3, [pc, #72]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000946:	2206      	movs	r2, #6
 8000948:	711a      	strb	r2, [r3, #4]
    hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800094a:	4b11      	ldr	r3, [pc, #68]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094c:	2202      	movs	r2, #2
 800094e:	71da      	strb	r2, [r3, #7]
    hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000950:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000952:	2200      	movs	r2, #0
 8000954:	719a      	strb	r2, [r3, #6]
    hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000956:	4b0e      	ldr	r3, [pc, #56]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000958:	2202      	movs	r2, #2
 800095a:	725a      	strb	r2, [r3, #9]
    hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800095c:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095e:	2201      	movs	r2, #1
 8000960:	729a      	strb	r2, [r3, #10]
    hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000962:	4b0b      	ldr	r3, [pc, #44]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	72da      	strb	r2, [r3, #11]
    hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000968:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	731a      	strb	r2, [r3, #12]
    hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800096e:	4b08      	ldr	r3, [pc, #32]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000970:	2201      	movs	r2, #1
 8000972:	739a      	strb	r2, [r3, #14]
    hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000974:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	73da      	strb	r2, [r3, #15]
    if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 800097a:	4805      	ldr	r0, [pc, #20]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097c:	f002 f849 	bl	8002a12 <HAL_PCD_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_USB_OTG_FS_PCD_Init+0x52>
        Error_Handler();
 8000986:	f000 f8a7 	bl	8000ad8 <Error_Handler>
    }
    /* USER CODE BEGIN USB_OTG_FS_Init 2 */

    /* USER CODE END USB_OTG_FS_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	2000026c 	.word	0x2000026c

08000994 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b08c      	sub	sp, #48	@ 0x30
 8000998:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
 80009a8:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009aa:	4b47      	ldr	r3, [pc, #284]	@ (8000ac8 <MX_GPIO_Init+0x134>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	4a46      	ldr	r2, [pc, #280]	@ (8000ac8 <MX_GPIO_Init+0x134>)
 80009b0:	f043 0304 	orr.w	r3, r3, #4
 80009b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b6:	4b44      	ldr	r3, [pc, #272]	@ (8000ac8 <MX_GPIO_Init+0x134>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	f003 0304 	and.w	r3, r3, #4
 80009be:	61bb      	str	r3, [r7, #24]
 80009c0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c2:	4b41      	ldr	r3, [pc, #260]	@ (8000ac8 <MX_GPIO_Init+0x134>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	4a40      	ldr	r2, [pc, #256]	@ (8000ac8 <MX_GPIO_Init+0x134>)
 80009c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ce:	4b3e      	ldr	r3, [pc, #248]	@ (8000ac8 <MX_GPIO_Init+0x134>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009d6:	617b      	str	r3, [r7, #20]
 80009d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	4b3b      	ldr	r3, [pc, #236]	@ (8000ac8 <MX_GPIO_Init+0x134>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	4a3a      	ldr	r2, [pc, #232]	@ (8000ac8 <MX_GPIO_Init+0x134>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e6:	4b38      	ldr	r3, [pc, #224]	@ (8000ac8 <MX_GPIO_Init+0x134>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f2:	4b35      	ldr	r3, [pc, #212]	@ (8000ac8 <MX_GPIO_Init+0x134>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	4a34      	ldr	r2, [pc, #208]	@ (8000ac8 <MX_GPIO_Init+0x134>)
 80009f8:	f043 0302 	orr.w	r3, r3, #2
 80009fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fe:	4b32      	ldr	r3, [pc, #200]	@ (8000ac8 <MX_GPIO_Init+0x134>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	f003 0302 	and.w	r3, r3, #2
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0a:	4b2f      	ldr	r3, [pc, #188]	@ (8000ac8 <MX_GPIO_Init+0x134>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	4a2e      	ldr	r2, [pc, #184]	@ (8000ac8 <MX_GPIO_Init+0x134>)
 8000a10:	f043 0308 	orr.w	r3, r3, #8
 8000a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a16:	4b2c      	ldr	r3, [pc, #176]	@ (8000ac8 <MX_GPIO_Init+0x134>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	f003 0308 	and.w	r3, r3, #8
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a22:	4b29      	ldr	r3, [pc, #164]	@ (8000ac8 <MX_GPIO_Init+0x134>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	4a28      	ldr	r2, [pc, #160]	@ (8000ac8 <MX_GPIO_Init+0x134>)
 8000a28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2e:	4b26      	ldr	r3, [pc, #152]	@ (8000ac8 <MX_GPIO_Init+0x134>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000a40:	4822      	ldr	r0, [pc, #136]	@ (8000acc <MX_GPIO_Init+0x138>)
 8000a42:	f001 ffcd 	bl	80029e0 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8000a46:	2200      	movs	r2, #0
 8000a48:	2140      	movs	r1, #64	@ 0x40
 8000a4a:	4821      	ldr	r0, [pc, #132]	@ (8000ad0 <MX_GPIO_Init+0x13c>)
 8000a4c:	f001 ffc8 	bl	80029e0 <HAL_GPIO_WritePin>
            GPIO_PIN_RESET);

    /*Configure GPIO pin : USER_Btn_Pin */
    GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a50:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a56:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 031c 	add.w	r3, r7, #28
 8000a64:	4619      	mov	r1, r3
 8000a66:	481b      	ldr	r0, [pc, #108]	@ (8000ad4 <MX_GPIO_Init+0x140>)
 8000a68:	f001 fe0e 	bl	8002688 <HAL_GPIO_Init>

    /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
    GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8000a6c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4619      	mov	r1, r3
 8000a84:	4811      	ldr	r0, [pc, #68]	@ (8000acc <MX_GPIO_Init+0x138>)
 8000a86:	f001 fdff 	bl	8002688 <HAL_GPIO_Init>

    /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
    GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a8a:	2340      	movs	r3, #64	@ 0x40
 8000a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	480b      	ldr	r0, [pc, #44]	@ (8000ad0 <MX_GPIO_Init+0x13c>)
 8000aa2:	f001 fdf1 	bl	8002688 <HAL_GPIO_Init>

    /*Configure GPIO pin : USB_OverCurrent_Pin */
    GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000aa6:	2380      	movs	r3, #128	@ 0x80
 8000aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4805      	ldr	r0, [pc, #20]	@ (8000ad0 <MX_GPIO_Init+0x13c>)
 8000aba:	f001 fde5 	bl	8002688 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8000abe:	bf00      	nop
 8000ac0:	3730      	adds	r7, #48	@ 0x30
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40020400 	.word	0x40020400
 8000ad0:	40021800 	.word	0x40021800
 8000ad4:	40020800 	.word	0x40020800

08000ad8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000adc:	b672      	cpsid	i
}
 8000ade:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <Error_Handler+0x8>

08000ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000aea:	4b0f      	ldr	r3, [pc, #60]	@ (8000b28 <HAL_MspInit+0x44>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aee:	4a0e      	ldr	r2, [pc, #56]	@ (8000b28 <HAL_MspInit+0x44>)
 8000af0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000af4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000af6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b28 <HAL_MspInit+0x44>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b02:	4b09      	ldr	r3, [pc, #36]	@ (8000b28 <HAL_MspInit+0x44>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b06:	4a08      	ldr	r2, [pc, #32]	@ (8000b28 <HAL_MspInit+0x44>)
 8000b08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b0e:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <HAL_MspInit+0x44>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	40023800 	.word	0x40023800

08000b2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b0ae      	sub	sp, #184	@ 0xb8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2290      	movs	r2, #144	@ 0x90
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f010 f8b5 	bl	8010cbc <memset>
  if(huart->Instance==USART3)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a22      	ldr	r2, [pc, #136]	@ (8000be0 <HAL_UART_MspInit+0xb4>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d13c      	bne.n	8000bd6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b60:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b62:	2300      	movs	r3, #0
 8000b64:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f002 fdc0 	bl	80036f0 <HAL_RCCEx_PeriphCLKConfig>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b76:	f7ff ffaf 	bl	8000ad8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000be4 <HAL_UART_MspInit+0xb8>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7e:	4a19      	ldr	r2, [pc, #100]	@ (8000be4 <HAL_UART_MspInit+0xb8>)
 8000b80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b86:	4b17      	ldr	r3, [pc, #92]	@ (8000be4 <HAL_UART_MspInit+0xb8>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b92:	4b14      	ldr	r3, [pc, #80]	@ (8000be4 <HAL_UART_MspInit+0xb8>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	4a13      	ldr	r2, [pc, #76]	@ (8000be4 <HAL_UART_MspInit+0xb8>)
 8000b98:	f043 0308 	orr.w	r3, r3, #8
 8000b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9e:	4b11      	ldr	r3, [pc, #68]	@ (8000be4 <HAL_UART_MspInit+0xb8>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	f003 0308 	and.w	r3, r3, #8
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000baa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bc4:	2307      	movs	r3, #7
 8000bc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bca:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4805      	ldr	r0, [pc, #20]	@ (8000be8 <HAL_UART_MspInit+0xbc>)
 8000bd2:	f001 fd59 	bl	8002688 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000bd6:	bf00      	nop
 8000bd8:	37b8      	adds	r7, #184	@ 0xb8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40004800 	.word	0x40004800
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40020c00 	.word	0x40020c00

08000bec <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b0ae      	sub	sp, #184	@ 0xb8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	2290      	movs	r2, #144	@ 0x90
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f010 f855 	bl	8010cbc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000c1a:	d159      	bne.n	8000cd0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000c1c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000c20:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f002 fd5f 	bl	80036f0 <HAL_RCCEx_PeriphCLKConfig>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000c38:	f7ff ff4e 	bl	8000ad8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3c:	4b26      	ldr	r3, [pc, #152]	@ (8000cd8 <HAL_PCD_MspInit+0xec>)
 8000c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c40:	4a25      	ldr	r2, [pc, #148]	@ (8000cd8 <HAL_PCD_MspInit+0xec>)
 8000c42:	f043 0301 	orr.w	r3, r3, #1
 8000c46:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c48:	4b23      	ldr	r3, [pc, #140]	@ (8000cd8 <HAL_PCD_MspInit+0xec>)
 8000c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4c:	f003 0301 	and.w	r3, r3, #1
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c54:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000c58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c6e:	230a      	movs	r3, #10
 8000c70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c74:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4818      	ldr	r0, [pc, #96]	@ (8000cdc <HAL_PCD_MspInit+0xf0>)
 8000c7c:	f001 fd04 	bl	8002688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c84:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c94:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4810      	ldr	r0, [pc, #64]	@ (8000cdc <HAL_PCD_MspInit+0xf0>)
 8000c9c:	f001 fcf4 	bl	8002688 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd8 <HAL_PCD_MspInit+0xec>)
 8000ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ca4:	4a0c      	ldr	r2, [pc, #48]	@ (8000cd8 <HAL_PCD_MspInit+0xec>)
 8000ca6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000caa:	6353      	str	r3, [r2, #52]	@ 0x34
 8000cac:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd8 <HAL_PCD_MspInit+0xec>)
 8000cae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	4b07      	ldr	r3, [pc, #28]	@ (8000cd8 <HAL_PCD_MspInit+0xec>)
 8000cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cbc:	4a06      	ldr	r2, [pc, #24]	@ (8000cd8 <HAL_PCD_MspInit+0xec>)
 8000cbe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cc2:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cc4:	4b04      	ldr	r3, [pc, #16]	@ (8000cd8 <HAL_PCD_MspInit+0xec>)
 8000cc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000cd0:	bf00      	nop
 8000cd2:	37b8      	adds	r7, #184	@ 0xb8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020000 	.word	0x40020000

08000ce0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <NMI_Handler+0x4>

08000ce8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <HardFault_Handler+0x4>

08000cf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <MemManage_Handler+0x4>

08000cf8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfc:	bf00      	nop
 8000cfe:	e7fd      	b.n	8000cfc <BusFault_Handler+0x4>

08000d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d04:	bf00      	nop
 8000d06:	e7fd      	b.n	8000d04 <UsageFault_Handler+0x4>

08000d08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d36:	f000 fa4b 	bl	80011d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  return 1;
 8000d42:	2301      	movs	r3, #1
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
	...

08000d50 <_kill>:

int _kill(int pid, int sig)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d5a:	4b05      	ldr	r3, [pc, #20]	@ (8000d70 <_kill+0x20>)
 8000d5c:	2216      	movs	r2, #22
 8000d5e:	601a      	str	r2, [r3, #0]
  return -1;
 8000d60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	20008a84 	.word	0x20008a84

08000d74 <_exit>:

void _exit (int status)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f7ff ffe5 	bl	8000d50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d86:	bf00      	nop
 8000d88:	e7fd      	b.n	8000d86 <_exit+0x12>

08000d8a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b086      	sub	sp, #24
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	60f8      	str	r0, [r7, #12]
 8000d92:	60b9      	str	r1, [r7, #8]
 8000d94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
 8000d9a:	e00a      	b.n	8000db2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d9c:	f3af 8000 	nop.w
 8000da0:	4601      	mov	r1, r0
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	1c5a      	adds	r2, r3, #1
 8000da6:	60ba      	str	r2, [r7, #8]
 8000da8:	b2ca      	uxtb	r2, r1
 8000daa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	3301      	adds	r3, #1
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	697a      	ldr	r2, [r7, #20]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	429a      	cmp	r2, r3
 8000db8:	dbf0      	blt.n	8000d9c <_read+0x12>
  }

  return len;
 8000dba:	687b      	ldr	r3, [r7, #4]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	e009      	b.n	8000dea <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	1c5a      	adds	r2, r3, #1
 8000dda:	60ba      	str	r2, [r7, #8]
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fbf6 	bl	80005d0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	3301      	adds	r3, #1
 8000de8:	617b      	str	r3, [r7, #20]
 8000dea:	697a      	ldr	r2, [r7, #20]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	dbf1      	blt.n	8000dd6 <_write+0x12>
  }
  return len;
 8000df2:	687b      	ldr	r3, [r7, #4]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3718      	adds	r7, #24
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <_close>:

int _close(int file)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e24:	605a      	str	r2, [r3, #4]
  return 0;
 8000e26:	2300      	movs	r3, #0
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <_isatty>:

int _isatty(int file)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e3c:	2301      	movs	r3, #1
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b085      	sub	sp, #20
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	60f8      	str	r0, [r7, #12]
 8000e52:	60b9      	str	r1, [r7, #8]
 8000e54:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e56:	2300      	movs	r3, #0
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b087      	sub	sp, #28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e6c:	4a14      	ldr	r2, [pc, #80]	@ (8000ec0 <_sbrk+0x5c>)
 8000e6e:	4b15      	ldr	r3, [pc, #84]	@ (8000ec4 <_sbrk+0x60>)
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e78:	4b13      	ldr	r3, [pc, #76]	@ (8000ec8 <_sbrk+0x64>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d102      	bne.n	8000e86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e80:	4b11      	ldr	r3, [pc, #68]	@ (8000ec8 <_sbrk+0x64>)
 8000e82:	4a12      	ldr	r2, [pc, #72]	@ (8000ecc <_sbrk+0x68>)
 8000e84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e86:	4b10      	ldr	r3, [pc, #64]	@ (8000ec8 <_sbrk+0x64>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d205      	bcs.n	8000ea0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000e94:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed0 <_sbrk+0x6c>)
 8000e96:	220c      	movs	r2, #12
 8000e98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9e:	e009      	b.n	8000eb4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea0:	4b09      	ldr	r3, [pc, #36]	@ (8000ec8 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ea6:	4b08      	ldr	r3, [pc, #32]	@ (8000ec8 <_sbrk+0x64>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4413      	add	r3, r2
 8000eae:	4a06      	ldr	r2, [pc, #24]	@ (8000ec8 <_sbrk+0x64>)
 8000eb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	371c      	adds	r7, #28
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	20080000 	.word	0x20080000
 8000ec4:	00000400 	.word	0x00000400
 8000ec8:	2000074c 	.word	0x2000074c
 8000ecc:	20008a98 	.word	0x20008a98
 8000ed0:	20008a84 	.word	0x20008a84

08000ed4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed8:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <SystemInit+0x20>)
 8000eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ede:	4a05      	ldr	r2, [pc, #20]	@ (8000ef4 <SystemInit+0x20>)
 8000ee0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ee4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ef8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f30 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000efc:	f7ff ffea 	bl	8000ed4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f00:	480c      	ldr	r0, [pc, #48]	@ (8000f34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f02:	490d      	ldr	r1, [pc, #52]	@ (8000f38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f04:	4a0d      	ldr	r2, [pc, #52]	@ (8000f3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f08:	e002      	b.n	8000f10 <LoopCopyDataInit>

08000f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f0e:	3304      	adds	r3, #4

08000f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f14:	d3f9      	bcc.n	8000f0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f16:	4a0a      	ldr	r2, [pc, #40]	@ (8000f40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f18:	4c0a      	ldr	r4, [pc, #40]	@ (8000f44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f1c:	e001      	b.n	8000f22 <LoopFillZerobss>

08000f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f20:	3204      	adds	r2, #4

08000f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f24:	d3fb      	bcc.n	8000f1e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f26:	f00f ff17 	bl	8010d58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f2a:	f7ff fc1f 	bl	800076c <main>
  bx  lr    
 8000f2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f30:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f38:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000f3c:	08015150 	.word	0x08015150
  ldr r2, =_sbss
 8000f40:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8000f44:	20008a94 	.word	0x20008a94

08000f48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f48:	e7fe      	b.n	8000f48 <ADC_IRQHandler>

08000f4a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
 8000f52:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d00b      	beq.n	8000f72 <LAN8742_RegisterBusIO+0x28>
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	68db      	ldr	r3, [r3, #12]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d007      	beq.n	8000f72 <LAN8742_RegisterBusIO+0x28>
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <LAN8742_RegisterBusIO+0x28>
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	691b      	ldr	r3, [r3, #16]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d102      	bne.n	8000f78 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000f72:	f04f 33ff 	mov.w	r3, #4294967295
 8000f76:	e014      	b.n	8000fa2 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685a      	ldr	r2, [r3, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	68da      	ldr	r2, [r3, #12]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	689a      	ldr	r2, [r3, #8]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	691a      	ldr	r2, [r3, #16]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b086      	sub	sp, #24
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d139      	bne.n	800103e <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d002      	beq.n	8000fd8 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2220      	movs	r2, #32
 8000fdc:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
 8000fe2:	e01c      	b.n	800101e <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	695b      	ldr	r3, [r3, #20]
 8000fe8:	f107 020c 	add.w	r2, r7, #12
 8000fec:	2112      	movs	r1, #18
 8000fee:	6978      	ldr	r0, [r7, #20]
 8000ff0:	4798      	blx	r3
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	da03      	bge.n	8001000 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000ff8:	f06f 0304 	mvn.w	r3, #4
 8000ffc:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000ffe:	e00b      	b.n	8001018 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f003 031f 	and.w	r3, r3, #31
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	429a      	cmp	r2, r3
 800100a:	d105      	bne.n	8001018 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
         break;
 8001016:	e005      	b.n	8001024 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	3301      	adds	r3, #1
 800101c:	617b      	str	r3, [r7, #20]
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	2b1f      	cmp	r3, #31
 8001022:	d9df      	bls.n	8000fe4 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b1f      	cmp	r3, #31
 800102a:	d902      	bls.n	8001032 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 800102c:	f06f 0302 	mvn.w	r3, #2
 8001030:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d102      	bne.n	800103e <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2201      	movs	r2, #1
 800103c:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 800103e:	693b      	ldr	r3, [r7, #16]
 }
 8001040:	4618      	mov	r0, r3
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	6810      	ldr	r0, [r2, #0]
 800105c:	f107 020c 	add.w	r2, r7, #12
 8001060:	2101      	movs	r1, #1
 8001062:	4798      	blx	r3
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	da02      	bge.n	8001070 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800106a:	f06f 0304 	mvn.w	r3, #4
 800106e:	e06e      	b.n	800114e <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	695b      	ldr	r3, [r3, #20]
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	6810      	ldr	r0, [r2, #0]
 8001078:	f107 020c 	add.w	r2, r7, #12
 800107c:	2101      	movs	r1, #1
 800107e:	4798      	blx	r3
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	da02      	bge.n	800108c <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001086:	f06f 0304 	mvn.w	r3, #4
 800108a:	e060      	b.n	800114e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f003 0304 	and.w	r3, r3, #4
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001096:	2301      	movs	r3, #1
 8001098:	e059      	b.n	800114e <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	6810      	ldr	r0, [r2, #0]
 80010a2:	f107 020c 	add.w	r2, r7, #12
 80010a6:	2100      	movs	r1, #0
 80010a8:	4798      	blx	r3
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	da02      	bge.n	80010b6 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80010b0:	f06f 0304 	mvn.w	r3, #4
 80010b4:	e04b      	b.n	800114e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d11b      	bne.n	80010f8 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d006      	beq.n	80010d8 <LAN8742_GetLinkState+0x90>
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80010d4:	2302      	movs	r3, #2
 80010d6:	e03a      	b.n	800114e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e033      	b.n	800114e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80010f0:	2304      	movs	r3, #4
 80010f2:	e02c      	b.n	800114e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80010f4:	2305      	movs	r3, #5
 80010f6:	e02a      	b.n	800114e <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	695b      	ldr	r3, [r3, #20]
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	6810      	ldr	r0, [r2, #0]
 8001100:	f107 020c 	add.w	r2, r7, #12
 8001104:	211f      	movs	r1, #31
 8001106:	4798      	blx	r3
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	da02      	bge.n	8001114 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800110e:	f06f 0304 	mvn.w	r3, #4
 8001112:	e01c      	b.n	800114e <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d101      	bne.n	8001122 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800111e:	2306      	movs	r3, #6
 8001120:	e015      	b.n	800114e <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f003 031c 	and.w	r3, r3, #28
 8001128:	2b18      	cmp	r3, #24
 800112a:	d101      	bne.n	8001130 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800112c:	2302      	movs	r3, #2
 800112e:	e00e      	b.n	800114e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f003 031c 	and.w	r3, r3, #28
 8001136:	2b08      	cmp	r3, #8
 8001138:	d101      	bne.n	800113e <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800113a:	2303      	movs	r3, #3
 800113c:	e007      	b.n	800114e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f003 031c 	and.w	r3, r3, #28
 8001144:	2b14      	cmp	r3, #20
 8001146:	d101      	bne.n	800114c <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001148:	2304      	movs	r3, #4
 800114a:	e000      	b.n	800114e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800114c:	2305      	movs	r3, #5
    }
  }
}
 800114e:	4618      	mov	r0, r3
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800115a:	2003      	movs	r0, #3
 800115c:	f000 f92e 	bl	80013bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001160:	2000      	movs	r0, #0
 8001162:	f000 f805 	bl	8001170 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001166:	f7ff fcbd 	bl	8000ae4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800116a:	2300      	movs	r3, #0
}
 800116c:	4618      	mov	r0, r3
 800116e:	bd80      	pop	{r7, pc}

08001170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001178:	4b12      	ldr	r3, [pc, #72]	@ (80011c4 <HAL_InitTick+0x54>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b12      	ldr	r3, [pc, #72]	@ (80011c8 <HAL_InitTick+0x58>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	4619      	mov	r1, r3
 8001182:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001186:	fbb3 f3f1 	udiv	r3, r3, r1
 800118a:	fbb2 f3f3 	udiv	r3, r2, r3
 800118e:	4618      	mov	r0, r3
 8001190:	f000 f93b 	bl	800140a <HAL_SYSTICK_Config>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e00e      	b.n	80011bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b0f      	cmp	r3, #15
 80011a2:	d80a      	bhi.n	80011ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a4:	2200      	movs	r2, #0
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ac:	f000 f911 	bl	80013d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b0:	4a06      	ldr	r2, [pc, #24]	@ (80011cc <HAL_InitTick+0x5c>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
 80011b8:	e000      	b.n	80011bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000000 	.word	0x20000000
 80011c8:	20000008 	.word	0x20000008
 80011cc:	20000004 	.word	0x20000004

080011d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d4:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <HAL_IncTick+0x20>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <HAL_IncTick+0x24>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4413      	add	r3, r2
 80011e0:	4a04      	ldr	r2, [pc, #16]	@ (80011f4 <HAL_IncTick+0x24>)
 80011e2:	6013      	str	r3, [r2, #0]
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20000008 	.word	0x20000008
 80011f4:	20000750 	.word	0x20000750

080011f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return uwTick;
 80011fc:	4b03      	ldr	r3, [pc, #12]	@ (800120c <HAL_GetTick+0x14>)
 80011fe:	681b      	ldr	r3, [r3, #0]
}
 8001200:	4618      	mov	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000750 	.word	0x20000750

08001210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001218:	f7ff ffee 	bl	80011f8 <HAL_GetTick>
 800121c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001228:	d005      	beq.n	8001236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800122a:	4b0a      	ldr	r3, [pc, #40]	@ (8001254 <HAL_Delay+0x44>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	461a      	mov	r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4413      	add	r3, r2
 8001234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001236:	bf00      	nop
 8001238:	f7ff ffde 	bl	80011f8 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	68fa      	ldr	r2, [r7, #12]
 8001244:	429a      	cmp	r2, r3
 8001246:	d8f7      	bhi.n	8001238 <HAL_Delay+0x28>
  {
  }
}
 8001248:	bf00      	nop
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000008 	.word	0x20000008

08001258 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001268:	4b0b      	ldr	r3, [pc, #44]	@ (8001298 <__NVIC_SetPriorityGrouping+0x40>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800126e:	68ba      	ldr	r2, [r7, #8]
 8001270:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001274:	4013      	ands	r3, r2
 8001276:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001280:	4b06      	ldr	r3, [pc, #24]	@ (800129c <__NVIC_SetPriorityGrouping+0x44>)
 8001282:	4313      	orrs	r3, r2
 8001284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001286:	4a04      	ldr	r2, [pc, #16]	@ (8001298 <__NVIC_SetPriorityGrouping+0x40>)
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	60d3      	str	r3, [r2, #12]
}
 800128c:	bf00      	nop
 800128e:	3714      	adds	r7, #20
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	e000ed00 	.word	0xe000ed00
 800129c:	05fa0000 	.word	0x05fa0000

080012a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a4:	4b04      	ldr	r3, [pc, #16]	@ (80012b8 <__NVIC_GetPriorityGrouping+0x18>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	0a1b      	lsrs	r3, r3, #8
 80012aa:	f003 0307 	and.w	r3, r3, #7
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	6039      	str	r1, [r7, #0]
 80012c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	db0a      	blt.n	80012e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	490c      	ldr	r1, [pc, #48]	@ (8001308 <__NVIC_SetPriority+0x4c>)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	0112      	lsls	r2, r2, #4
 80012dc:	b2d2      	uxtb	r2, r2
 80012de:	440b      	add	r3, r1
 80012e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e4:	e00a      	b.n	80012fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	4908      	ldr	r1, [pc, #32]	@ (800130c <__NVIC_SetPriority+0x50>)
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	f003 030f 	and.w	r3, r3, #15
 80012f2:	3b04      	subs	r3, #4
 80012f4:	0112      	lsls	r2, r2, #4
 80012f6:	b2d2      	uxtb	r2, r2
 80012f8:	440b      	add	r3, r1
 80012fa:	761a      	strb	r2, [r3, #24]
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000e100 	.word	0xe000e100
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001310:	b480      	push	{r7}
 8001312:	b089      	sub	sp, #36	@ 0x24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	f1c3 0307 	rsb	r3, r3, #7
 800132a:	2b04      	cmp	r3, #4
 800132c:	bf28      	it	cs
 800132e:	2304      	movcs	r3, #4
 8001330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3304      	adds	r3, #4
 8001336:	2b06      	cmp	r3, #6
 8001338:	d902      	bls.n	8001340 <NVIC_EncodePriority+0x30>
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3b03      	subs	r3, #3
 800133e:	e000      	b.n	8001342 <NVIC_EncodePriority+0x32>
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	f04f 32ff 	mov.w	r2, #4294967295
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43da      	mvns	r2, r3
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	401a      	ands	r2, r3
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001358:	f04f 31ff 	mov.w	r1, #4294967295
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	fa01 f303 	lsl.w	r3, r1, r3
 8001362:	43d9      	mvns	r1, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001368:	4313      	orrs	r3, r2
         );
}
 800136a:	4618      	mov	r0, r3
 800136c:	3724      	adds	r7, #36	@ 0x24
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
	...

08001378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3b01      	subs	r3, #1
 8001384:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001388:	d301      	bcc.n	800138e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800138a:	2301      	movs	r3, #1
 800138c:	e00f      	b.n	80013ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800138e:	4a0a      	ldr	r2, [pc, #40]	@ (80013b8 <SysTick_Config+0x40>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3b01      	subs	r3, #1
 8001394:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001396:	210f      	movs	r1, #15
 8001398:	f04f 30ff 	mov.w	r0, #4294967295
 800139c:	f7ff ff8e 	bl	80012bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a0:	4b05      	ldr	r3, [pc, #20]	@ (80013b8 <SysTick_Config+0x40>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013a6:	4b04      	ldr	r3, [pc, #16]	@ (80013b8 <SysTick_Config+0x40>)
 80013a8:	2207      	movs	r2, #7
 80013aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	e000e010 	.word	0xe000e010

080013bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff ff47 	bl	8001258 <__NVIC_SetPriorityGrouping>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b086      	sub	sp, #24
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	4603      	mov	r3, r0
 80013da:	60b9      	str	r1, [r7, #8]
 80013dc:	607a      	str	r2, [r7, #4]
 80013de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013e4:	f7ff ff5c 	bl	80012a0 <__NVIC_GetPriorityGrouping>
 80013e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	68b9      	ldr	r1, [r7, #8]
 80013ee:	6978      	ldr	r0, [r7, #20]
 80013f0:	f7ff ff8e 	bl	8001310 <NVIC_EncodePriority>
 80013f4:	4602      	mov	r2, r0
 80013f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fa:	4611      	mov	r1, r2
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ff5d 	bl	80012bc <__NVIC_SetPriority>
}
 8001402:	bf00      	nop
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff ffb0 	bl	8001378 <SysTick_Config>
 8001418:	4603      	mov	r3, r0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e086      	b.n	8001544 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800143c:	2b00      	cmp	r3, #0
 800143e:	d106      	bne.n	800144e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2223      	movs	r2, #35	@ 0x23
 8001444:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f004 f8f1 	bl	8005630 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144e:	4b3f      	ldr	r3, [pc, #252]	@ (800154c <HAL_ETH_Init+0x128>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001452:	4a3e      	ldr	r2, [pc, #248]	@ (800154c <HAL_ETH_Init+0x128>)
 8001454:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001458:	6453      	str	r3, [r2, #68]	@ 0x44
 800145a:	4b3c      	ldr	r3, [pc, #240]	@ (800154c <HAL_ETH_Init+0x128>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800145e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001466:	4b3a      	ldr	r3, [pc, #232]	@ (8001550 <HAL_ETH_Init+0x12c>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	4a39      	ldr	r2, [pc, #228]	@ (8001550 <HAL_ETH_Init+0x12c>)
 800146c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001470:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001472:	4b37      	ldr	r3, [pc, #220]	@ (8001550 <HAL_ETH_Init+0x12c>)
 8001474:	685a      	ldr	r2, [r3, #4]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	4935      	ldr	r1, [pc, #212]	@ (8001550 <HAL_ETH_Init+0x12c>)
 800147c:	4313      	orrs	r3, r2
 800147e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001480:	4b33      	ldr	r3, [pc, #204]	@ (8001550 <HAL_ETH_Init+0x12c>)
 8001482:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	6812      	ldr	r2, [r2, #0]
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800149a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800149c:	f7ff feac 	bl	80011f8 <HAL_GetTick>
 80014a0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014a2:	e011      	b.n	80014c8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80014a4:	f7ff fea8 	bl	80011f8 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80014b2:	d909      	bls.n	80014c8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2204      	movs	r2, #4
 80014b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	22e0      	movs	r2, #224	@ 0xe0
 80014c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e03d      	b.n	8001544 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1e4      	bne.n	80014a4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 fe18 	bl	8002110 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f000 fec3 	bl	800226c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f000 ff19 	bl	800231e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	461a      	mov	r2, r3
 80014f2:	2100      	movs	r1, #0
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f000 fe81 	bl	80021fc <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001508:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	4b0f      	ldr	r3, [pc, #60]	@ (8001554 <HAL_ETH_Init+0x130>)
 8001518:	430b      	orrs	r3, r1
 800151a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800152e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2210      	movs	r2, #16
 800153e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40023800 	.word	0x40023800
 8001550:	40013800 	.word	0x40013800
 8001554:	00020060 	.word	0x00020060

08001558 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001566:	2b10      	cmp	r3, #16
 8001568:	d150      	bne.n	800160c <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2223      	movs	r2, #35	@ 0x23
 800156e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2204      	movs	r2, #4
 8001576:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f000 f9f9 	bl	8001970 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f042 0208 	orr.w	r2, r2, #8
 800158c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001596:	2001      	movs	r0, #1
 8001598:	f7ff fe3a 	bl	8001210 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	68fa      	ldr	r2, [r7, #12]
 80015a2:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f042 0204 	orr.w	r2, r2, #4
 80015b2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80015bc:	2001      	movs	r0, #1
 80015be:	f7ff fe27 	bl	8001210 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f000 fc3c 	bl	8001e48 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	6812      	ldr	r2, [r2, #0]
 80015de:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80015e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80015e6:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	6812      	ldr	r2, [r2, #0]
 80015f6:	f043 0302 	orr.w	r3, r3, #2
 80015fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80015fe:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2223      	movs	r2, #35	@ 0x23
 8001604:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8001608:	2300      	movs	r3, #0
 800160a:	e000      	b.n	800160e <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
  }
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b084      	sub	sp, #16
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001624:	2b23      	cmp	r3, #35	@ 0x23
 8001626:	d14a      	bne.n	80016be <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2223      	movs	r2, #35	@ 0x23
 800162c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	6812      	ldr	r2, [r2, #0]
 800163e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001642:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001646:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	6812      	ldr	r2, [r2, #0]
 8001656:	f023 0302 	bic.w	r3, r3, #2
 800165a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800165e:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f022 0204 	bic.w	r2, r2, #4
 800166e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001678:	2001      	movs	r0, #1
 800167a:	f7ff fdc9 	bl	8001210 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f000 fbde 	bl	8001e48 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 0208 	bic.w	r2, r2, #8
 800169a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80016a4:	2001      	movs	r0, #1
 80016a6:	f7ff fdb3 	bl	8001210 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2210      	movs	r2, #16
 80016b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80016ba:	2300      	movs	r3, #0
 80016bc:	e000      	b.n	80016c0 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
  }
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d109      	bne.n	80016ee <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016e0:	f043 0201 	orr.w	r2, r3, #1
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e07c      	b.n	80017e8 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80016f4:	2b23      	cmp	r3, #35	@ 0x23
 80016f6:	d176      	bne.n	80017e6 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80016f8:	2200      	movs	r2, #0
 80016fa:	68b9      	ldr	r1, [r7, #8]
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f000 fe7d 	bl	80023fc <ETH_Prepare_Tx_Descriptors>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d009      	beq.n	800171c <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800170e:	f043 0202 	orr.w	r2, r3, #2
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e065      	b.n	80017e8 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800171c:	f3bf 8f4f 	dsb	sy
}
 8001720:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	3206      	adds	r2, #6
 800172a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800172e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001734:	1c5a      	adds	r2, r3, #1
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	629a      	str	r2, [r3, #40]	@ 0x28
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800173e:	2b03      	cmp	r3, #3
 8001740:	d904      	bls.n	800174c <HAL_ETH_Transmit+0x84>
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001746:	1f1a      	subs	r2, r3, #4
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	3106      	adds	r1, #6
 8001758:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800175c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001760:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8001762:	f7ff fd49 	bl	80011f8 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001768:	e037      	b.n	80017da <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001772:	695b      	ldr	r3, [r3, #20]
 8001774:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d011      	beq.n	80017a0 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001782:	f043 0208 	orr.w	r2, r3, #8
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001794:	695a      	ldr	r2, [r3, #20]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e023      	b.n	80017e8 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a6:	d018      	beq.n	80017da <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80017a8:	f7ff fd26 	bl	80011f8 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d302      	bcc.n	80017be <HAL_ETH_Transmit+0xf6>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d10d      	bne.n	80017da <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017c4:	f043 0204 	orr.w	r2, r3, #4
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80017d4:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e006      	b.n	80017e8 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	dbc3      	blt.n	800176a <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	e000      	b.n	80017e8 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
  }
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3718      	adds	r7, #24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b088      	sub	sp, #32
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80017fe:	2300      	movs	r3, #0
 8001800:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d109      	bne.n	800181c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800180e:	f043 0201 	orr.w	r2, r3, #1
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e0a4      	b.n	8001966 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001822:	2b23      	cmp	r3, #35	@ 0x23
 8001824:	d001      	beq.n	800182a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e09d      	b.n	8001966 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800182e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	69fa      	ldr	r2, [r7, #28]
 8001834:	3212      	adds	r2, #18
 8001836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800183a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001840:	f1c3 0304 	rsb	r3, r3, #4
 8001844:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001846:	e066      	b.n	8001916 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001850:	2b00      	cmp	r3, #0
 8001852:	d007      	beq.n	8001864 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	69da      	ldr	r2, [r3, #28]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	699a      	ldr	r2, [r3, #24]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800186c:	2b00      	cmp	r3, #0
 800186e:	d103      	bne.n	8001878 <HAL_ETH_ReadData+0x88>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001874:	2b00      	cmp	r3, #0
 8001876:	d03c      	beq.n	80018f2 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001880:	2b00      	cmp	r3, #0
 8001882:	d005      	beq.n	8001890 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	0c1b      	lsrs	r3, r3, #16
 8001896:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800189a:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d005      	beq.n	80018b4 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80018b0:	2301      	movs	r3, #1
 80018b2:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80018cc:	461a      	mov	r2, r3
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	f004 f86f 	bl	80059b4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018da:	1c5a      	adds	r2, r3, #1
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	441a      	add	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	2200      	movs	r2, #0
 80018f0:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3301      	adds	r3, #1
 80018f6:	61fb      	str	r3, [r7, #28]
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	2b03      	cmp	r3, #3
 80018fc:	d902      	bls.n	8001904 <HAL_ETH_ReadData+0x114>
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	3b04      	subs	r3, #4
 8001902:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69fa      	ldr	r2, [r7, #28]
 8001908:	3212      	adds	r2, #18
 800190a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800190e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	3301      	adds	r3, #1
 8001914:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800191a:	2b00      	cmp	r3, #0
 800191c:	db06      	blt.n	800192c <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	429a      	cmp	r2, r3
 8001924:	d202      	bcs.n	800192c <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8001926:	7cfb      	ldrb	r3, [r7, #19]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d08d      	beq.n	8001848 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	441a      	add	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800193c:	2b00      	cmp	r3, #0
 800193e:	d002      	beq.n	8001946 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f000 f815 	bl	8001970 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69fa      	ldr	r2, [r7, #28]
 800194a:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 800194c:	7cfb      	ldrb	r3, [r7, #19]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d108      	bne.n	8001964 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001960:	2300      	movs	r3, #0
 8001962:	e000      	b.n	8001966 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
}
 8001966:	4618      	mov	r0, r3
 8001968:	3720      	adds	r7, #32
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001978:	2300      	movs	r3, #0
 800197a:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 800197c:	2301      	movs	r3, #1
 800197e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001984:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69fa      	ldr	r2, [r7, #28]
 800198a:	3212      	adds	r2, #18
 800198c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001990:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001996:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001998:	e042      	b.n	8001a20 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d112      	bne.n	80019c8 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80019a2:	f107 0308 	add.w	r3, r7, #8
 80019a6:	4618      	mov	r0, r3
 80019a8:	f003 ffd4 	bl	8005954 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d102      	bne.n	80019b8 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80019b2:	2300      	movs	r3, #0
 80019b4:	74fb      	strb	r3, [r7, #19]
 80019b6:	e007      	b.n	80019c8 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	461a      	mov	r2, r3
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	461a      	mov	r2, r3
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80019c8:	7cfb      	ldrb	r3, [r7, #19]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d028      	beq.n	8001a20 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d106      	bne.n	80019e4 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	695a      	ldr	r2, [r3, #20]
 80019da:	4b26      	ldr	r3, [pc, #152]	@ (8001a74 <ETH_UpdateDescriptor+0x104>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	6053      	str	r3, [r2, #4]
 80019e2:	e005      	b.n	80019f0 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	3301      	adds	r3, #1
 8001a00:	61fb      	str	r3, [r7, #28]
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	2b03      	cmp	r3, #3
 8001a06:	d902      	bls.n	8001a0e <ETH_UpdateDescriptor+0x9e>
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	3b04      	subs	r3, #4
 8001a0c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	69fa      	ldr	r2, [r7, #28]
 8001a12:	3212      	adds	r2, #18
 8001a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a18:	617b      	str	r3, [r7, #20]
      desccount--;
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d002      	beq.n	8001a2c <ETH_UpdateDescriptor+0xbc>
 8001a26:	7cfb      	ldrb	r3, [r7, #19]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1b6      	bne.n	800199a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d01a      	beq.n	8001a6c <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001a40:	f3bf 8f5f 	dmb	sy
}
 8001a44:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6919      	ldr	r1, [r3, #16]
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	18ca      	adds	r2, r1, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a5e:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	69fa      	ldr	r2, [r7, #28]
 8001a64:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	3720      	adds	r7, #32
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	80004000 	.word	0x80004000

08001a78 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
 8001a84:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	f003 031c 	and.w	r3, r3, #28
 8001a94:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	02db      	lsls	r3, r3, #11
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	019b      	lsls	r3, r3, #6
 8001aa6:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	f023 0302 	bic.w	r3, r3, #2
 8001ab6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	697a      	ldr	r2, [r7, #20]
 8001ac6:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001ac8:	f7ff fb96 	bl	80011f8 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ace:	e00d      	b.n	8001aec <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001ad0:	f7ff fb92 	bl	80011f8 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ade:	d301      	bcc.n	8001ae4 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e010      	b.n	8001b06 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1ec      	bne.n	8001ad0 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	461a      	mov	r2, r3
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3718      	adds	r7, #24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b086      	sub	sp, #24
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	60f8      	str	r0, [r7, #12]
 8001b16:	60b9      	str	r1, [r7, #8]
 8001b18:	607a      	str	r2, [r7, #4]
 8001b1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	f003 031c 	and.w	r3, r3, #28
 8001b2a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	02db      	lsls	r3, r3, #11
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	019b      	lsls	r3, r3, #6
 8001b3c:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	f043 0302 	orr.w	r3, r3, #2
 8001b4c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	697a      	ldr	r2, [r7, #20]
 8001b66:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b68:	f7ff fb46 	bl	80011f8 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b6e:	e00d      	b.n	8001b8c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001b70:	f7ff fb42 	bl	80011f8 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b7e:	d301      	bcc.n	8001b84 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e009      	b.n	8001b98 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1ec      	bne.n	8001b70 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e0e6      	b.n	8001d82 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0310 	and.w	r3, r3, #16
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	bf14      	ite	ne
 8001bc2:	2301      	movne	r3, #1
 8001bc4:	2300      	moveq	r3, #0
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	461a      	mov	r2, r3
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	bf0c      	ite	eq
 8001bec:	2301      	moveq	r3, #1
 8001bee:	2300      	movne	r3, #0
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	bf14      	ite	ne
 8001c08:	2301      	movne	r3, #1
 8001c0a:	2300      	moveq	r3, #0
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	bf0c      	ite	eq
 8001c22:	2301      	moveq	r3, #1
 8001c24:	2300      	movne	r3, #0
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	461a      	mov	r2, r3
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	bf14      	ite	ne
 8001c3c:	2301      	movne	r3, #1
 8001c3e:	2300      	moveq	r3, #0
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	461a      	mov	r2, r3
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	bf0c      	ite	eq
 8001c72:	2301      	moveq	r3, #1
 8001c74:	2300      	movne	r3, #0
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	461a      	mov	r2, r3
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	bf0c      	ite	eq
 8001c8c:	2301      	moveq	r3, #1
 8001c8e:	2300      	movne	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	461a      	mov	r2, r3
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	bf14      	ite	ne
 8001ca6:	2301      	movne	r3, #1
 8001ca8:	2300      	moveq	r3, #0
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	461a      	mov	r2, r3
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	bf14      	ite	ne
 8001cce:	2301      	movne	r3, #1
 8001cd0:	2300      	moveq	r3, #0
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	bf14      	ite	ne
 8001ce8:	2301      	movne	r3, #1
 8001cea:	2300      	moveq	r3, #0
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	461a      	mov	r2, r3
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	bf14      	ite	ne
 8001d02:	2301      	movne	r3, #1
 8001d04:	2300      	moveq	r3, #0
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	461a      	mov	r2, r3
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	bf0c      	ite	eq
 8001d1e:	2301      	moveq	r3, #1
 8001d20:	2300      	movne	r3, #0
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	461a      	mov	r2, r3
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	0c1b      	lsrs	r3, r3, #16
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	f003 0304 	and.w	r3, r3, #4
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	bf14      	ite	ne
 8001d56:	2301      	movne	r3, #1
 8001d58:	2300      	moveq	r3, #0
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	bf14      	ite	ne
 8001d72:	2301      	movne	r3, #1
 8001d74:	2300      	moveq	r3, #0
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
 8001d96:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e00b      	b.n	8001dba <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001da8:	2b10      	cmp	r3, #16
 8001daa:	d105      	bne.n	8001db8 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001dac:	6839      	ldr	r1, [r7, #0]
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f870 	bl	8001e94 <ETH_SetMACConfig>

    return HAL_OK;
 8001db4:	2300      	movs	r3, #0
 8001db6:	e000      	b.n	8001dba <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
  }
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
	...

08001dc4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f023 031c 	bic.w	r3, r3, #28
 8001dda:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001ddc:	f001 fc54 	bl	8003688 <HAL_RCC_GetHCLKFreq>
 8001de0:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	4a14      	ldr	r2, [pc, #80]	@ (8001e38 <HAL_ETH_SetMDIOClockRange+0x74>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d804      	bhi.n	8001df4 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f043 0308 	orr.w	r3, r3, #8
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	e019      	b.n	8001e28 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	4a11      	ldr	r2, [pc, #68]	@ (8001e3c <HAL_ETH_SetMDIOClockRange+0x78>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d204      	bcs.n	8001e06 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f043 030c 	orr.w	r3, r3, #12
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	e010      	b.n	8001e28 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	4a0d      	ldr	r2, [pc, #52]	@ (8001e40 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d90c      	bls.n	8001e28 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	4a0c      	ldr	r2, [pc, #48]	@ (8001e44 <HAL_ETH_SetMDIOClockRange+0x80>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d804      	bhi.n	8001e20 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f043 0304 	orr.w	r3, r3, #4
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	e003      	b.n	8001e28 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f043 0310 	orr.w	r3, r3, #16
 8001e26:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	611a      	str	r2, [r3, #16]
}
 8001e30:	bf00      	nop
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	02160ebf 	.word	0x02160ebf
 8001e3c:	03938700 	.word	0x03938700
 8001e40:	05f5e0ff 	.word	0x05f5e0ff
 8001e44:	08f0d17f 	.word	0x08f0d17f

08001e48 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	6812      	ldr	r2, [r2, #0]
 8001e62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e66:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e6a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e78:	2001      	movs	r0, #1
 8001e7a:	f7ff f9c9 	bl	8001210 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e88:	6193      	str	r3, [r2, #24]
}
 8001e8a:	bf00      	nop
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
	...

08001e94 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	4b53      	ldr	r3, [pc, #332]	@ (8001ff8 <ETH_SetMACConfig+0x164>)
 8001eaa:	4013      	ands	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	7b9b      	ldrb	r3, [r3, #14]
 8001eb2:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	7c12      	ldrb	r2, [r2, #16]
 8001eb8:	2a00      	cmp	r2, #0
 8001eba:	d102      	bne.n	8001ec2 <ETH_SetMACConfig+0x2e>
 8001ebc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001ec0:	e000      	b.n	8001ec4 <ETH_SetMACConfig+0x30>
 8001ec2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001ec4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	7c52      	ldrb	r2, [r2, #17]
 8001eca:	2a00      	cmp	r2, #0
 8001ecc:	d102      	bne.n	8001ed4 <ETH_SetMACConfig+0x40>
 8001ece:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001ed2:	e000      	b.n	8001ed6 <ETH_SetMACConfig+0x42>
 8001ed4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001ed6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001edc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	7fdb      	ldrb	r3, [r3, #31]
 8001ee2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001ee4:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001eea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	7f92      	ldrb	r2, [r2, #30]
 8001ef0:	2a00      	cmp	r2, #0
 8001ef2:	d102      	bne.n	8001efa <ETH_SetMACConfig+0x66>
 8001ef4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ef8:	e000      	b.n	8001efc <ETH_SetMACConfig+0x68>
 8001efa:	2200      	movs	r2, #0
                        macconf->Speed |
 8001efc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	7f1b      	ldrb	r3, [r3, #28]
 8001f02:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001f04:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001f0a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	791b      	ldrb	r3, [r3, #4]
 8001f10:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001f12:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001f1a:	2a00      	cmp	r2, #0
 8001f1c:	d102      	bne.n	8001f24 <ETH_SetMACConfig+0x90>
 8001f1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f22:	e000      	b.n	8001f26 <ETH_SetMACConfig+0x92>
 8001f24:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001f26:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	7bdb      	ldrb	r3, [r3, #15]
 8001f2c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001f2e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001f34:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001f3c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f56:	2001      	movs	r0, #1
 8001f58:	f7ff f95a 	bl	8001210 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001f72:	4013      	ands	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f7a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001f82:	2a00      	cmp	r2, #0
 8001f84:	d101      	bne.n	8001f8a <ETH_SetMACConfig+0xf6>
 8001f86:	2280      	movs	r2, #128	@ 0x80
 8001f88:	e000      	b.n	8001f8c <ETH_SetMACConfig+0xf8>
 8001f8a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f8c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f92:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001f9a:	2a01      	cmp	r2, #1
 8001f9c:	d101      	bne.n	8001fa2 <ETH_SetMACConfig+0x10e>
 8001f9e:	2208      	movs	r2, #8
 8001fa0:	e000      	b.n	8001fa4 <ETH_SetMACConfig+0x110>
 8001fa2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001fa4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001fac:	2a01      	cmp	r2, #1
 8001fae:	d101      	bne.n	8001fb4 <ETH_SetMACConfig+0x120>
 8001fb0:	2204      	movs	r2, #4
 8001fb2:	e000      	b.n	8001fb6 <ETH_SetMACConfig+0x122>
 8001fb4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001fb6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001fbe:	2a01      	cmp	r2, #1
 8001fc0:	d101      	bne.n	8001fc6 <ETH_SetMACConfig+0x132>
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	e000      	b.n	8001fc8 <ETH_SetMACConfig+0x134>
 8001fc6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fe0:	2001      	movs	r0, #1
 8001fe2:	f7ff f915 	bl	8001210 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	619a      	str	r2, [r3, #24]
}
 8001fee:	bf00      	nop
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	fd20810f 	.word	0xfd20810f

08001ffc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	4b3d      	ldr	r3, [pc, #244]	@ (800210c <ETH_SetDMAConfig+0x110>)
 8002016:	4013      	ands	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	7b1b      	ldrb	r3, [r3, #12]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d102      	bne.n	8002028 <ETH_SetDMAConfig+0x2c>
 8002022:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002026:	e000      	b.n	800202a <ETH_SetDMAConfig+0x2e>
 8002028:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	7b5b      	ldrb	r3, [r3, #13]
 800202e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002030:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	7f52      	ldrb	r2, [r2, #29]
 8002036:	2a00      	cmp	r2, #0
 8002038:	d102      	bne.n	8002040 <ETH_SetDMAConfig+0x44>
 800203a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800203e:	e000      	b.n	8002042 <ETH_SetDMAConfig+0x46>
 8002040:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002042:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	7b9b      	ldrb	r3, [r3, #14]
 8002048:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800204a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002050:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	7f1b      	ldrb	r3, [r3, #28]
 8002056:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002058:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	7f9b      	ldrb	r3, [r3, #30]
 800205e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002060:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002066:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800206e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002070:	4313      	orrs	r3, r2
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	4313      	orrs	r3, r2
 8002076:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002080:	461a      	mov	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002092:	2001      	movs	r0, #1
 8002094:	f7ff f8bc 	bl	8001210 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020a0:	461a      	mov	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	791b      	ldrb	r3, [r3, #4]
 80020aa:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80020b0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80020b6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80020bc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80020c4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80020c6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020cc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80020ce:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80020d4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	6812      	ldr	r2, [r2, #0]
 80020da:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80020de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020e2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020f0:	2001      	movs	r0, #1
 80020f2:	f7ff f88d 	bl	8001210 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020fe:	461a      	mov	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6013      	str	r3, [r2, #0]
}
 8002104:	bf00      	nop
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	f8de3f23 	.word	0xf8de3f23

08002110 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b0a6      	sub	sp, #152	@ 0x98
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002118:	2301      	movs	r3, #1
 800211a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800211e:	2301      	movs	r3, #1
 8002120:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002124:	2300      	movs	r3, #0
 8002126:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002128:	2300      	movs	r3, #0
 800212a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800212e:	2301      	movs	r3, #1
 8002130:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002134:	2300      	movs	r3, #0
 8002136:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800213a:	2301      	movs	r3, #1
 800213c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002140:	2301      	movs	r3, #1
 8002142:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002146:	2300      	movs	r3, #0
 8002148:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800214c:	2300      	movs	r3, #0
 800214e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002152:	2300      	movs	r3, #0
 8002154:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002156:	2300      	movs	r3, #0
 8002158:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800215c:	2300      	movs	r3, #0
 800215e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002160:	2300      	movs	r3, #0
 8002162:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002166:	2300      	movs	r3, #0
 8002168:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800216c:	2300      	movs	r3, #0
 800216e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002172:	2300      	movs	r3, #0
 8002174:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002178:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800217c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800217e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002182:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002184:	2300      	movs	r3, #0
 8002186:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800218a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800218e:	4619      	mov	r1, r3
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff fe7f 	bl	8001e94 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002196:	2301      	movs	r3, #1
 8002198:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800219a:	2301      	movs	r3, #1
 800219c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800219e:	2301      	movs	r3, #1
 80021a0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80021a4:	2301      	movs	r3, #1
 80021a6:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80021a8:	2300      	movs	r3, #0
 80021aa:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80021ac:	2300      	movs	r3, #0
 80021ae:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80021b2:	2300      	movs	r3, #0
 80021b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80021b8:	2300      	movs	r3, #0
 80021ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80021bc:	2301      	movs	r3, #1
 80021be:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80021c2:	2301      	movs	r3, #1
 80021c4:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80021c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80021ca:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80021cc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80021d0:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80021d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021d6:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80021d8:	2301      	movs	r3, #1
 80021da:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80021e2:	2300      	movs	r3, #0
 80021e4:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80021e6:	f107 0308 	add.w	r3, r7, #8
 80021ea:	4619      	mov	r1, r3
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f7ff ff05 	bl	8001ffc <ETH_SetDMAConfig>
}
 80021f2:	bf00      	nop
 80021f4:	3798      	adds	r7, #152	@ 0x98
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
	...

080021fc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b087      	sub	sp, #28
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3305      	adds	r3, #5
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	021b      	lsls	r3, r3, #8
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	3204      	adds	r2, #4
 8002214:	7812      	ldrb	r2, [r2, #0]
 8002216:	4313      	orrs	r3, r2
 8002218:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	4b11      	ldr	r3, [pc, #68]	@ (8002264 <ETH_MACAddressConfig+0x68>)
 800221e:	4413      	add	r3, r2
 8002220:	461a      	mov	r2, r3
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3303      	adds	r3, #3
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	061a      	lsls	r2, r3, #24
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3302      	adds	r3, #2
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	041b      	lsls	r3, r3, #16
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3301      	adds	r3, #1
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	021b      	lsls	r3, r3, #8
 8002240:	4313      	orrs	r3, r2
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	7812      	ldrb	r2, [r2, #0]
 8002246:	4313      	orrs	r3, r2
 8002248:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	4b06      	ldr	r3, [pc, #24]	@ (8002268 <ETH_MACAddressConfig+0x6c>)
 800224e:	4413      	add	r3, r2
 8002250:	461a      	mov	r2, r3
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	6013      	str	r3, [r2, #0]
}
 8002256:	bf00      	nop
 8002258:	371c      	adds	r7, #28
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	40028040 	.word	0x40028040
 8002268:	40028044 	.word	0x40028044

0800226c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002274:	2300      	movs	r3, #0
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	e03e      	b.n	80022f8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68d9      	ldr	r1, [r3, #12]
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	4613      	mov	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	440b      	add	r3, r1
 800228a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2200      	movs	r2, #0
 8002296:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2200      	movs	r2, #0
 800229c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2200      	movs	r2, #0
 80022a2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80022a4:	68b9      	ldr	r1, [r7, #8]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	3206      	adds	r2, #6
 80022ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d80c      	bhi.n	80022dc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68d9      	ldr	r1, [r3, #12]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	1c5a      	adds	r2, r3, #1
 80022ca:	4613      	mov	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	440b      	add	r3, r1
 80022d4:	461a      	mov	r2, r3
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	60da      	str	r2, [r3, #12]
 80022da:	e004      	b.n	80022e6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	461a      	mov	r2, r3
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	3301      	adds	r3, #1
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2b03      	cmp	r3, #3
 80022fc:	d9bd      	bls.n	800227a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68da      	ldr	r2, [r3, #12]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002310:	611a      	str	r2, [r3, #16]
}
 8002312:	bf00      	nop
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800231e:	b480      	push	{r7}
 8002320:	b085      	sub	sp, #20
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	e048      	b.n	80023be <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6919      	ldr	r1, [r3, #16]
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	4613      	mov	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	440b      	add	r3, r1
 800233c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2200      	movs	r2, #0
 8002348:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2200      	movs	r2, #0
 800234e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2200      	movs	r2, #0
 8002354:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2200      	movs	r2, #0
 800235a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	2200      	movs	r2, #0
 8002360:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002368:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002382:	68b9      	ldr	r1, [r7, #8]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	3212      	adds	r2, #18
 800238a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2b02      	cmp	r3, #2
 8002392:	d80c      	bhi.n	80023ae <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6919      	ldr	r1, [r3, #16]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	1c5a      	adds	r2, r3, #1
 800239c:	4613      	mov	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4413      	add	r3, r2
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	440b      	add	r3, r1
 80023a6:	461a      	mov	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	60da      	str	r2, [r3, #12]
 80023ac:	e004      	b.n	80023b8 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	461a      	mov	r2, r3
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	3301      	adds	r3, #1
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2b03      	cmp	r3, #3
 80023c2:	d9b3      	bls.n	800232c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691a      	ldr	r2, [r3, #16]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023ee:	60da      	str	r2, [r3, #12]
}
 80023f0:	bf00      	nop
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b091      	sub	sp, #68	@ 0x44
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	3318      	adds	r3, #24
 800240c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800240e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 800241a:	2300      	movs	r3, #0
 800241c:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800241e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002420:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002426:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 800242e:	2300      	movs	r3, #0
 8002430:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800243a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800243e:	d007      	beq.n	8002450 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002440:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002442:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002444:	3304      	adds	r3, #4
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002450:	2302      	movs	r3, #2
 8002452:	e111      	b.n	8002678 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8002454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002456:	3301      	adds	r3, #1
 8002458:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800245a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	461a      	mov	r2, r3
 8002460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002462:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	4b86      	ldr	r3, [pc, #536]	@ (8002684 <ETH_Prepare_Tx_Descriptors+0x288>)
 800246a:	4013      	ands	r3, r2
 800246c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800246e:	6852      	ldr	r2, [r2, #4]
 8002470:	431a      	orrs	r2, r3
 8002472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002474:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d008      	beq.n	8002494 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	431a      	orrs	r2, r3
 8002490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002492:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0320 	and.w	r3, r3, #32
 800249c:	2b00      	cmp	r3, #0
 800249e:	d008      	beq.n	80024b2 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80024a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	431a      	orrs	r2, r3
 80024ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024b0:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0304 	and.w	r3, r3, #4
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d005      	beq.n	80024ca <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80024be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80024c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024c8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80024ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80024d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d4:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80024d6:	e082      	b.n	80025de <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80024d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80024e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e2:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d006      	beq.n	80024f8 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80024ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80024f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	e005      	b.n	8002504 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80024f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002502:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002504:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002506:	3301      	adds	r3, #1
 8002508:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800250a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800250c:	2b03      	cmp	r3, #3
 800250e:	d902      	bls.n	8002516 <ETH_Prepare_Tx_Descriptors+0x11a>
 8002510:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002512:	3b04      	subs	r3, #4
 8002514:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002518:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800251a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800251e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002528:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800252c:	d007      	beq.n	800253e <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800252e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002530:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002532:	3304      	adds	r3, #4
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d029      	beq.n	8002592 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 800253e:	6a3b      	ldr	r3, [r7, #32]
 8002540:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002544:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800254a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800254c:	2300      	movs	r3, #0
 800254e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002550:	e019      	b.n	8002586 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8002552:	f3bf 8f5f 	dmb	sy
}
 8002556:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002562:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002566:	3301      	adds	r3, #1
 8002568:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800256a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800256c:	2b03      	cmp	r3, #3
 800256e:	d902      	bls.n	8002576 <ETH_Prepare_Tx_Descriptors+0x17a>
 8002570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002572:	3b04      	subs	r3, #4
 8002574:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002578:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800257a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800257e:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002582:	3301      	adds	r3, #1
 8002584:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002586:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800258a:	429a      	cmp	r2, r3
 800258c:	d3e1      	bcc.n	8002552 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 800258e:	2302      	movs	r3, #2
 8002590:	e072      	b.n	8002678 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800259a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800259c:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 800259e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025a0:	3301      	adds	r3, #1
 80025a2:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80025a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80025aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	461a      	mov	r2, r3
 80025b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b2:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80025b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	4b32      	ldr	r3, [pc, #200]	@ (8002684 <ETH_Prepare_Tx_Descriptors+0x288>)
 80025ba:	4013      	ands	r3, r2
 80025bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025be:	6852      	ldr	r2, [r2, #4]
 80025c0:	431a      	orrs	r2, r3
 80025c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c4:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80025c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025c8:	3301      	adds	r3, #1
 80025ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80025cc:	f3bf 8f5f 	dmb	sy
}
 80025d0:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80025d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80025da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025dc:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80025de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f47f af78 	bne.w	80024d8 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d006      	beq.n	80025fc <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80025ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80025f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	e005      	b.n	8002608 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80025fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002606:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002612:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002616:	6a3a      	ldr	r2, [r7, #32]
 8002618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800261c:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 800261e:	f3bf 8f5f 	dmb	sy
}
 8002622:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800262c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800262e:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002632:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002634:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002636:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002638:	3304      	adds	r3, #4
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002642:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002644:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002646:	f3ef 8310 	mrs	r3, PRIMASK
 800264a:	613b      	str	r3, [r7, #16]
  return(result);
 800264c:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800264e:	61fb      	str	r3, [r7, #28]
 8002650:	2301      	movs	r3, #1
 8002652:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	f383 8810 	msr	PRIMASK, r3
}
 800265a:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800265c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002662:	4413      	add	r3, r2
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002668:	629a      	str	r2, [r3, #40]	@ 0x28
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	f383 8810 	msr	PRIMASK, r3
}
 8002674:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3744      	adds	r7, #68	@ 0x44
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	ffffe000 	.word	0xffffe000

08002688 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002688:	b480      	push	{r7}
 800268a:	b089      	sub	sp, #36	@ 0x24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002692:	2300      	movs	r3, #0
 8002694:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002696:	2300      	movs	r3, #0
 8002698:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800269a:	2300      	movs	r3, #0
 800269c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800269e:	2300      	movs	r3, #0
 80026a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
 80026a6:	e175      	b.n	8002994 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80026a8:	2201      	movs	r2, #1
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	4013      	ands	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	f040 8164 	bne.w	800298e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d005      	beq.n	80026de <HAL_GPIO_Init+0x56>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d130      	bne.n	8002740 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	2203      	movs	r2, #3
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43db      	mvns	r3, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4013      	ands	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	68da      	ldr	r2, [r3, #12]
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4313      	orrs	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002714:	2201      	movs	r2, #1
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	091b      	lsrs	r3, r3, #4
 800272a:	f003 0201 	and.w	r2, r3, #1
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4313      	orrs	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 0303 	and.w	r3, r3, #3
 8002748:	2b03      	cmp	r3, #3
 800274a:	d017      	beq.n	800277c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	2203      	movs	r2, #3
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 0303 	and.w	r3, r3, #3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d123      	bne.n	80027d0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	08da      	lsrs	r2, r3, #3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3208      	adds	r2, #8
 8002790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	220f      	movs	r2, #15
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	43db      	mvns	r3, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4013      	ands	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	691a      	ldr	r2, [r3, #16]
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4313      	orrs	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	08da      	lsrs	r2, r3, #3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3208      	adds	r2, #8
 80027ca:	69b9      	ldr	r1, [r7, #24]
 80027cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	2203      	movs	r2, #3
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	43db      	mvns	r3, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4013      	ands	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f003 0203 	and.w	r2, r3, #3
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 80be 	beq.w	800298e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002812:	4b66      	ldr	r3, [pc, #408]	@ (80029ac <HAL_GPIO_Init+0x324>)
 8002814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002816:	4a65      	ldr	r2, [pc, #404]	@ (80029ac <HAL_GPIO_Init+0x324>)
 8002818:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800281c:	6453      	str	r3, [r2, #68]	@ 0x44
 800281e:	4b63      	ldr	r3, [pc, #396]	@ (80029ac <HAL_GPIO_Init+0x324>)
 8002820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002822:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800282a:	4a61      	ldr	r2, [pc, #388]	@ (80029b0 <HAL_GPIO_Init+0x328>)
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	089b      	lsrs	r3, r3, #2
 8002830:	3302      	adds	r3, #2
 8002832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002836:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	220f      	movs	r2, #15
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43db      	mvns	r3, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4013      	ands	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a58      	ldr	r2, [pc, #352]	@ (80029b4 <HAL_GPIO_Init+0x32c>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d037      	beq.n	80028c6 <HAL_GPIO_Init+0x23e>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a57      	ldr	r2, [pc, #348]	@ (80029b8 <HAL_GPIO_Init+0x330>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d031      	beq.n	80028c2 <HAL_GPIO_Init+0x23a>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a56      	ldr	r2, [pc, #344]	@ (80029bc <HAL_GPIO_Init+0x334>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d02b      	beq.n	80028be <HAL_GPIO_Init+0x236>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a55      	ldr	r2, [pc, #340]	@ (80029c0 <HAL_GPIO_Init+0x338>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d025      	beq.n	80028ba <HAL_GPIO_Init+0x232>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a54      	ldr	r2, [pc, #336]	@ (80029c4 <HAL_GPIO_Init+0x33c>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d01f      	beq.n	80028b6 <HAL_GPIO_Init+0x22e>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a53      	ldr	r2, [pc, #332]	@ (80029c8 <HAL_GPIO_Init+0x340>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d019      	beq.n	80028b2 <HAL_GPIO_Init+0x22a>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a52      	ldr	r2, [pc, #328]	@ (80029cc <HAL_GPIO_Init+0x344>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d013      	beq.n	80028ae <HAL_GPIO_Init+0x226>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a51      	ldr	r2, [pc, #324]	@ (80029d0 <HAL_GPIO_Init+0x348>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d00d      	beq.n	80028aa <HAL_GPIO_Init+0x222>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a50      	ldr	r2, [pc, #320]	@ (80029d4 <HAL_GPIO_Init+0x34c>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d007      	beq.n	80028a6 <HAL_GPIO_Init+0x21e>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a4f      	ldr	r2, [pc, #316]	@ (80029d8 <HAL_GPIO_Init+0x350>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d101      	bne.n	80028a2 <HAL_GPIO_Init+0x21a>
 800289e:	2309      	movs	r3, #9
 80028a0:	e012      	b.n	80028c8 <HAL_GPIO_Init+0x240>
 80028a2:	230a      	movs	r3, #10
 80028a4:	e010      	b.n	80028c8 <HAL_GPIO_Init+0x240>
 80028a6:	2308      	movs	r3, #8
 80028a8:	e00e      	b.n	80028c8 <HAL_GPIO_Init+0x240>
 80028aa:	2307      	movs	r3, #7
 80028ac:	e00c      	b.n	80028c8 <HAL_GPIO_Init+0x240>
 80028ae:	2306      	movs	r3, #6
 80028b0:	e00a      	b.n	80028c8 <HAL_GPIO_Init+0x240>
 80028b2:	2305      	movs	r3, #5
 80028b4:	e008      	b.n	80028c8 <HAL_GPIO_Init+0x240>
 80028b6:	2304      	movs	r3, #4
 80028b8:	e006      	b.n	80028c8 <HAL_GPIO_Init+0x240>
 80028ba:	2303      	movs	r3, #3
 80028bc:	e004      	b.n	80028c8 <HAL_GPIO_Init+0x240>
 80028be:	2302      	movs	r3, #2
 80028c0:	e002      	b.n	80028c8 <HAL_GPIO_Init+0x240>
 80028c2:	2301      	movs	r3, #1
 80028c4:	e000      	b.n	80028c8 <HAL_GPIO_Init+0x240>
 80028c6:	2300      	movs	r3, #0
 80028c8:	69fa      	ldr	r2, [r7, #28]
 80028ca:	f002 0203 	and.w	r2, r2, #3
 80028ce:	0092      	lsls	r2, r2, #2
 80028d0:	4093      	lsls	r3, r2
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80028d8:	4935      	ldr	r1, [pc, #212]	@ (80029b0 <HAL_GPIO_Init+0x328>)
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	089b      	lsrs	r3, r3, #2
 80028de:	3302      	adds	r3, #2
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028e6:	4b3d      	ldr	r3, [pc, #244]	@ (80029dc <HAL_GPIO_Init+0x354>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	43db      	mvns	r3, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4013      	ands	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	4313      	orrs	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800290a:	4a34      	ldr	r2, [pc, #208]	@ (80029dc <HAL_GPIO_Init+0x354>)
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002910:	4b32      	ldr	r3, [pc, #200]	@ (80029dc <HAL_GPIO_Init+0x354>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	43db      	mvns	r3, r3
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4013      	ands	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	4313      	orrs	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002934:	4a29      	ldr	r2, [pc, #164]	@ (80029dc <HAL_GPIO_Init+0x354>)
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800293a:	4b28      	ldr	r3, [pc, #160]	@ (80029dc <HAL_GPIO_Init+0x354>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	43db      	mvns	r3, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4013      	ands	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	4313      	orrs	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800295e:	4a1f      	ldr	r2, [pc, #124]	@ (80029dc <HAL_GPIO_Init+0x354>)
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002964:	4b1d      	ldr	r3, [pc, #116]	@ (80029dc <HAL_GPIO_Init+0x354>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	43db      	mvns	r3, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4013      	ands	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d003      	beq.n	8002988 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	4313      	orrs	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002988:	4a14      	ldr	r2, [pc, #80]	@ (80029dc <HAL_GPIO_Init+0x354>)
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	3301      	adds	r3, #1
 8002992:	61fb      	str	r3, [r7, #28]
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	2b0f      	cmp	r3, #15
 8002998:	f67f ae86 	bls.w	80026a8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800299c:	bf00      	nop
 800299e:	bf00      	nop
 80029a0:	3724      	adds	r7, #36	@ 0x24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	40023800 	.word	0x40023800
 80029b0:	40013800 	.word	0x40013800
 80029b4:	40020000 	.word	0x40020000
 80029b8:	40020400 	.word	0x40020400
 80029bc:	40020800 	.word	0x40020800
 80029c0:	40020c00 	.word	0x40020c00
 80029c4:	40021000 	.word	0x40021000
 80029c8:	40021400 	.word	0x40021400
 80029cc:	40021800 	.word	0x40021800
 80029d0:	40021c00 	.word	0x40021c00
 80029d4:	40022000 	.word	0x40022000
 80029d8:	40022400 	.word	0x40022400
 80029dc:	40013c00 	.word	0x40013c00

080029e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	460b      	mov	r3, r1
 80029ea:	807b      	strh	r3, [r7, #2]
 80029ec:	4613      	mov	r3, r2
 80029ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029f0:	787b      	ldrb	r3, [r7, #1]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029f6:	887a      	ldrh	r2, [r7, #2]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80029fc:	e003      	b.n	8002a06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80029fe:	887b      	ldrh	r3, [r7, #2]
 8002a00:	041a      	lsls	r2, r3, #16
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	619a      	str	r2, [r3, #24]
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b086      	sub	sp, #24
 8002a16:	af02      	add	r7, sp, #8
 8002a18:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e108      	b.n	8002c36 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d106      	bne.n	8002a44 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7fe f8d4 	bl	8000bec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2203      	movs	r2, #3
 8002a48:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a52:	d102      	bne.n	8002a5a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f002 f820 	bl	8004aa4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6818      	ldr	r0, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	7c1a      	ldrb	r2, [r3, #16]
 8002a6c:	f88d 2000 	strb.w	r2, [sp]
 8002a70:	3304      	adds	r3, #4
 8002a72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a74:	f001 ffbc 	bl	80049f0 <USB_CoreInit>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d005      	beq.n	8002a8a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2202      	movs	r2, #2
 8002a82:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e0d5      	b.n	8002c36 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2100      	movs	r1, #0
 8002a90:	4618      	mov	r0, r3
 8002a92:	f002 f818 	bl	8004ac6 <USB_SetCurrentMode>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d005      	beq.n	8002aa8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e0c6      	b.n	8002c36 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	73fb      	strb	r3, [r7, #15]
 8002aac:	e04a      	b.n	8002b44 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002aae:	7bfa      	ldrb	r2, [r7, #15]
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	440b      	add	r3, r1
 8002abc:	3315      	adds	r3, #21
 8002abe:	2201      	movs	r2, #1
 8002ac0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ac2:	7bfa      	ldrb	r2, [r7, #15]
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	4413      	add	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	440b      	add	r3, r1
 8002ad0:	3314      	adds	r3, #20
 8002ad2:	7bfa      	ldrb	r2, [r7, #15]
 8002ad4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ad6:	7bfa      	ldrb	r2, [r7, #15]
 8002ad8:	7bfb      	ldrb	r3, [r7, #15]
 8002ada:	b298      	uxth	r0, r3
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	4413      	add	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	440b      	add	r3, r1
 8002ae8:	332e      	adds	r3, #46	@ 0x2e
 8002aea:	4602      	mov	r2, r0
 8002aec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002aee:	7bfa      	ldrb	r2, [r7, #15]
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	4613      	mov	r3, r2
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	4413      	add	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	440b      	add	r3, r1
 8002afc:	3318      	adds	r3, #24
 8002afe:	2200      	movs	r2, #0
 8002b00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b02:	7bfa      	ldrb	r2, [r7, #15]
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	4613      	mov	r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	440b      	add	r3, r1
 8002b10:	331c      	adds	r3, #28
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b16:	7bfa      	ldrb	r2, [r7, #15]
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	4413      	add	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	440b      	add	r3, r1
 8002b24:	3320      	adds	r3, #32
 8002b26:	2200      	movs	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b2a:	7bfa      	ldrb	r2, [r7, #15]
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	4413      	add	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	440b      	add	r3, r1
 8002b38:	3324      	adds	r3, #36	@ 0x24
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b3e:	7bfb      	ldrb	r3, [r7, #15]
 8002b40:	3301      	adds	r3, #1
 8002b42:	73fb      	strb	r3, [r7, #15]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	791b      	ldrb	r3, [r3, #4]
 8002b48:	7bfa      	ldrb	r2, [r7, #15]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d3af      	bcc.n	8002aae <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b4e:	2300      	movs	r3, #0
 8002b50:	73fb      	strb	r3, [r7, #15]
 8002b52:	e044      	b.n	8002bde <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b54:	7bfa      	ldrb	r2, [r7, #15]
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002b66:	2200      	movs	r2, #0
 8002b68:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b6a:	7bfa      	ldrb	r2, [r7, #15]
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	4413      	add	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	440b      	add	r3, r1
 8002b78:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002b7c:	7bfa      	ldrb	r2, [r7, #15]
 8002b7e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b80:	7bfa      	ldrb	r2, [r7, #15]
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	4613      	mov	r3, r2
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	4413      	add	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002b92:	2200      	movs	r2, #0
 8002b94:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b96:	7bfa      	ldrb	r2, [r7, #15]
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	440b      	add	r3, r1
 8002ba4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bac:	7bfa      	ldrb	r2, [r7, #15]
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	440b      	add	r3, r1
 8002bba:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bc2:	7bfa      	ldrb	r2, [r7, #15]
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	4413      	add	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	440b      	add	r3, r1
 8002bd0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	73fb      	strb	r3, [r7, #15]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	791b      	ldrb	r3, [r3, #4]
 8002be2:	7bfa      	ldrb	r2, [r7, #15]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d3b5      	bcc.n	8002b54 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6818      	ldr	r0, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	7c1a      	ldrb	r2, [r3, #16]
 8002bf0:	f88d 2000 	strb.w	r2, [sp]
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bf8:	f001 ffb2 	bl	8004b60 <USB_DevInit>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d005      	beq.n	8002c0e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2202      	movs	r2, #2
 8002c06:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e013      	b.n	8002c36 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	7b1b      	ldrb	r3, [r3, #12]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d102      	bne.n	8002c2a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 f80b 	bl	8002c40 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f002 f96d 	bl	8004f0e <USB_DevDisconnect>

  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
	...

08002c40 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002c6e:	4b05      	ldr	r3, [pc, #20]	@ (8002c84 <HAL_PCDEx_ActivateLPM+0x44>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3714      	adds	r7, #20
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	10000003 	.word	0x10000003

08002c88 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c8c:	4b05      	ldr	r3, [pc, #20]	@ (8002ca4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a04      	ldr	r2, [pc, #16]	@ (8002ca4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c96:	6013      	str	r3, [r2, #0]
}
 8002c98:	bf00      	nop
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	40007000 	.word	0x40007000

08002ca8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002cb2:	4b23      	ldr	r3, [pc, #140]	@ (8002d40 <HAL_PWREx_EnableOverDrive+0x98>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb6:	4a22      	ldr	r2, [pc, #136]	@ (8002d40 <HAL_PWREx_EnableOverDrive+0x98>)
 8002cb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cbe:	4b20      	ldr	r3, [pc, #128]	@ (8002d40 <HAL_PWREx_EnableOverDrive+0x98>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cc6:	603b      	str	r3, [r7, #0]
 8002cc8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002cca:	4b1e      	ldr	r3, [pc, #120]	@ (8002d44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a1d      	ldr	r2, [pc, #116]	@ (8002d44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cd4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cd6:	f7fe fa8f 	bl	80011f8 <HAL_GetTick>
 8002cda:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002cdc:	e009      	b.n	8002cf2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002cde:	f7fe fa8b 	bl	80011f8 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002cec:	d901      	bls.n	8002cf2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e022      	b.n	8002d38 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002cf2:	4b14      	ldr	r3, [pc, #80]	@ (8002d44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cfe:	d1ee      	bne.n	8002cde <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002d00:	4b10      	ldr	r3, [pc, #64]	@ (8002d44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a0f      	ldr	r2, [pc, #60]	@ (8002d44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d0a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d0c:	f7fe fa74 	bl	80011f8 <HAL_GetTick>
 8002d10:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d12:	e009      	b.n	8002d28 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d14:	f7fe fa70 	bl	80011f8 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d22:	d901      	bls.n	8002d28 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e007      	b.n	8002d38 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d28:	4b06      	ldr	r3, [pc, #24]	@ (8002d44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d34:	d1ee      	bne.n	8002d14 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40023800 	.word	0x40023800
 8002d44:	40007000 	.word	0x40007000

08002d48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002d50:	2300      	movs	r3, #0
 8002d52:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e29b      	b.n	8003296 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 8087 	beq.w	8002e7a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d6c:	4b96      	ldr	r3, [pc, #600]	@ (8002fc8 <HAL_RCC_OscConfig+0x280>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 030c 	and.w	r3, r3, #12
 8002d74:	2b04      	cmp	r3, #4
 8002d76:	d00c      	beq.n	8002d92 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d78:	4b93      	ldr	r3, [pc, #588]	@ (8002fc8 <HAL_RCC_OscConfig+0x280>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f003 030c 	and.w	r3, r3, #12
 8002d80:	2b08      	cmp	r3, #8
 8002d82:	d112      	bne.n	8002daa <HAL_RCC_OscConfig+0x62>
 8002d84:	4b90      	ldr	r3, [pc, #576]	@ (8002fc8 <HAL_RCC_OscConfig+0x280>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d90:	d10b      	bne.n	8002daa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d92:	4b8d      	ldr	r3, [pc, #564]	@ (8002fc8 <HAL_RCC_OscConfig+0x280>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d06c      	beq.n	8002e78 <HAL_RCC_OscConfig+0x130>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d168      	bne.n	8002e78 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e275      	b.n	8003296 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002db2:	d106      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x7a>
 8002db4:	4b84      	ldr	r3, [pc, #528]	@ (8002fc8 <HAL_RCC_OscConfig+0x280>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a83      	ldr	r2, [pc, #524]	@ (8002fc8 <HAL_RCC_OscConfig+0x280>)
 8002dba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dbe:	6013      	str	r3, [r2, #0]
 8002dc0:	e02e      	b.n	8002e20 <HAL_RCC_OscConfig+0xd8>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10c      	bne.n	8002de4 <HAL_RCC_OscConfig+0x9c>
 8002dca:	4b7f      	ldr	r3, [pc, #508]	@ (8002fc8 <HAL_RCC_OscConfig+0x280>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a7e      	ldr	r2, [pc, #504]	@ (8002fc8 <HAL_RCC_OscConfig+0x280>)
 8002dd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	4b7c      	ldr	r3, [pc, #496]	@ (8002fc8 <HAL_RCC_OscConfig+0x280>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a7b      	ldr	r2, [pc, #492]	@ (8002fc8 <HAL_RCC_OscConfig+0x280>)
 8002ddc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	e01d      	b.n	8002e20 <HAL_RCC_OscConfig+0xd8>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002dec:	d10c      	bne.n	8002e08 <HAL_RCC_OscConfig+0xc0>
 8002dee:	4b76      	ldr	r3, [pc, #472]	@ (8002fc8 <HAL_RCC_OscConfig+0x280>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a75      	ldr	r2, [pc, #468]	@ (8002fc8 <HAL_RCC_OscConfig+0x280>)
 8002df4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	4b73      	ldr	r3, [pc, #460]	@ (8002fc8 <HAL_RCC_OscConfig+0x280>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a72      	ldr	r2, [pc, #456]	@ (8002fc8 <HAL_RCC_OscConfig+0x280>)
 8002e00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	e00b      	b.n	8002e20 <HAL_RCC_OscConfig+0xd8>
 8002e08:	4b6f      	ldr	r3, [pc, #444]	@ (8002fc8 <HAL_RCC_OscConfig+0x280>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a6e      	ldr	r2, [pc, #440]	@ (8002fc8 <HAL_RCC_OscConfig+0x280>)
 8002e0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e12:	6013      	str	r3, [r2, #0]
 8002e14:	4b6c      	ldr	r3, [pc, #432]	@ (8002fc8 <HAL_RCC_OscConfig+0x280>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a6b      	ldr	r2, [pc, #428]	@ (8002fc8 <HAL_RCC_OscConfig+0x280>)
 8002e1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d013      	beq.n	8002e50 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e28:	f7fe f9e6 	bl	80011f8 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e30:	f7fe f9e2 	bl	80011f8 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b64      	cmp	r3, #100	@ 0x64
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e229      	b.n	8003296 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e42:	4b61      	ldr	r3, [pc, #388]	@ (8002fc8 <HAL_RCC_OscConfig+0x280>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0f0      	beq.n	8002e30 <HAL_RCC_OscConfig+0xe8>
 8002e4e:	e014      	b.n	8002e7a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e50:	f7fe f9d2 	bl	80011f8 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e58:	f7fe f9ce 	bl	80011f8 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b64      	cmp	r3, #100	@ 0x64
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e215      	b.n	8003296 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e6a:	4b57      	ldr	r3, [pc, #348]	@ (8002fc8 <HAL_RCC_OscConfig+0x280>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f0      	bne.n	8002e58 <HAL_RCC_OscConfig+0x110>
 8002e76:	e000      	b.n	8002e7a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d069      	beq.n	8002f5a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e86:	4b50      	ldr	r3, [pc, #320]	@ (8002fc8 <HAL_RCC_OscConfig+0x280>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 030c 	and.w	r3, r3, #12
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00b      	beq.n	8002eaa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e92:	4b4d      	ldr	r3, [pc, #308]	@ (8002fc8 <HAL_RCC_OscConfig+0x280>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 030c 	and.w	r3, r3, #12
 8002e9a:	2b08      	cmp	r3, #8
 8002e9c:	d11c      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x190>
 8002e9e:	4b4a      	ldr	r3, [pc, #296]	@ (8002fc8 <HAL_RCC_OscConfig+0x280>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d116      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eaa:	4b47      	ldr	r3, [pc, #284]	@ (8002fc8 <HAL_RCC_OscConfig+0x280>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d005      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x17a>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d001      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e1e9      	b.n	8003296 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec2:	4b41      	ldr	r3, [pc, #260]	@ (8002fc8 <HAL_RCC_OscConfig+0x280>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	493d      	ldr	r1, [pc, #244]	@ (8002fc8 <HAL_RCC_OscConfig+0x280>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ed6:	e040      	b.n	8002f5a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d023      	beq.n	8002f28 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ee0:	4b39      	ldr	r3, [pc, #228]	@ (8002fc8 <HAL_RCC_OscConfig+0x280>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a38      	ldr	r2, [pc, #224]	@ (8002fc8 <HAL_RCC_OscConfig+0x280>)
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eec:	f7fe f984 	bl	80011f8 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ef4:	f7fe f980 	bl	80011f8 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e1c7      	b.n	8003296 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f06:	4b30      	ldr	r3, [pc, #192]	@ (8002fc8 <HAL_RCC_OscConfig+0x280>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0f0      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f12:	4b2d      	ldr	r3, [pc, #180]	@ (8002fc8 <HAL_RCC_OscConfig+0x280>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	4929      	ldr	r1, [pc, #164]	@ (8002fc8 <HAL_RCC_OscConfig+0x280>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	600b      	str	r3, [r1, #0]
 8002f26:	e018      	b.n	8002f5a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f28:	4b27      	ldr	r3, [pc, #156]	@ (8002fc8 <HAL_RCC_OscConfig+0x280>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a26      	ldr	r2, [pc, #152]	@ (8002fc8 <HAL_RCC_OscConfig+0x280>)
 8002f2e:	f023 0301 	bic.w	r3, r3, #1
 8002f32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f34:	f7fe f960 	bl	80011f8 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f3c:	f7fe f95c 	bl	80011f8 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e1a3      	b.n	8003296 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8002fc8 <HAL_RCC_OscConfig+0x280>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f0      	bne.n	8002f3c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0308 	and.w	r3, r3, #8
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d038      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d019      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f6e:	4b16      	ldr	r3, [pc, #88]	@ (8002fc8 <HAL_RCC_OscConfig+0x280>)
 8002f70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f72:	4a15      	ldr	r2, [pc, #84]	@ (8002fc8 <HAL_RCC_OscConfig+0x280>)
 8002f74:	f043 0301 	orr.w	r3, r3, #1
 8002f78:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f7a:	f7fe f93d 	bl	80011f8 <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f82:	f7fe f939 	bl	80011f8 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e180      	b.n	8003296 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f94:	4b0c      	ldr	r3, [pc, #48]	@ (8002fc8 <HAL_RCC_OscConfig+0x280>)
 8002f96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0f0      	beq.n	8002f82 <HAL_RCC_OscConfig+0x23a>
 8002fa0:	e01a      	b.n	8002fd8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fa2:	4b09      	ldr	r3, [pc, #36]	@ (8002fc8 <HAL_RCC_OscConfig+0x280>)
 8002fa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fa6:	4a08      	ldr	r2, [pc, #32]	@ (8002fc8 <HAL_RCC_OscConfig+0x280>)
 8002fa8:	f023 0301 	bic.w	r3, r3, #1
 8002fac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fae:	f7fe f923 	bl	80011f8 <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb4:	e00a      	b.n	8002fcc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fb6:	f7fe f91f 	bl	80011f8 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d903      	bls.n	8002fcc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e166      	b.n	8003296 <HAL_RCC_OscConfig+0x54e>
 8002fc8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fcc:	4b92      	ldr	r3, [pc, #584]	@ (8003218 <HAL_RCC_OscConfig+0x4d0>)
 8002fce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1ee      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f000 80a4 	beq.w	800312e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fe6:	4b8c      	ldr	r3, [pc, #560]	@ (8003218 <HAL_RCC_OscConfig+0x4d0>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10d      	bne.n	800300e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ff2:	4b89      	ldr	r3, [pc, #548]	@ (8003218 <HAL_RCC_OscConfig+0x4d0>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff6:	4a88      	ldr	r2, [pc, #544]	@ (8003218 <HAL_RCC_OscConfig+0x4d0>)
 8002ff8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ffc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ffe:	4b86      	ldr	r3, [pc, #536]	@ (8003218 <HAL_RCC_OscConfig+0x4d0>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003002:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003006:	60bb      	str	r3, [r7, #8]
 8003008:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800300a:	2301      	movs	r3, #1
 800300c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800300e:	4b83      	ldr	r3, [pc, #524]	@ (800321c <HAL_RCC_OscConfig+0x4d4>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003016:	2b00      	cmp	r3, #0
 8003018:	d118      	bne.n	800304c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800301a:	4b80      	ldr	r3, [pc, #512]	@ (800321c <HAL_RCC_OscConfig+0x4d4>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a7f      	ldr	r2, [pc, #508]	@ (800321c <HAL_RCC_OscConfig+0x4d4>)
 8003020:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003024:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003026:	f7fe f8e7 	bl	80011f8 <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800302c:	e008      	b.n	8003040 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800302e:	f7fe f8e3 	bl	80011f8 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b64      	cmp	r3, #100	@ 0x64
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e12a      	b.n	8003296 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003040:	4b76      	ldr	r3, [pc, #472]	@ (800321c <HAL_RCC_OscConfig+0x4d4>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0f0      	beq.n	800302e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d106      	bne.n	8003062 <HAL_RCC_OscConfig+0x31a>
 8003054:	4b70      	ldr	r3, [pc, #448]	@ (8003218 <HAL_RCC_OscConfig+0x4d0>)
 8003056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003058:	4a6f      	ldr	r2, [pc, #444]	@ (8003218 <HAL_RCC_OscConfig+0x4d0>)
 800305a:	f043 0301 	orr.w	r3, r3, #1
 800305e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003060:	e02d      	b.n	80030be <HAL_RCC_OscConfig+0x376>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10c      	bne.n	8003084 <HAL_RCC_OscConfig+0x33c>
 800306a:	4b6b      	ldr	r3, [pc, #428]	@ (8003218 <HAL_RCC_OscConfig+0x4d0>)
 800306c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800306e:	4a6a      	ldr	r2, [pc, #424]	@ (8003218 <HAL_RCC_OscConfig+0x4d0>)
 8003070:	f023 0301 	bic.w	r3, r3, #1
 8003074:	6713      	str	r3, [r2, #112]	@ 0x70
 8003076:	4b68      	ldr	r3, [pc, #416]	@ (8003218 <HAL_RCC_OscConfig+0x4d0>)
 8003078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800307a:	4a67      	ldr	r2, [pc, #412]	@ (8003218 <HAL_RCC_OscConfig+0x4d0>)
 800307c:	f023 0304 	bic.w	r3, r3, #4
 8003080:	6713      	str	r3, [r2, #112]	@ 0x70
 8003082:	e01c      	b.n	80030be <HAL_RCC_OscConfig+0x376>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	2b05      	cmp	r3, #5
 800308a:	d10c      	bne.n	80030a6 <HAL_RCC_OscConfig+0x35e>
 800308c:	4b62      	ldr	r3, [pc, #392]	@ (8003218 <HAL_RCC_OscConfig+0x4d0>)
 800308e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003090:	4a61      	ldr	r2, [pc, #388]	@ (8003218 <HAL_RCC_OscConfig+0x4d0>)
 8003092:	f043 0304 	orr.w	r3, r3, #4
 8003096:	6713      	str	r3, [r2, #112]	@ 0x70
 8003098:	4b5f      	ldr	r3, [pc, #380]	@ (8003218 <HAL_RCC_OscConfig+0x4d0>)
 800309a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800309c:	4a5e      	ldr	r2, [pc, #376]	@ (8003218 <HAL_RCC_OscConfig+0x4d0>)
 800309e:	f043 0301 	orr.w	r3, r3, #1
 80030a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80030a4:	e00b      	b.n	80030be <HAL_RCC_OscConfig+0x376>
 80030a6:	4b5c      	ldr	r3, [pc, #368]	@ (8003218 <HAL_RCC_OscConfig+0x4d0>)
 80030a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030aa:	4a5b      	ldr	r2, [pc, #364]	@ (8003218 <HAL_RCC_OscConfig+0x4d0>)
 80030ac:	f023 0301 	bic.w	r3, r3, #1
 80030b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80030b2:	4b59      	ldr	r3, [pc, #356]	@ (8003218 <HAL_RCC_OscConfig+0x4d0>)
 80030b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b6:	4a58      	ldr	r2, [pc, #352]	@ (8003218 <HAL_RCC_OscConfig+0x4d0>)
 80030b8:	f023 0304 	bic.w	r3, r3, #4
 80030bc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d015      	beq.n	80030f2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c6:	f7fe f897 	bl	80011f8 <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030cc:	e00a      	b.n	80030e4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ce:	f7fe f893 	bl	80011f8 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030dc:	4293      	cmp	r3, r2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e0d8      	b.n	8003296 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e4:	4b4c      	ldr	r3, [pc, #304]	@ (8003218 <HAL_RCC_OscConfig+0x4d0>)
 80030e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0ee      	beq.n	80030ce <HAL_RCC_OscConfig+0x386>
 80030f0:	e014      	b.n	800311c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f2:	f7fe f881 	bl	80011f8 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030f8:	e00a      	b.n	8003110 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030fa:	f7fe f87d 	bl	80011f8 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003108:	4293      	cmp	r3, r2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e0c2      	b.n	8003296 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003110:	4b41      	ldr	r3, [pc, #260]	@ (8003218 <HAL_RCC_OscConfig+0x4d0>)
 8003112:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1ee      	bne.n	80030fa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800311c:	7dfb      	ldrb	r3, [r7, #23]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d105      	bne.n	800312e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003122:	4b3d      	ldr	r3, [pc, #244]	@ (8003218 <HAL_RCC_OscConfig+0x4d0>)
 8003124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003126:	4a3c      	ldr	r2, [pc, #240]	@ (8003218 <HAL_RCC_OscConfig+0x4d0>)
 8003128:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800312c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 80ae 	beq.w	8003294 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003138:	4b37      	ldr	r3, [pc, #220]	@ (8003218 <HAL_RCC_OscConfig+0x4d0>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f003 030c 	and.w	r3, r3, #12
 8003140:	2b08      	cmp	r3, #8
 8003142:	d06d      	beq.n	8003220 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	2b02      	cmp	r3, #2
 800314a:	d14b      	bne.n	80031e4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800314c:	4b32      	ldr	r3, [pc, #200]	@ (8003218 <HAL_RCC_OscConfig+0x4d0>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a31      	ldr	r2, [pc, #196]	@ (8003218 <HAL_RCC_OscConfig+0x4d0>)
 8003152:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003156:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003158:	f7fe f84e 	bl	80011f8 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003160:	f7fe f84a 	bl	80011f8 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e091      	b.n	8003296 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003172:	4b29      	ldr	r3, [pc, #164]	@ (8003218 <HAL_RCC_OscConfig+0x4d0>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1f0      	bne.n	8003160 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69da      	ldr	r2, [r3, #28]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318c:	019b      	lsls	r3, r3, #6
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003194:	085b      	lsrs	r3, r3, #1
 8003196:	3b01      	subs	r3, #1
 8003198:	041b      	lsls	r3, r3, #16
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a0:	061b      	lsls	r3, r3, #24
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a8:	071b      	lsls	r3, r3, #28
 80031aa:	491b      	ldr	r1, [pc, #108]	@ (8003218 <HAL_RCC_OscConfig+0x4d0>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031b0:	4b19      	ldr	r3, [pc, #100]	@ (8003218 <HAL_RCC_OscConfig+0x4d0>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a18      	ldr	r2, [pc, #96]	@ (8003218 <HAL_RCC_OscConfig+0x4d0>)
 80031b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031bc:	f7fe f81c 	bl	80011f8 <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031c4:	f7fe f818 	bl	80011f8 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e05f      	b.n	8003296 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d6:	4b10      	ldr	r3, [pc, #64]	@ (8003218 <HAL_RCC_OscConfig+0x4d0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d0f0      	beq.n	80031c4 <HAL_RCC_OscConfig+0x47c>
 80031e2:	e057      	b.n	8003294 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003218 <HAL_RCC_OscConfig+0x4d0>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a0b      	ldr	r2, [pc, #44]	@ (8003218 <HAL_RCC_OscConfig+0x4d0>)
 80031ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f0:	f7fe f802 	bl	80011f8 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f8:	f7fd fffe 	bl	80011f8 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e045      	b.n	8003296 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800320a:	4b03      	ldr	r3, [pc, #12]	@ (8003218 <HAL_RCC_OscConfig+0x4d0>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f0      	bne.n	80031f8 <HAL_RCC_OscConfig+0x4b0>
 8003216:	e03d      	b.n	8003294 <HAL_RCC_OscConfig+0x54c>
 8003218:	40023800 	.word	0x40023800
 800321c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003220:	4b1f      	ldr	r3, [pc, #124]	@ (80032a0 <HAL_RCC_OscConfig+0x558>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d030      	beq.n	8003290 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003238:	429a      	cmp	r2, r3
 800323a:	d129      	bne.n	8003290 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003246:	429a      	cmp	r2, r3
 8003248:	d122      	bne.n	8003290 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003250:	4013      	ands	r3, r2
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003256:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003258:	4293      	cmp	r3, r2
 800325a:	d119      	bne.n	8003290 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003266:	085b      	lsrs	r3, r3, #1
 8003268:	3b01      	subs	r3, #1
 800326a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800326c:	429a      	cmp	r2, r3
 800326e:	d10f      	bne.n	8003290 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800327a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800327c:	429a      	cmp	r2, r3
 800327e:	d107      	bne.n	8003290 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800328c:	429a      	cmp	r2, r3
 800328e:	d001      	beq.n	8003294 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e000      	b.n	8003296 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3718      	adds	r7, #24
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40023800 	.word	0x40023800

080032a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80032ae:	2300      	movs	r3, #0
 80032b0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e0d0      	b.n	800345e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032bc:	4b6a      	ldr	r3, [pc, #424]	@ (8003468 <HAL_RCC_ClockConfig+0x1c4>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 030f 	and.w	r3, r3, #15
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d910      	bls.n	80032ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ca:	4b67      	ldr	r3, [pc, #412]	@ (8003468 <HAL_RCC_ClockConfig+0x1c4>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f023 020f 	bic.w	r2, r3, #15
 80032d2:	4965      	ldr	r1, [pc, #404]	@ (8003468 <HAL_RCC_ClockConfig+0x1c4>)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032da:	4b63      	ldr	r3, [pc, #396]	@ (8003468 <HAL_RCC_ClockConfig+0x1c4>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d001      	beq.n	80032ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e0b8      	b.n	800345e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d020      	beq.n	800333a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b00      	cmp	r3, #0
 8003302:	d005      	beq.n	8003310 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003304:	4b59      	ldr	r3, [pc, #356]	@ (800346c <HAL_RCC_ClockConfig+0x1c8>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	4a58      	ldr	r2, [pc, #352]	@ (800346c <HAL_RCC_ClockConfig+0x1c8>)
 800330a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800330e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0308 	and.w	r3, r3, #8
 8003318:	2b00      	cmp	r3, #0
 800331a:	d005      	beq.n	8003328 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800331c:	4b53      	ldr	r3, [pc, #332]	@ (800346c <HAL_RCC_ClockConfig+0x1c8>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	4a52      	ldr	r2, [pc, #328]	@ (800346c <HAL_RCC_ClockConfig+0x1c8>)
 8003322:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003326:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003328:	4b50      	ldr	r3, [pc, #320]	@ (800346c <HAL_RCC_ClockConfig+0x1c8>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	494d      	ldr	r1, [pc, #308]	@ (800346c <HAL_RCC_ClockConfig+0x1c8>)
 8003336:	4313      	orrs	r3, r2
 8003338:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d040      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d107      	bne.n	800335e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800334e:	4b47      	ldr	r3, [pc, #284]	@ (800346c <HAL_RCC_ClockConfig+0x1c8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d115      	bne.n	8003386 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e07f      	b.n	800345e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	2b02      	cmp	r3, #2
 8003364:	d107      	bne.n	8003376 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003366:	4b41      	ldr	r3, [pc, #260]	@ (800346c <HAL_RCC_ClockConfig+0x1c8>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d109      	bne.n	8003386 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e073      	b.n	800345e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003376:	4b3d      	ldr	r3, [pc, #244]	@ (800346c <HAL_RCC_ClockConfig+0x1c8>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e06b      	b.n	800345e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003386:	4b39      	ldr	r3, [pc, #228]	@ (800346c <HAL_RCC_ClockConfig+0x1c8>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f023 0203 	bic.w	r2, r3, #3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	4936      	ldr	r1, [pc, #216]	@ (800346c <HAL_RCC_ClockConfig+0x1c8>)
 8003394:	4313      	orrs	r3, r2
 8003396:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003398:	f7fd ff2e 	bl	80011f8 <HAL_GetTick>
 800339c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800339e:	e00a      	b.n	80033b6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a0:	f7fd ff2a 	bl	80011f8 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e053      	b.n	800345e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033b6:	4b2d      	ldr	r3, [pc, #180]	@ (800346c <HAL_RCC_ClockConfig+0x1c8>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 020c 	and.w	r2, r3, #12
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d1eb      	bne.n	80033a0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033c8:	4b27      	ldr	r3, [pc, #156]	@ (8003468 <HAL_RCC_ClockConfig+0x1c4>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 030f 	and.w	r3, r3, #15
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d210      	bcs.n	80033f8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d6:	4b24      	ldr	r3, [pc, #144]	@ (8003468 <HAL_RCC_ClockConfig+0x1c4>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f023 020f 	bic.w	r2, r3, #15
 80033de:	4922      	ldr	r1, [pc, #136]	@ (8003468 <HAL_RCC_ClockConfig+0x1c4>)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e6:	4b20      	ldr	r3, [pc, #128]	@ (8003468 <HAL_RCC_ClockConfig+0x1c4>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d001      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e032      	b.n	800345e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b00      	cmp	r3, #0
 8003402:	d008      	beq.n	8003416 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003404:	4b19      	ldr	r3, [pc, #100]	@ (800346c <HAL_RCC_ClockConfig+0x1c8>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	4916      	ldr	r1, [pc, #88]	@ (800346c <HAL_RCC_ClockConfig+0x1c8>)
 8003412:	4313      	orrs	r3, r2
 8003414:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0308 	and.w	r3, r3, #8
 800341e:	2b00      	cmp	r3, #0
 8003420:	d009      	beq.n	8003436 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003422:	4b12      	ldr	r3, [pc, #72]	@ (800346c <HAL_RCC_ClockConfig+0x1c8>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	490e      	ldr	r1, [pc, #56]	@ (800346c <HAL_RCC_ClockConfig+0x1c8>)
 8003432:	4313      	orrs	r3, r2
 8003434:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003436:	f000 f821 	bl	800347c <HAL_RCC_GetSysClockFreq>
 800343a:	4602      	mov	r2, r0
 800343c:	4b0b      	ldr	r3, [pc, #44]	@ (800346c <HAL_RCC_ClockConfig+0x1c8>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	091b      	lsrs	r3, r3, #4
 8003442:	f003 030f 	and.w	r3, r3, #15
 8003446:	490a      	ldr	r1, [pc, #40]	@ (8003470 <HAL_RCC_ClockConfig+0x1cc>)
 8003448:	5ccb      	ldrb	r3, [r1, r3]
 800344a:	fa22 f303 	lsr.w	r3, r2, r3
 800344e:	4a09      	ldr	r2, [pc, #36]	@ (8003474 <HAL_RCC_ClockConfig+0x1d0>)
 8003450:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003452:	4b09      	ldr	r3, [pc, #36]	@ (8003478 <HAL_RCC_ClockConfig+0x1d4>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f7fd fe8a 	bl	8001170 <HAL_InitTick>

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	40023c00 	.word	0x40023c00
 800346c:	40023800 	.word	0x40023800
 8003470:	08014f08 	.word	0x08014f08
 8003474:	20000000 	.word	0x20000000
 8003478:	20000004 	.word	0x20000004

0800347c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800347c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003480:	b094      	sub	sp, #80	@ 0x50
 8003482:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003484:	2300      	movs	r3, #0
 8003486:	647b      	str	r3, [r7, #68]	@ 0x44
 8003488:	2300      	movs	r3, #0
 800348a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800348c:	2300      	movs	r3, #0
 800348e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003490:	2300      	movs	r3, #0
 8003492:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003494:	4b79      	ldr	r3, [pc, #484]	@ (800367c <HAL_RCC_GetSysClockFreq+0x200>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 030c 	and.w	r3, r3, #12
 800349c:	2b08      	cmp	r3, #8
 800349e:	d00d      	beq.n	80034bc <HAL_RCC_GetSysClockFreq+0x40>
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	f200 80e1 	bhi.w	8003668 <HAL_RCC_GetSysClockFreq+0x1ec>
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d002      	beq.n	80034b0 <HAL_RCC_GetSysClockFreq+0x34>
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	d003      	beq.n	80034b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80034ae:	e0db      	b.n	8003668 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034b0:	4b73      	ldr	r3, [pc, #460]	@ (8003680 <HAL_RCC_GetSysClockFreq+0x204>)
 80034b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80034b4:	e0db      	b.n	800366e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034b6:	4b73      	ldr	r3, [pc, #460]	@ (8003684 <HAL_RCC_GetSysClockFreq+0x208>)
 80034b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80034ba:	e0d8      	b.n	800366e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034bc:	4b6f      	ldr	r3, [pc, #444]	@ (800367c <HAL_RCC_GetSysClockFreq+0x200>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034c4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80034c6:	4b6d      	ldr	r3, [pc, #436]	@ (800367c <HAL_RCC_GetSysClockFreq+0x200>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d063      	beq.n	800359a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034d2:	4b6a      	ldr	r3, [pc, #424]	@ (800367c <HAL_RCC_GetSysClockFreq+0x200>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	099b      	lsrs	r3, r3, #6
 80034d8:	2200      	movs	r2, #0
 80034da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80034dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80034de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80034e6:	2300      	movs	r3, #0
 80034e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80034ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80034ee:	4622      	mov	r2, r4
 80034f0:	462b      	mov	r3, r5
 80034f2:	f04f 0000 	mov.w	r0, #0
 80034f6:	f04f 0100 	mov.w	r1, #0
 80034fa:	0159      	lsls	r1, r3, #5
 80034fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003500:	0150      	lsls	r0, r2, #5
 8003502:	4602      	mov	r2, r0
 8003504:	460b      	mov	r3, r1
 8003506:	4621      	mov	r1, r4
 8003508:	1a51      	subs	r1, r2, r1
 800350a:	6139      	str	r1, [r7, #16]
 800350c:	4629      	mov	r1, r5
 800350e:	eb63 0301 	sbc.w	r3, r3, r1
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	f04f 0300 	mov.w	r3, #0
 800351c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003520:	4659      	mov	r1, fp
 8003522:	018b      	lsls	r3, r1, #6
 8003524:	4651      	mov	r1, sl
 8003526:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800352a:	4651      	mov	r1, sl
 800352c:	018a      	lsls	r2, r1, #6
 800352e:	4651      	mov	r1, sl
 8003530:	ebb2 0801 	subs.w	r8, r2, r1
 8003534:	4659      	mov	r1, fp
 8003536:	eb63 0901 	sbc.w	r9, r3, r1
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	f04f 0300 	mov.w	r3, #0
 8003542:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003546:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800354a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800354e:	4690      	mov	r8, r2
 8003550:	4699      	mov	r9, r3
 8003552:	4623      	mov	r3, r4
 8003554:	eb18 0303 	adds.w	r3, r8, r3
 8003558:	60bb      	str	r3, [r7, #8]
 800355a:	462b      	mov	r3, r5
 800355c:	eb49 0303 	adc.w	r3, r9, r3
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	f04f 0200 	mov.w	r2, #0
 8003566:	f04f 0300 	mov.w	r3, #0
 800356a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800356e:	4629      	mov	r1, r5
 8003570:	024b      	lsls	r3, r1, #9
 8003572:	4621      	mov	r1, r4
 8003574:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003578:	4621      	mov	r1, r4
 800357a:	024a      	lsls	r2, r1, #9
 800357c:	4610      	mov	r0, r2
 800357e:	4619      	mov	r1, r3
 8003580:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003582:	2200      	movs	r2, #0
 8003584:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003586:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003588:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800358c:	f7fc fea8 	bl	80002e0 <__aeabi_uldivmod>
 8003590:	4602      	mov	r2, r0
 8003592:	460b      	mov	r3, r1
 8003594:	4613      	mov	r3, r2
 8003596:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003598:	e058      	b.n	800364c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800359a:	4b38      	ldr	r3, [pc, #224]	@ (800367c <HAL_RCC_GetSysClockFreq+0x200>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	099b      	lsrs	r3, r3, #6
 80035a0:	2200      	movs	r2, #0
 80035a2:	4618      	mov	r0, r3
 80035a4:	4611      	mov	r1, r2
 80035a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035aa:	623b      	str	r3, [r7, #32]
 80035ac:	2300      	movs	r3, #0
 80035ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80035b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035b4:	4642      	mov	r2, r8
 80035b6:	464b      	mov	r3, r9
 80035b8:	f04f 0000 	mov.w	r0, #0
 80035bc:	f04f 0100 	mov.w	r1, #0
 80035c0:	0159      	lsls	r1, r3, #5
 80035c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035c6:	0150      	lsls	r0, r2, #5
 80035c8:	4602      	mov	r2, r0
 80035ca:	460b      	mov	r3, r1
 80035cc:	4641      	mov	r1, r8
 80035ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80035d2:	4649      	mov	r1, r9
 80035d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80035d8:	f04f 0200 	mov.w	r2, #0
 80035dc:	f04f 0300 	mov.w	r3, #0
 80035e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035ec:	ebb2 040a 	subs.w	r4, r2, sl
 80035f0:	eb63 050b 	sbc.w	r5, r3, fp
 80035f4:	f04f 0200 	mov.w	r2, #0
 80035f8:	f04f 0300 	mov.w	r3, #0
 80035fc:	00eb      	lsls	r3, r5, #3
 80035fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003602:	00e2      	lsls	r2, r4, #3
 8003604:	4614      	mov	r4, r2
 8003606:	461d      	mov	r5, r3
 8003608:	4643      	mov	r3, r8
 800360a:	18e3      	adds	r3, r4, r3
 800360c:	603b      	str	r3, [r7, #0]
 800360e:	464b      	mov	r3, r9
 8003610:	eb45 0303 	adc.w	r3, r5, r3
 8003614:	607b      	str	r3, [r7, #4]
 8003616:	f04f 0200 	mov.w	r2, #0
 800361a:	f04f 0300 	mov.w	r3, #0
 800361e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003622:	4629      	mov	r1, r5
 8003624:	028b      	lsls	r3, r1, #10
 8003626:	4621      	mov	r1, r4
 8003628:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800362c:	4621      	mov	r1, r4
 800362e:	028a      	lsls	r2, r1, #10
 8003630:	4610      	mov	r0, r2
 8003632:	4619      	mov	r1, r3
 8003634:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003636:	2200      	movs	r2, #0
 8003638:	61bb      	str	r3, [r7, #24]
 800363a:	61fa      	str	r2, [r7, #28]
 800363c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003640:	f7fc fe4e 	bl	80002e0 <__aeabi_uldivmod>
 8003644:	4602      	mov	r2, r0
 8003646:	460b      	mov	r3, r1
 8003648:	4613      	mov	r3, r2
 800364a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800364c:	4b0b      	ldr	r3, [pc, #44]	@ (800367c <HAL_RCC_GetSysClockFreq+0x200>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	0c1b      	lsrs	r3, r3, #16
 8003652:	f003 0303 	and.w	r3, r3, #3
 8003656:	3301      	adds	r3, #1
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800365c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800365e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003660:	fbb2 f3f3 	udiv	r3, r2, r3
 8003664:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003666:	e002      	b.n	800366e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003668:	4b05      	ldr	r3, [pc, #20]	@ (8003680 <HAL_RCC_GetSysClockFreq+0x204>)
 800366a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800366c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800366e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003670:	4618      	mov	r0, r3
 8003672:	3750      	adds	r7, #80	@ 0x50
 8003674:	46bd      	mov	sp, r7
 8003676:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800367a:	bf00      	nop
 800367c:	40023800 	.word	0x40023800
 8003680:	00f42400 	.word	0x00f42400
 8003684:	007a1200 	.word	0x007a1200

08003688 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800368c:	4b03      	ldr	r3, [pc, #12]	@ (800369c <HAL_RCC_GetHCLKFreq+0x14>)
 800368e:	681b      	ldr	r3, [r3, #0]
}
 8003690:	4618      	mov	r0, r3
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	20000000 	.word	0x20000000

080036a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036a4:	f7ff fff0 	bl	8003688 <HAL_RCC_GetHCLKFreq>
 80036a8:	4602      	mov	r2, r0
 80036aa:	4b05      	ldr	r3, [pc, #20]	@ (80036c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	0a9b      	lsrs	r3, r3, #10
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	4903      	ldr	r1, [pc, #12]	@ (80036c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036b6:	5ccb      	ldrb	r3, [r1, r3]
 80036b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036bc:	4618      	mov	r0, r3
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40023800 	.word	0x40023800
 80036c4:	08014f18 	.word	0x08014f18

080036c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036cc:	f7ff ffdc 	bl	8003688 <HAL_RCC_GetHCLKFreq>
 80036d0:	4602      	mov	r2, r0
 80036d2:	4b05      	ldr	r3, [pc, #20]	@ (80036e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	0b5b      	lsrs	r3, r3, #13
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	4903      	ldr	r1, [pc, #12]	@ (80036ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80036de:	5ccb      	ldrb	r3, [r1, r3]
 80036e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	40023800 	.word	0x40023800
 80036ec:	08014f18 	.word	0x08014f18

080036f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b088      	sub	sp, #32
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80036f8:	2300      	movs	r3, #0
 80036fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80036fc:	2300      	movs	r3, #0
 80036fe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003700:	2300      	movs	r3, #0
 8003702:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003704:	2300      	movs	r3, #0
 8003706:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003708:	2300      	movs	r3, #0
 800370a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	2b00      	cmp	r3, #0
 8003716:	d012      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003718:	4b69      	ldr	r3, [pc, #420]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	4a68      	ldr	r2, [pc, #416]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800371e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003722:	6093      	str	r3, [r2, #8]
 8003724:	4b66      	ldr	r3, [pc, #408]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800372c:	4964      	ldr	r1, [pc, #400]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800372e:	4313      	orrs	r3, r2
 8003730:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800373a:	2301      	movs	r3, #1
 800373c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d017      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800374a:	4b5d      	ldr	r3, [pc, #372]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800374c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003750:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003758:	4959      	ldr	r1, [pc, #356]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800375a:	4313      	orrs	r3, r2
 800375c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003764:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003768:	d101      	bne.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800376a:	2301      	movs	r3, #1
 800376c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003776:	2301      	movs	r3, #1
 8003778:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d017      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003786:	4b4e      	ldr	r3, [pc, #312]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003788:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800378c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003794:	494a      	ldr	r1, [pc, #296]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003796:	4313      	orrs	r3, r2
 8003798:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037a4:	d101      	bne.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80037a6:	2301      	movs	r3, #1
 80037a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80037b2:	2301      	movs	r3, #1
 80037b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80037c2:	2301      	movs	r3, #1
 80037c4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0320 	and.w	r3, r3, #32
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 808b 	beq.w	80038ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80037d4:	4b3a      	ldr	r3, [pc, #232]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d8:	4a39      	ldr	r2, [pc, #228]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037de:	6413      	str	r3, [r2, #64]	@ 0x40
 80037e0:	4b37      	ldr	r3, [pc, #220]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037e8:	60bb      	str	r3, [r7, #8]
 80037ea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80037ec:	4b35      	ldr	r3, [pc, #212]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a34      	ldr	r2, [pc, #208]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037f8:	f7fd fcfe 	bl	80011f8 <HAL_GetTick>
 80037fc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80037fe:	e008      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003800:	f7fd fcfa 	bl	80011f8 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b64      	cmp	r3, #100	@ 0x64
 800380c:	d901      	bls.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e38f      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003812:	4b2c      	ldr	r3, [pc, #176]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800381a:	2b00      	cmp	r3, #0
 800381c:	d0f0      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800381e:	4b28      	ldr	r3, [pc, #160]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003822:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003826:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d035      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003832:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	429a      	cmp	r2, r3
 800383a:	d02e      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800383c:	4b20      	ldr	r3, [pc, #128]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800383e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003840:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003844:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003846:	4b1e      	ldr	r3, [pc, #120]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800384a:	4a1d      	ldr	r2, [pc, #116]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800384c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003850:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003852:	4b1b      	ldr	r3, [pc, #108]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003856:	4a1a      	ldr	r2, [pc, #104]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003858:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800385c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800385e:	4a18      	ldr	r2, [pc, #96]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003864:	4b16      	ldr	r3, [pc, #88]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b01      	cmp	r3, #1
 800386e:	d114      	bne.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003870:	f7fd fcc2 	bl	80011f8 <HAL_GetTick>
 8003874:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003876:	e00a      	b.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003878:	f7fd fcbe 	bl	80011f8 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003886:	4293      	cmp	r3, r2
 8003888:	d901      	bls.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e351      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800388e:	4b0c      	ldr	r3, [pc, #48]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0ee      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038a6:	d111      	bne.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80038a8:	4b05      	ldr	r3, [pc, #20]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80038b4:	4b04      	ldr	r3, [pc, #16]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80038b6:	400b      	ands	r3, r1
 80038b8:	4901      	ldr	r1, [pc, #4]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	608b      	str	r3, [r1, #8]
 80038be:	e00b      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80038c0:	40023800 	.word	0x40023800
 80038c4:	40007000 	.word	0x40007000
 80038c8:	0ffffcff 	.word	0x0ffffcff
 80038cc:	4bac      	ldr	r3, [pc, #688]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	4aab      	ldr	r2, [pc, #684]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038d2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80038d6:	6093      	str	r3, [r2, #8]
 80038d8:	4ba9      	ldr	r3, [pc, #676]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038da:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e4:	49a6      	ldr	r1, [pc, #664]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0310 	and.w	r3, r3, #16
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d010      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80038f6:	4ba2      	ldr	r3, [pc, #648]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038fc:	4aa0      	ldr	r2, [pc, #640]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003902:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003906:	4b9e      	ldr	r3, [pc, #632]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003908:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003910:	499b      	ldr	r1, [pc, #620]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003912:	4313      	orrs	r3, r2
 8003914:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00a      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003924:	4b96      	ldr	r3, [pc, #600]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800392a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003932:	4993      	ldr	r1, [pc, #588]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003934:	4313      	orrs	r3, r2
 8003936:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00a      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003946:	4b8e      	ldr	r3, [pc, #568]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800394c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003954:	498a      	ldr	r1, [pc, #552]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003956:	4313      	orrs	r3, r2
 8003958:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00a      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003968:	4b85      	ldr	r3, [pc, #532]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800396a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800396e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003976:	4982      	ldr	r1, [pc, #520]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003978:	4313      	orrs	r3, r2
 800397a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00a      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800398a:	4b7d      	ldr	r3, [pc, #500]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800398c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003990:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003998:	4979      	ldr	r1, [pc, #484]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800399a:	4313      	orrs	r3, r2
 800399c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00a      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039ac:	4b74      	ldr	r3, [pc, #464]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039b2:	f023 0203 	bic.w	r2, r3, #3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ba:	4971      	ldr	r1, [pc, #452]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00a      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039ce:	4b6c      	ldr	r3, [pc, #432]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039d4:	f023 020c 	bic.w	r2, r3, #12
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039dc:	4968      	ldr	r1, [pc, #416]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00a      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039f0:	4b63      	ldr	r3, [pc, #396]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039f6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039fe:	4960      	ldr	r1, [pc, #384]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00a      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a12:	4b5b      	ldr	r3, [pc, #364]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a18:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a20:	4957      	ldr	r1, [pc, #348]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00a      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a34:	4b52      	ldr	r3, [pc, #328]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a3a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a42:	494f      	ldr	r1, [pc, #316]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00a      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003a56:	4b4a      	ldr	r3, [pc, #296]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a5c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a64:	4946      	ldr	r1, [pc, #280]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00a      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003a78:	4b41      	ldr	r3, [pc, #260]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a7e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a86:	493e      	ldr	r1, [pc, #248]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00a      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003a9a:	4b39      	ldr	r3, [pc, #228]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aa0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aa8:	4935      	ldr	r1, [pc, #212]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00a      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003abc:	4b30      	ldr	r3, [pc, #192]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ac2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003aca:	492d      	ldr	r1, [pc, #180]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d011      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ade:	4b28      	ldr	r3, [pc, #160]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ae4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003aec:	4924      	ldr	r1, [pc, #144]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003af8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003afc:	d101      	bne.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003afe:	2301      	movs	r3, #1
 8003b00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0308 	and.w	r3, r3, #8
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00a      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b1e:	4b18      	ldr	r3, [pc, #96]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b24:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b2c:	4914      	ldr	r1, [pc, #80]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00b      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b40:	4b0f      	ldr	r3, [pc, #60]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b46:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b50:	490b      	ldr	r1, [pc, #44]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00f      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003b64:	4b06      	ldr	r3, [pc, #24]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b6a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b74:	4902      	ldr	r1, [pc, #8]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003b7c:	e002      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003b7e:	bf00      	nop
 8003b80:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00b      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b90:	4b8a      	ldr	r3, [pc, #552]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b96:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ba0:	4986      	ldr	r1, [pc, #536]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00b      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003bb4:	4b81      	ldr	r3, [pc, #516]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bba:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bc4:	497d      	ldr	r1, [pc, #500]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d006      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f000 80d6 	beq.w	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003be0:	4b76      	ldr	r3, [pc, #472]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a75      	ldr	r2, [pc, #468]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003be6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003bea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bec:	f7fd fb04 	bl	80011f8 <HAL_GetTick>
 8003bf0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003bf4:	f7fd fb00 	bl	80011f8 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b64      	cmp	r3, #100	@ 0x64
 8003c00:	d901      	bls.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e195      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c06:	4b6d      	ldr	r3, [pc, #436]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1f0      	bne.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d021      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d11d      	bne.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c26:	4b65      	ldr	r3, [pc, #404]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c2c:	0c1b      	lsrs	r3, r3, #16
 8003c2e:	f003 0303 	and.w	r3, r3, #3
 8003c32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c34:	4b61      	ldr	r3, [pc, #388]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c3a:	0e1b      	lsrs	r3, r3, #24
 8003c3c:	f003 030f 	and.w	r3, r3, #15
 8003c40:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	019a      	lsls	r2, r3, #6
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	041b      	lsls	r3, r3, #16
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	061b      	lsls	r3, r3, #24
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	071b      	lsls	r3, r3, #28
 8003c5a:	4958      	ldr	r1, [pc, #352]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d004      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c76:	d00a      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d02e      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c8c:	d129      	bne.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c8e:	4b4b      	ldr	r3, [pc, #300]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c94:	0c1b      	lsrs	r3, r3, #16
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c9c:	4b47      	ldr	r3, [pc, #284]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ca2:	0f1b      	lsrs	r3, r3, #28
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	019a      	lsls	r2, r3, #6
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	041b      	lsls	r3, r3, #16
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	061b      	lsls	r3, r3, #24
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	071b      	lsls	r3, r3, #28
 8003cc2:	493e      	ldr	r1, [pc, #248]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003cca:	4b3c      	ldr	r3, [pc, #240]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cd0:	f023 021f 	bic.w	r2, r3, #31
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	4938      	ldr	r1, [pc, #224]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d01d      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003cee:	4b33      	ldr	r3, [pc, #204]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cf4:	0e1b      	lsrs	r3, r3, #24
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003cfc:	4b2f      	ldr	r3, [pc, #188]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d02:	0f1b      	lsrs	r3, r3, #28
 8003d04:	f003 0307 	and.w	r3, r3, #7
 8003d08:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	019a      	lsls	r2, r3, #6
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	041b      	lsls	r3, r3, #16
 8003d16:	431a      	orrs	r2, r3
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	061b      	lsls	r3, r3, #24
 8003d1c:	431a      	orrs	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	071b      	lsls	r3, r3, #28
 8003d22:	4926      	ldr	r1, [pc, #152]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d011      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	019a      	lsls	r2, r3, #6
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	041b      	lsls	r3, r3, #16
 8003d42:	431a      	orrs	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	061b      	lsls	r3, r3, #24
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	071b      	lsls	r3, r3, #28
 8003d52:	491a      	ldr	r1, [pc, #104]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d5a:	4b18      	ldr	r3, [pc, #96]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a17      	ldr	r2, [pc, #92]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d60:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003d64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d66:	f7fd fa47 	bl	80011f8 <HAL_GetTick>
 8003d6a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d6c:	e008      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d6e:	f7fd fa43 	bl	80011f8 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b64      	cmp	r3, #100	@ 0x64
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e0d8      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d80:	4b0e      	ldr	r3, [pc, #56]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0f0      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	f040 80ce 	bne.w	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d94:	4b09      	ldr	r3, [pc, #36]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a08      	ldr	r2, [pc, #32]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003da0:	f7fd fa2a 	bl	80011f8 <HAL_GetTick>
 8003da4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003da6:	e00b      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003da8:	f7fd fa26 	bl	80011f8 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b64      	cmp	r3, #100	@ 0x64
 8003db4:	d904      	bls.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e0bb      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003dba:	bf00      	nop
 8003dbc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003dc0:	4b5e      	ldr	r3, [pc, #376]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003dc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dcc:	d0ec      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d009      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d02e      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d12a      	bne.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003df6:	4b51      	ldr	r3, [pc, #324]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dfc:	0c1b      	lsrs	r3, r3, #16
 8003dfe:	f003 0303 	and.w	r3, r3, #3
 8003e02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e04:	4b4d      	ldr	r3, [pc, #308]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e0a:	0f1b      	lsrs	r3, r3, #28
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	019a      	lsls	r2, r3, #6
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	041b      	lsls	r3, r3, #16
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	061b      	lsls	r3, r3, #24
 8003e24:	431a      	orrs	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	071b      	lsls	r3, r3, #28
 8003e2a:	4944      	ldr	r1, [pc, #272]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003e32:	4b42      	ldr	r3, [pc, #264]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e38:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e40:	3b01      	subs	r3, #1
 8003e42:	021b      	lsls	r3, r3, #8
 8003e44:	493d      	ldr	r1, [pc, #244]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d022      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e60:	d11d      	bne.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e62:	4b36      	ldr	r3, [pc, #216]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e68:	0e1b      	lsrs	r3, r3, #24
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e70:	4b32      	ldr	r3, [pc, #200]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e76:	0f1b      	lsrs	r3, r3, #28
 8003e78:	f003 0307 	and.w	r3, r3, #7
 8003e7c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	019a      	lsls	r2, r3, #6
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	041b      	lsls	r3, r3, #16
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	061b      	lsls	r3, r3, #24
 8003e90:	431a      	orrs	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	071b      	lsls	r3, r3, #28
 8003e96:	4929      	ldr	r1, [pc, #164]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0308 	and.w	r3, r3, #8
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d028      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003eaa:	4b24      	ldr	r3, [pc, #144]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eb0:	0e1b      	lsrs	r3, r3, #24
 8003eb2:	f003 030f 	and.w	r3, r3, #15
 8003eb6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003eb8:	4b20      	ldr	r3, [pc, #128]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ebe:	0c1b      	lsrs	r3, r3, #16
 8003ec0:	f003 0303 	and.w	r3, r3, #3
 8003ec4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	019a      	lsls	r2, r3, #6
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	041b      	lsls	r3, r3, #16
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	061b      	lsls	r3, r3, #24
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	69db      	ldr	r3, [r3, #28]
 8003edc:	071b      	lsls	r3, r3, #28
 8003ede:	4917      	ldr	r1, [pc, #92]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003ee6:	4b15      	ldr	r3, [pc, #84]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ee8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003eec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef4:	4911      	ldr	r1, [pc, #68]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003efc:	4b0f      	ldr	r3, [pc, #60]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a0e      	ldr	r2, [pc, #56]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f08:	f7fd f976 	bl	80011f8 <HAL_GetTick>
 8003f0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f10:	f7fd f972 	bl	80011f8 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b64      	cmp	r3, #100	@ 0x64
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e007      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f22:	4b06      	ldr	r3, [pc, #24]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f2e:	d1ef      	bne.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3720      	adds	r7, #32
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	40023800 	.word	0x40023800

08003f40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e040      	b.n	8003fd4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d106      	bne.n	8003f68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7fc fde2 	bl	8000b2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2224      	movs	r2, #36	@ 0x24
 8003f6c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 0201 	bic.w	r2, r2, #1
 8003f7c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d002      	beq.n	8003f8c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 fb16 	bl	80045b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 f8af 	bl	80040f0 <UART_SetConfig>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d101      	bne.n	8003f9c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e01b      	b.n	8003fd4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003faa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689a      	ldr	r2, [r3, #8]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003fba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f042 0201 	orr.w	r2, r2, #1
 8003fca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 fb95 	bl	80046fc <UART_CheckIdleState>
 8003fd2:	4603      	mov	r3, r0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b08a      	sub	sp, #40	@ 0x28
 8003fe0:	af02      	add	r7, sp, #8
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	603b      	str	r3, [r7, #0]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ff0:	2b20      	cmp	r3, #32
 8003ff2:	d177      	bne.n	80040e4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d002      	beq.n	8004000 <HAL_UART_Transmit+0x24>
 8003ffa:	88fb      	ldrh	r3, [r7, #6]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d101      	bne.n	8004004 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e070      	b.n	80040e6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2221      	movs	r2, #33	@ 0x21
 8004010:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004012:	f7fd f8f1 	bl	80011f8 <HAL_GetTick>
 8004016:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	88fa      	ldrh	r2, [r7, #6]
 800401c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	88fa      	ldrh	r2, [r7, #6]
 8004024:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004030:	d108      	bne.n	8004044 <HAL_UART_Transmit+0x68>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d104      	bne.n	8004044 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800403a:	2300      	movs	r3, #0
 800403c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	61bb      	str	r3, [r7, #24]
 8004042:	e003      	b.n	800404c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004048:	2300      	movs	r3, #0
 800404a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800404c:	e02f      	b.n	80040ae <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	2200      	movs	r2, #0
 8004056:	2180      	movs	r1, #128	@ 0x80
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f000 fbf7 	bl	800484c <UART_WaitOnFlagUntilTimeout>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d004      	beq.n	800406e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2220      	movs	r2, #32
 8004068:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e03b      	b.n	80040e6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10b      	bne.n	800408c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	881b      	ldrh	r3, [r3, #0]
 8004078:	461a      	mov	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004082:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	3302      	adds	r3, #2
 8004088:	61bb      	str	r3, [r7, #24]
 800408a:	e007      	b.n	800409c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	781a      	ldrb	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	3301      	adds	r3, #1
 800409a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	3b01      	subs	r3, #1
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1c9      	bne.n	800404e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	2200      	movs	r2, #0
 80040c2:	2140      	movs	r1, #64	@ 0x40
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 fbc1 	bl	800484c <UART_WaitOnFlagUntilTimeout>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d004      	beq.n	80040da <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2220      	movs	r2, #32
 80040d4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e005      	b.n	80040e6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2220      	movs	r2, #32
 80040de:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80040e0:	2300      	movs	r3, #0
 80040e2:	e000      	b.n	80040e6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80040e4:	2302      	movs	r3, #2
  }
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3720      	adds	r7, #32
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
	...

080040f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b088      	sub	sp, #32
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040f8:	2300      	movs	r3, #0
 80040fa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689a      	ldr	r2, [r3, #8]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	431a      	orrs	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	4313      	orrs	r3, r2
 8004112:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	4ba6      	ldr	r3, [pc, #664]	@ (80043b4 <UART_SetConfig+0x2c4>)
 800411c:	4013      	ands	r3, r2
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	6812      	ldr	r2, [r2, #0]
 8004122:	6979      	ldr	r1, [r7, #20]
 8004124:	430b      	orrs	r3, r1
 8004126:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68da      	ldr	r2, [r3, #12]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	430a      	orrs	r2, r1
 800413c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	4313      	orrs	r3, r2
 800414c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	430a      	orrs	r2, r1
 8004160:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a94      	ldr	r2, [pc, #592]	@ (80043b8 <UART_SetConfig+0x2c8>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d120      	bne.n	80041ae <UART_SetConfig+0xbe>
 800416c:	4b93      	ldr	r3, [pc, #588]	@ (80043bc <UART_SetConfig+0x2cc>)
 800416e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004172:	f003 0303 	and.w	r3, r3, #3
 8004176:	2b03      	cmp	r3, #3
 8004178:	d816      	bhi.n	80041a8 <UART_SetConfig+0xb8>
 800417a:	a201      	add	r2, pc, #4	@ (adr r2, 8004180 <UART_SetConfig+0x90>)
 800417c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004180:	08004191 	.word	0x08004191
 8004184:	0800419d 	.word	0x0800419d
 8004188:	08004197 	.word	0x08004197
 800418c:	080041a3 	.word	0x080041a3
 8004190:	2301      	movs	r3, #1
 8004192:	77fb      	strb	r3, [r7, #31]
 8004194:	e150      	b.n	8004438 <UART_SetConfig+0x348>
 8004196:	2302      	movs	r3, #2
 8004198:	77fb      	strb	r3, [r7, #31]
 800419a:	e14d      	b.n	8004438 <UART_SetConfig+0x348>
 800419c:	2304      	movs	r3, #4
 800419e:	77fb      	strb	r3, [r7, #31]
 80041a0:	e14a      	b.n	8004438 <UART_SetConfig+0x348>
 80041a2:	2308      	movs	r3, #8
 80041a4:	77fb      	strb	r3, [r7, #31]
 80041a6:	e147      	b.n	8004438 <UART_SetConfig+0x348>
 80041a8:	2310      	movs	r3, #16
 80041aa:	77fb      	strb	r3, [r7, #31]
 80041ac:	e144      	b.n	8004438 <UART_SetConfig+0x348>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a83      	ldr	r2, [pc, #524]	@ (80043c0 <UART_SetConfig+0x2d0>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d132      	bne.n	800421e <UART_SetConfig+0x12e>
 80041b8:	4b80      	ldr	r3, [pc, #512]	@ (80043bc <UART_SetConfig+0x2cc>)
 80041ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041be:	f003 030c 	and.w	r3, r3, #12
 80041c2:	2b0c      	cmp	r3, #12
 80041c4:	d828      	bhi.n	8004218 <UART_SetConfig+0x128>
 80041c6:	a201      	add	r2, pc, #4	@ (adr r2, 80041cc <UART_SetConfig+0xdc>)
 80041c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041cc:	08004201 	.word	0x08004201
 80041d0:	08004219 	.word	0x08004219
 80041d4:	08004219 	.word	0x08004219
 80041d8:	08004219 	.word	0x08004219
 80041dc:	0800420d 	.word	0x0800420d
 80041e0:	08004219 	.word	0x08004219
 80041e4:	08004219 	.word	0x08004219
 80041e8:	08004219 	.word	0x08004219
 80041ec:	08004207 	.word	0x08004207
 80041f0:	08004219 	.word	0x08004219
 80041f4:	08004219 	.word	0x08004219
 80041f8:	08004219 	.word	0x08004219
 80041fc:	08004213 	.word	0x08004213
 8004200:	2300      	movs	r3, #0
 8004202:	77fb      	strb	r3, [r7, #31]
 8004204:	e118      	b.n	8004438 <UART_SetConfig+0x348>
 8004206:	2302      	movs	r3, #2
 8004208:	77fb      	strb	r3, [r7, #31]
 800420a:	e115      	b.n	8004438 <UART_SetConfig+0x348>
 800420c:	2304      	movs	r3, #4
 800420e:	77fb      	strb	r3, [r7, #31]
 8004210:	e112      	b.n	8004438 <UART_SetConfig+0x348>
 8004212:	2308      	movs	r3, #8
 8004214:	77fb      	strb	r3, [r7, #31]
 8004216:	e10f      	b.n	8004438 <UART_SetConfig+0x348>
 8004218:	2310      	movs	r3, #16
 800421a:	77fb      	strb	r3, [r7, #31]
 800421c:	e10c      	b.n	8004438 <UART_SetConfig+0x348>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a68      	ldr	r2, [pc, #416]	@ (80043c4 <UART_SetConfig+0x2d4>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d120      	bne.n	800426a <UART_SetConfig+0x17a>
 8004228:	4b64      	ldr	r3, [pc, #400]	@ (80043bc <UART_SetConfig+0x2cc>)
 800422a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800422e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004232:	2b30      	cmp	r3, #48	@ 0x30
 8004234:	d013      	beq.n	800425e <UART_SetConfig+0x16e>
 8004236:	2b30      	cmp	r3, #48	@ 0x30
 8004238:	d814      	bhi.n	8004264 <UART_SetConfig+0x174>
 800423a:	2b20      	cmp	r3, #32
 800423c:	d009      	beq.n	8004252 <UART_SetConfig+0x162>
 800423e:	2b20      	cmp	r3, #32
 8004240:	d810      	bhi.n	8004264 <UART_SetConfig+0x174>
 8004242:	2b00      	cmp	r3, #0
 8004244:	d002      	beq.n	800424c <UART_SetConfig+0x15c>
 8004246:	2b10      	cmp	r3, #16
 8004248:	d006      	beq.n	8004258 <UART_SetConfig+0x168>
 800424a:	e00b      	b.n	8004264 <UART_SetConfig+0x174>
 800424c:	2300      	movs	r3, #0
 800424e:	77fb      	strb	r3, [r7, #31]
 8004250:	e0f2      	b.n	8004438 <UART_SetConfig+0x348>
 8004252:	2302      	movs	r3, #2
 8004254:	77fb      	strb	r3, [r7, #31]
 8004256:	e0ef      	b.n	8004438 <UART_SetConfig+0x348>
 8004258:	2304      	movs	r3, #4
 800425a:	77fb      	strb	r3, [r7, #31]
 800425c:	e0ec      	b.n	8004438 <UART_SetConfig+0x348>
 800425e:	2308      	movs	r3, #8
 8004260:	77fb      	strb	r3, [r7, #31]
 8004262:	e0e9      	b.n	8004438 <UART_SetConfig+0x348>
 8004264:	2310      	movs	r3, #16
 8004266:	77fb      	strb	r3, [r7, #31]
 8004268:	e0e6      	b.n	8004438 <UART_SetConfig+0x348>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a56      	ldr	r2, [pc, #344]	@ (80043c8 <UART_SetConfig+0x2d8>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d120      	bne.n	80042b6 <UART_SetConfig+0x1c6>
 8004274:	4b51      	ldr	r3, [pc, #324]	@ (80043bc <UART_SetConfig+0x2cc>)
 8004276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800427a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800427e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004280:	d013      	beq.n	80042aa <UART_SetConfig+0x1ba>
 8004282:	2bc0      	cmp	r3, #192	@ 0xc0
 8004284:	d814      	bhi.n	80042b0 <UART_SetConfig+0x1c0>
 8004286:	2b80      	cmp	r3, #128	@ 0x80
 8004288:	d009      	beq.n	800429e <UART_SetConfig+0x1ae>
 800428a:	2b80      	cmp	r3, #128	@ 0x80
 800428c:	d810      	bhi.n	80042b0 <UART_SetConfig+0x1c0>
 800428e:	2b00      	cmp	r3, #0
 8004290:	d002      	beq.n	8004298 <UART_SetConfig+0x1a8>
 8004292:	2b40      	cmp	r3, #64	@ 0x40
 8004294:	d006      	beq.n	80042a4 <UART_SetConfig+0x1b4>
 8004296:	e00b      	b.n	80042b0 <UART_SetConfig+0x1c0>
 8004298:	2300      	movs	r3, #0
 800429a:	77fb      	strb	r3, [r7, #31]
 800429c:	e0cc      	b.n	8004438 <UART_SetConfig+0x348>
 800429e:	2302      	movs	r3, #2
 80042a0:	77fb      	strb	r3, [r7, #31]
 80042a2:	e0c9      	b.n	8004438 <UART_SetConfig+0x348>
 80042a4:	2304      	movs	r3, #4
 80042a6:	77fb      	strb	r3, [r7, #31]
 80042a8:	e0c6      	b.n	8004438 <UART_SetConfig+0x348>
 80042aa:	2308      	movs	r3, #8
 80042ac:	77fb      	strb	r3, [r7, #31]
 80042ae:	e0c3      	b.n	8004438 <UART_SetConfig+0x348>
 80042b0:	2310      	movs	r3, #16
 80042b2:	77fb      	strb	r3, [r7, #31]
 80042b4:	e0c0      	b.n	8004438 <UART_SetConfig+0x348>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a44      	ldr	r2, [pc, #272]	@ (80043cc <UART_SetConfig+0x2dc>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d125      	bne.n	800430c <UART_SetConfig+0x21c>
 80042c0:	4b3e      	ldr	r3, [pc, #248]	@ (80043bc <UART_SetConfig+0x2cc>)
 80042c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042ce:	d017      	beq.n	8004300 <UART_SetConfig+0x210>
 80042d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042d4:	d817      	bhi.n	8004306 <UART_SetConfig+0x216>
 80042d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042da:	d00b      	beq.n	80042f4 <UART_SetConfig+0x204>
 80042dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042e0:	d811      	bhi.n	8004306 <UART_SetConfig+0x216>
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d003      	beq.n	80042ee <UART_SetConfig+0x1fe>
 80042e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042ea:	d006      	beq.n	80042fa <UART_SetConfig+0x20a>
 80042ec:	e00b      	b.n	8004306 <UART_SetConfig+0x216>
 80042ee:	2300      	movs	r3, #0
 80042f0:	77fb      	strb	r3, [r7, #31]
 80042f2:	e0a1      	b.n	8004438 <UART_SetConfig+0x348>
 80042f4:	2302      	movs	r3, #2
 80042f6:	77fb      	strb	r3, [r7, #31]
 80042f8:	e09e      	b.n	8004438 <UART_SetConfig+0x348>
 80042fa:	2304      	movs	r3, #4
 80042fc:	77fb      	strb	r3, [r7, #31]
 80042fe:	e09b      	b.n	8004438 <UART_SetConfig+0x348>
 8004300:	2308      	movs	r3, #8
 8004302:	77fb      	strb	r3, [r7, #31]
 8004304:	e098      	b.n	8004438 <UART_SetConfig+0x348>
 8004306:	2310      	movs	r3, #16
 8004308:	77fb      	strb	r3, [r7, #31]
 800430a:	e095      	b.n	8004438 <UART_SetConfig+0x348>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a2f      	ldr	r2, [pc, #188]	@ (80043d0 <UART_SetConfig+0x2e0>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d125      	bne.n	8004362 <UART_SetConfig+0x272>
 8004316:	4b29      	ldr	r3, [pc, #164]	@ (80043bc <UART_SetConfig+0x2cc>)
 8004318:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800431c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004320:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004324:	d017      	beq.n	8004356 <UART_SetConfig+0x266>
 8004326:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800432a:	d817      	bhi.n	800435c <UART_SetConfig+0x26c>
 800432c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004330:	d00b      	beq.n	800434a <UART_SetConfig+0x25a>
 8004332:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004336:	d811      	bhi.n	800435c <UART_SetConfig+0x26c>
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <UART_SetConfig+0x254>
 800433c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004340:	d006      	beq.n	8004350 <UART_SetConfig+0x260>
 8004342:	e00b      	b.n	800435c <UART_SetConfig+0x26c>
 8004344:	2301      	movs	r3, #1
 8004346:	77fb      	strb	r3, [r7, #31]
 8004348:	e076      	b.n	8004438 <UART_SetConfig+0x348>
 800434a:	2302      	movs	r3, #2
 800434c:	77fb      	strb	r3, [r7, #31]
 800434e:	e073      	b.n	8004438 <UART_SetConfig+0x348>
 8004350:	2304      	movs	r3, #4
 8004352:	77fb      	strb	r3, [r7, #31]
 8004354:	e070      	b.n	8004438 <UART_SetConfig+0x348>
 8004356:	2308      	movs	r3, #8
 8004358:	77fb      	strb	r3, [r7, #31]
 800435a:	e06d      	b.n	8004438 <UART_SetConfig+0x348>
 800435c:	2310      	movs	r3, #16
 800435e:	77fb      	strb	r3, [r7, #31]
 8004360:	e06a      	b.n	8004438 <UART_SetConfig+0x348>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a1b      	ldr	r2, [pc, #108]	@ (80043d4 <UART_SetConfig+0x2e4>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d138      	bne.n	80043de <UART_SetConfig+0x2ee>
 800436c:	4b13      	ldr	r3, [pc, #76]	@ (80043bc <UART_SetConfig+0x2cc>)
 800436e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004372:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004376:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800437a:	d017      	beq.n	80043ac <UART_SetConfig+0x2bc>
 800437c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004380:	d82a      	bhi.n	80043d8 <UART_SetConfig+0x2e8>
 8004382:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004386:	d00b      	beq.n	80043a0 <UART_SetConfig+0x2b0>
 8004388:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800438c:	d824      	bhi.n	80043d8 <UART_SetConfig+0x2e8>
 800438e:	2b00      	cmp	r3, #0
 8004390:	d003      	beq.n	800439a <UART_SetConfig+0x2aa>
 8004392:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004396:	d006      	beq.n	80043a6 <UART_SetConfig+0x2b6>
 8004398:	e01e      	b.n	80043d8 <UART_SetConfig+0x2e8>
 800439a:	2300      	movs	r3, #0
 800439c:	77fb      	strb	r3, [r7, #31]
 800439e:	e04b      	b.n	8004438 <UART_SetConfig+0x348>
 80043a0:	2302      	movs	r3, #2
 80043a2:	77fb      	strb	r3, [r7, #31]
 80043a4:	e048      	b.n	8004438 <UART_SetConfig+0x348>
 80043a6:	2304      	movs	r3, #4
 80043a8:	77fb      	strb	r3, [r7, #31]
 80043aa:	e045      	b.n	8004438 <UART_SetConfig+0x348>
 80043ac:	2308      	movs	r3, #8
 80043ae:	77fb      	strb	r3, [r7, #31]
 80043b0:	e042      	b.n	8004438 <UART_SetConfig+0x348>
 80043b2:	bf00      	nop
 80043b4:	efff69f3 	.word	0xefff69f3
 80043b8:	40011000 	.word	0x40011000
 80043bc:	40023800 	.word	0x40023800
 80043c0:	40004400 	.word	0x40004400
 80043c4:	40004800 	.word	0x40004800
 80043c8:	40004c00 	.word	0x40004c00
 80043cc:	40005000 	.word	0x40005000
 80043d0:	40011400 	.word	0x40011400
 80043d4:	40007800 	.word	0x40007800
 80043d8:	2310      	movs	r3, #16
 80043da:	77fb      	strb	r3, [r7, #31]
 80043dc:	e02c      	b.n	8004438 <UART_SetConfig+0x348>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a72      	ldr	r2, [pc, #456]	@ (80045ac <UART_SetConfig+0x4bc>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d125      	bne.n	8004434 <UART_SetConfig+0x344>
 80043e8:	4b71      	ldr	r3, [pc, #452]	@ (80045b0 <UART_SetConfig+0x4c0>)
 80043ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ee:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80043f2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80043f6:	d017      	beq.n	8004428 <UART_SetConfig+0x338>
 80043f8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80043fc:	d817      	bhi.n	800442e <UART_SetConfig+0x33e>
 80043fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004402:	d00b      	beq.n	800441c <UART_SetConfig+0x32c>
 8004404:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004408:	d811      	bhi.n	800442e <UART_SetConfig+0x33e>
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <UART_SetConfig+0x326>
 800440e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004412:	d006      	beq.n	8004422 <UART_SetConfig+0x332>
 8004414:	e00b      	b.n	800442e <UART_SetConfig+0x33e>
 8004416:	2300      	movs	r3, #0
 8004418:	77fb      	strb	r3, [r7, #31]
 800441a:	e00d      	b.n	8004438 <UART_SetConfig+0x348>
 800441c:	2302      	movs	r3, #2
 800441e:	77fb      	strb	r3, [r7, #31]
 8004420:	e00a      	b.n	8004438 <UART_SetConfig+0x348>
 8004422:	2304      	movs	r3, #4
 8004424:	77fb      	strb	r3, [r7, #31]
 8004426:	e007      	b.n	8004438 <UART_SetConfig+0x348>
 8004428:	2308      	movs	r3, #8
 800442a:	77fb      	strb	r3, [r7, #31]
 800442c:	e004      	b.n	8004438 <UART_SetConfig+0x348>
 800442e:	2310      	movs	r3, #16
 8004430:	77fb      	strb	r3, [r7, #31]
 8004432:	e001      	b.n	8004438 <UART_SetConfig+0x348>
 8004434:	2310      	movs	r3, #16
 8004436:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	69db      	ldr	r3, [r3, #28]
 800443c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004440:	d15b      	bne.n	80044fa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004442:	7ffb      	ldrb	r3, [r7, #31]
 8004444:	2b08      	cmp	r3, #8
 8004446:	d828      	bhi.n	800449a <UART_SetConfig+0x3aa>
 8004448:	a201      	add	r2, pc, #4	@ (adr r2, 8004450 <UART_SetConfig+0x360>)
 800444a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444e:	bf00      	nop
 8004450:	08004475 	.word	0x08004475
 8004454:	0800447d 	.word	0x0800447d
 8004458:	08004485 	.word	0x08004485
 800445c:	0800449b 	.word	0x0800449b
 8004460:	0800448b 	.word	0x0800448b
 8004464:	0800449b 	.word	0x0800449b
 8004468:	0800449b 	.word	0x0800449b
 800446c:	0800449b 	.word	0x0800449b
 8004470:	08004493 	.word	0x08004493
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004474:	f7ff f914 	bl	80036a0 <HAL_RCC_GetPCLK1Freq>
 8004478:	61b8      	str	r0, [r7, #24]
        break;
 800447a:	e013      	b.n	80044a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800447c:	f7ff f924 	bl	80036c8 <HAL_RCC_GetPCLK2Freq>
 8004480:	61b8      	str	r0, [r7, #24]
        break;
 8004482:	e00f      	b.n	80044a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004484:	4b4b      	ldr	r3, [pc, #300]	@ (80045b4 <UART_SetConfig+0x4c4>)
 8004486:	61bb      	str	r3, [r7, #24]
        break;
 8004488:	e00c      	b.n	80044a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800448a:	f7fe fff7 	bl	800347c <HAL_RCC_GetSysClockFreq>
 800448e:	61b8      	str	r0, [r7, #24]
        break;
 8004490:	e008      	b.n	80044a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004492:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004496:	61bb      	str	r3, [r7, #24]
        break;
 8004498:	e004      	b.n	80044a4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800449a:	2300      	movs	r3, #0
 800449c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	77bb      	strb	r3, [r7, #30]
        break;
 80044a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d074      	beq.n	8004594 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	005a      	lsls	r2, r3, #1
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	085b      	lsrs	r3, r3, #1
 80044b4:	441a      	add	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80044be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	2b0f      	cmp	r3, #15
 80044c4:	d916      	bls.n	80044f4 <UART_SetConfig+0x404>
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044cc:	d212      	bcs.n	80044f4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	f023 030f 	bic.w	r3, r3, #15
 80044d6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	085b      	lsrs	r3, r3, #1
 80044dc:	b29b      	uxth	r3, r3
 80044de:	f003 0307 	and.w	r3, r3, #7
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	89fb      	ldrh	r3, [r7, #14]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	89fa      	ldrh	r2, [r7, #14]
 80044f0:	60da      	str	r2, [r3, #12]
 80044f2:	e04f      	b.n	8004594 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	77bb      	strb	r3, [r7, #30]
 80044f8:	e04c      	b.n	8004594 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044fa:	7ffb      	ldrb	r3, [r7, #31]
 80044fc:	2b08      	cmp	r3, #8
 80044fe:	d828      	bhi.n	8004552 <UART_SetConfig+0x462>
 8004500:	a201      	add	r2, pc, #4	@ (adr r2, 8004508 <UART_SetConfig+0x418>)
 8004502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004506:	bf00      	nop
 8004508:	0800452d 	.word	0x0800452d
 800450c:	08004535 	.word	0x08004535
 8004510:	0800453d 	.word	0x0800453d
 8004514:	08004553 	.word	0x08004553
 8004518:	08004543 	.word	0x08004543
 800451c:	08004553 	.word	0x08004553
 8004520:	08004553 	.word	0x08004553
 8004524:	08004553 	.word	0x08004553
 8004528:	0800454b 	.word	0x0800454b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800452c:	f7ff f8b8 	bl	80036a0 <HAL_RCC_GetPCLK1Freq>
 8004530:	61b8      	str	r0, [r7, #24]
        break;
 8004532:	e013      	b.n	800455c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004534:	f7ff f8c8 	bl	80036c8 <HAL_RCC_GetPCLK2Freq>
 8004538:	61b8      	str	r0, [r7, #24]
        break;
 800453a:	e00f      	b.n	800455c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800453c:	4b1d      	ldr	r3, [pc, #116]	@ (80045b4 <UART_SetConfig+0x4c4>)
 800453e:	61bb      	str	r3, [r7, #24]
        break;
 8004540:	e00c      	b.n	800455c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004542:	f7fe ff9b 	bl	800347c <HAL_RCC_GetSysClockFreq>
 8004546:	61b8      	str	r0, [r7, #24]
        break;
 8004548:	e008      	b.n	800455c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800454a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800454e:	61bb      	str	r3, [r7, #24]
        break;
 8004550:	e004      	b.n	800455c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004552:	2300      	movs	r3, #0
 8004554:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	77bb      	strb	r3, [r7, #30]
        break;
 800455a:	bf00      	nop
    }

    if (pclk != 0U)
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d018      	beq.n	8004594 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	085a      	lsrs	r2, r3, #1
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	441a      	add	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	fbb2 f3f3 	udiv	r3, r2, r3
 8004574:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	2b0f      	cmp	r3, #15
 800457a:	d909      	bls.n	8004590 <UART_SetConfig+0x4a0>
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004582:	d205      	bcs.n	8004590 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	b29a      	uxth	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	60da      	str	r2, [r3, #12]
 800458e:	e001      	b.n	8004594 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80045a0:	7fbb      	ldrb	r3, [r7, #30]
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3720      	adds	r7, #32
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	40007c00 	.word	0x40007c00
 80045b0:	40023800 	.word	0x40023800
 80045b4:	00f42400 	.word	0x00f42400

080045b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c4:	f003 0308 	and.w	r3, r3, #8
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00a      	beq.n	80045e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00a      	beq.n	8004604 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00a      	beq.n	8004626 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462a:	f003 0304 	and.w	r3, r3, #4
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00a      	beq.n	8004648 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800464c:	f003 0310 	and.w	r3, r3, #16
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00a      	beq.n	800466a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466e:	f003 0320 	and.w	r3, r3, #32
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00a      	beq.n	800468c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	430a      	orrs	r2, r1
 800468a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004694:	2b00      	cmp	r3, #0
 8004696:	d01a      	beq.n	80046ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046b6:	d10a      	bne.n	80046ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	605a      	str	r2, [r3, #4]
  }
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b098      	sub	sp, #96	@ 0x60
 8004700:	af02      	add	r7, sp, #8
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800470c:	f7fc fd74 	bl	80011f8 <HAL_GetTick>
 8004710:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0308 	and.w	r3, r3, #8
 800471c:	2b08      	cmp	r3, #8
 800471e:	d12e      	bne.n	800477e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004720:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004728:	2200      	movs	r2, #0
 800472a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f88c 	bl	800484c <UART_WaitOnFlagUntilTimeout>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d021      	beq.n	800477e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004742:	e853 3f00 	ldrex	r3, [r3]
 8004746:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800474a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800474e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	461a      	mov	r2, r3
 8004756:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004758:	647b      	str	r3, [r7, #68]	@ 0x44
 800475a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800475e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004760:	e841 2300 	strex	r3, r2, [r1]
 8004764:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004766:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1e6      	bne.n	800473a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2220      	movs	r2, #32
 8004770:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e062      	b.n	8004844 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b04      	cmp	r3, #4
 800478a:	d149      	bne.n	8004820 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800478c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004794:	2200      	movs	r2, #0
 8004796:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f856 	bl	800484c <UART_WaitOnFlagUntilTimeout>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d03c      	beq.n	8004820 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ae:	e853 3f00 	ldrex	r3, [r3]
 80047b2:	623b      	str	r3, [r7, #32]
   return(result);
 80047b4:	6a3b      	ldr	r3, [r7, #32]
 80047b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	461a      	mov	r2, r3
 80047c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80047c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047cc:	e841 2300 	strex	r3, r2, [r1]
 80047d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1e6      	bne.n	80047a6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	3308      	adds	r3, #8
 80047de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	e853 3f00 	ldrex	r3, [r3]
 80047e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 0301 	bic.w	r3, r3, #1
 80047ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	3308      	adds	r3, #8
 80047f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047f8:	61fa      	str	r2, [r7, #28]
 80047fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fc:	69b9      	ldr	r1, [r7, #24]
 80047fe:	69fa      	ldr	r2, [r7, #28]
 8004800:	e841 2300 	strex	r3, r2, [r1]
 8004804:	617b      	str	r3, [r7, #20]
   return(result);
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1e5      	bne.n	80047d8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2220      	movs	r2, #32
 8004810:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e011      	b.n	8004844 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2220      	movs	r2, #32
 8004824:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2220      	movs	r2, #32
 800482a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3758      	adds	r7, #88	@ 0x58
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	603b      	str	r3, [r7, #0]
 8004858:	4613      	mov	r3, r2
 800485a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800485c:	e04f      	b.n	80048fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004864:	d04b      	beq.n	80048fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004866:	f7fc fcc7 	bl	80011f8 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	429a      	cmp	r2, r3
 8004874:	d302      	bcc.n	800487c <UART_WaitOnFlagUntilTimeout+0x30>
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d101      	bne.n	8004880 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e04e      	b.n	800491e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0304 	and.w	r3, r3, #4
 800488a:	2b00      	cmp	r3, #0
 800488c:	d037      	beq.n	80048fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	2b80      	cmp	r3, #128	@ 0x80
 8004892:	d034      	beq.n	80048fe <UART_WaitOnFlagUntilTimeout+0xb2>
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	2b40      	cmp	r3, #64	@ 0x40
 8004898:	d031      	beq.n	80048fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	69db      	ldr	r3, [r3, #28]
 80048a0:	f003 0308 	and.w	r3, r3, #8
 80048a4:	2b08      	cmp	r3, #8
 80048a6:	d110      	bne.n	80048ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2208      	movs	r2, #8
 80048ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f000 f838 	bl	8004926 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2208      	movs	r2, #8
 80048ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e029      	b.n	800491e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	69db      	ldr	r3, [r3, #28]
 80048d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048d8:	d111      	bne.n	80048fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80048e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 f81e 	bl	8004926 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2220      	movs	r2, #32
 80048ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e00f      	b.n	800491e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	69da      	ldr	r2, [r3, #28]
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	4013      	ands	r3, r2
 8004908:	68ba      	ldr	r2, [r7, #8]
 800490a:	429a      	cmp	r2, r3
 800490c:	bf0c      	ite	eq
 800490e:	2301      	moveq	r3, #1
 8004910:	2300      	movne	r3, #0
 8004912:	b2db      	uxtb	r3, r3
 8004914:	461a      	mov	r2, r3
 8004916:	79fb      	ldrb	r3, [r7, #7]
 8004918:	429a      	cmp	r2, r3
 800491a:	d0a0      	beq.n	800485e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004926:	b480      	push	{r7}
 8004928:	b095      	sub	sp, #84	@ 0x54
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004936:	e853 3f00 	ldrex	r3, [r3]
 800493a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800493c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800493e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004942:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	461a      	mov	r2, r3
 800494a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800494c:	643b      	str	r3, [r7, #64]	@ 0x40
 800494e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004950:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004952:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004954:	e841 2300 	strex	r3, r2, [r1]
 8004958:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800495a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1e6      	bne.n	800492e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	3308      	adds	r3, #8
 8004966:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004968:	6a3b      	ldr	r3, [r7, #32]
 800496a:	e853 3f00 	ldrex	r3, [r3]
 800496e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	f023 0301 	bic.w	r3, r3, #1
 8004976:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	3308      	adds	r3, #8
 800497e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004980:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004982:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004984:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004986:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004988:	e841 2300 	strex	r3, r2, [r1]
 800498c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800498e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1e5      	bne.n	8004960 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004998:	2b01      	cmp	r3, #1
 800499a:	d118      	bne.n	80049ce <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	e853 3f00 	ldrex	r3, [r3]
 80049a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	f023 0310 	bic.w	r3, r3, #16
 80049b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	461a      	mov	r2, r3
 80049b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049ba:	61bb      	str	r3, [r7, #24]
 80049bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049be:	6979      	ldr	r1, [r7, #20]
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	e841 2300 	strex	r3, r2, [r1]
 80049c6:	613b      	str	r3, [r7, #16]
   return(result);
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1e6      	bne.n	800499c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2220      	movs	r2, #32
 80049d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80049e2:	bf00      	nop
 80049e4:	3754      	adds	r7, #84	@ 0x54
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
	...

080049f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049f0:	b084      	sub	sp, #16
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b084      	sub	sp, #16
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
 80049fa:	f107 001c 	add.w	r0, r7, #28
 80049fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a02:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d121      	bne.n	8004a4e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a0e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68da      	ldr	r2, [r3, #12]
 8004a1a:	4b21      	ldr	r3, [pc, #132]	@ (8004aa0 <USB_CoreInit+0xb0>)
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004a2e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d105      	bne.n	8004a42 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 fa92 	bl	8004f6c <USB_CoreReset>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	73fb      	strb	r3, [r7, #15]
 8004a4c:	e010      	b.n	8004a70 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 fa86 	bl	8004f6c <USB_CoreReset>
 8004a60:	4603      	mov	r3, r0
 8004a62:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a68:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8004a70:	7fbb      	ldrb	r3, [r7, #30]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d10b      	bne.n	8004a8e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f043 0206 	orr.w	r2, r3, #6
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f043 0220 	orr.w	r2, r3, #32
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a9a:	b004      	add	sp, #16
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	ffbdffbf 	.word	0xffbdffbf

08004aa4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f023 0201 	bic.w	r2, r3, #1
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b084      	sub	sp, #16
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
 8004ace:	460b      	mov	r3, r1
 8004ad0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ae2:	78fb      	ldrb	r3, [r7, #3]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d115      	bne.n	8004b14 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004af4:	200a      	movs	r0, #10
 8004af6:	f7fc fb8b 	bl	8001210 <HAL_Delay>
      ms += 10U;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	330a      	adds	r3, #10
 8004afe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 fa25 	bl	8004f50 <USB_GetMode>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d01e      	beq.n	8004b4a <USB_SetCurrentMode+0x84>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004b10:	d9f0      	bls.n	8004af4 <USB_SetCurrentMode+0x2e>
 8004b12:	e01a      	b.n	8004b4a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b14:	78fb      	ldrb	r3, [r7, #3]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d115      	bne.n	8004b46 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004b26:	200a      	movs	r0, #10
 8004b28:	f7fc fb72 	bl	8001210 <HAL_Delay>
      ms += 10U;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	330a      	adds	r3, #10
 8004b30:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 fa0c 	bl	8004f50 <USB_GetMode>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d005      	beq.n	8004b4a <USB_SetCurrentMode+0x84>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2bc7      	cmp	r3, #199	@ 0xc7
 8004b42:	d9f0      	bls.n	8004b26 <USB_SetCurrentMode+0x60>
 8004b44:	e001      	b.n	8004b4a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e005      	b.n	8004b56 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2bc8      	cmp	r3, #200	@ 0xc8
 8004b4e:	d101      	bne.n	8004b54 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e000      	b.n	8004b56 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
	...

08004b60 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b60:	b084      	sub	sp, #16
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b086      	sub	sp, #24
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
 8004b6a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004b6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004b72:	2300      	movs	r3, #0
 8004b74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	613b      	str	r3, [r7, #16]
 8004b7e:	e009      	b.n	8004b94 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	3340      	adds	r3, #64	@ 0x40
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4413      	add	r3, r2
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	3301      	adds	r3, #1
 8004b92:	613b      	str	r3, [r7, #16]
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	2b0e      	cmp	r3, #14
 8004b98:	d9f2      	bls.n	8004b80 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004b9a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d11c      	bne.n	8004bdc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004bb0:	f043 0302 	orr.w	r3, r3, #2
 8004bb4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bba:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	e005      	b.n	8004be8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004bee:	461a      	mov	r2, r3
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004bf4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d10d      	bne.n	8004c18 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004bfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d104      	bne.n	8004c0e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004c04:	2100      	movs	r1, #0
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f968 	bl	8004edc <USB_SetDevSpeed>
 8004c0c:	e008      	b.n	8004c20 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004c0e:	2101      	movs	r1, #1
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f963 	bl	8004edc <USB_SetDevSpeed>
 8004c16:	e003      	b.n	8004c20 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004c18:	2103      	movs	r1, #3
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 f95e 	bl	8004edc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004c20:	2110      	movs	r1, #16
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f8fa 	bl	8004e1c <USB_FlushTxFifo>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f924 	bl	8004e80 <USB_FlushRxFifo>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c48:	461a      	mov	r2, r3
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c54:	461a      	mov	r2, r3
 8004c56:	2300      	movs	r3, #0
 8004c58:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c60:	461a      	mov	r2, r3
 8004c62:	2300      	movs	r3, #0
 8004c64:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c66:	2300      	movs	r3, #0
 8004c68:	613b      	str	r3, [r7, #16]
 8004c6a:	e043      	b.n	8004cf4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	015a      	lsls	r2, r3, #5
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	4413      	add	r3, r2
 8004c74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c82:	d118      	bne.n	8004cb6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d10a      	bne.n	8004ca0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	015a      	lsls	r2, r3, #5
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4413      	add	r3, r2
 8004c92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c96:	461a      	mov	r2, r3
 8004c98:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004c9c:	6013      	str	r3, [r2, #0]
 8004c9e:	e013      	b.n	8004cc8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	015a      	lsls	r2, r3, #5
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cac:	461a      	mov	r2, r3
 8004cae:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004cb2:	6013      	str	r3, [r2, #0]
 8004cb4:	e008      	b.n	8004cc8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	015a      	lsls	r2, r3, #5
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	015a      	lsls	r2, r3, #5
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004cec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	613b      	str	r3, [r7, #16]
 8004cf4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d3b5      	bcc.n	8004c6c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d00:	2300      	movs	r3, #0
 8004d02:	613b      	str	r3, [r7, #16]
 8004d04:	e043      	b.n	8004d8e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	015a      	lsls	r2, r3, #5
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d1c:	d118      	bne.n	8004d50 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d10a      	bne.n	8004d3a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	015a      	lsls	r2, r3, #5
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d30:	461a      	mov	r2, r3
 8004d32:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004d36:	6013      	str	r3, [r2, #0]
 8004d38:	e013      	b.n	8004d62 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	015a      	lsls	r2, r3, #5
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	4413      	add	r3, r2
 8004d42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d46:	461a      	mov	r2, r3
 8004d48:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004d4c:	6013      	str	r3, [r2, #0]
 8004d4e:	e008      	b.n	8004d62 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	2300      	movs	r3, #0
 8004d60:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	015a      	lsls	r2, r3, #5
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d6e:	461a      	mov	r2, r3
 8004d70:	2300      	movs	r3, #0
 8004d72:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	015a      	lsls	r2, r3, #5
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d80:	461a      	mov	r2, r3
 8004d82:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004d86:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	613b      	str	r3, [r7, #16]
 8004d8e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004d92:	461a      	mov	r2, r3
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d3b5      	bcc.n	8004d06 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004da8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004dac:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004dba:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004dbc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d105      	bne.n	8004dd0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	f043 0210 	orr.w	r2, r3, #16
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	699a      	ldr	r2, [r3, #24]
 8004dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8004e14 <USB_DevInit+0x2b4>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004ddc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d005      	beq.n	8004df0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	f043 0208 	orr.w	r2, r3, #8
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004df0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d105      	bne.n	8004e04 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	699a      	ldr	r2, [r3, #24]
 8004dfc:	4b06      	ldr	r3, [pc, #24]	@ (8004e18 <USB_DevInit+0x2b8>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3718      	adds	r7, #24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e10:	b004      	add	sp, #16
 8004e12:	4770      	bx	lr
 8004e14:	803c3800 	.word	0x803c3800
 8004e18:	40000004 	.word	0x40000004

08004e1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e26:	2300      	movs	r3, #0
 8004e28:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e36:	d901      	bls.n	8004e3c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e01b      	b.n	8004e74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	daf2      	bge.n	8004e2a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004e44:	2300      	movs	r3, #0
 8004e46:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	019b      	lsls	r3, r3, #6
 8004e4c:	f043 0220 	orr.w	r2, r3, #32
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	3301      	adds	r3, #1
 8004e58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e60:	d901      	bls.n	8004e66 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e006      	b.n	8004e74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	f003 0320 	and.w	r3, r3, #32
 8004e6e:	2b20      	cmp	r3, #32
 8004e70:	d0f0      	beq.n	8004e54 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3714      	adds	r7, #20
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e98:	d901      	bls.n	8004e9e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e018      	b.n	8004ed0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	daf2      	bge.n	8004e8c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2210      	movs	r2, #16
 8004eae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ebc:	d901      	bls.n	8004ec2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e006      	b.n	8004ed0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	f003 0310 	and.w	r3, r3, #16
 8004eca:	2b10      	cmp	r3, #16
 8004ecc:	d0f0      	beq.n	8004eb0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3714      	adds	r7, #20
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	78fb      	ldrb	r3, [r7, #3]
 8004ef6:	68f9      	ldr	r1, [r7, #12]
 8004ef8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004efc:	4313      	orrs	r3, r2
 8004efe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3714      	adds	r7, #20
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b085      	sub	sp, #20
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004f28:	f023 0303 	bic.w	r3, r3, #3
 8004f2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f3c:	f043 0302 	orr.w	r3, r3, #2
 8004f40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3714      	adds	r7, #20
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	f003 0301 	and.w	r3, r3, #1
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f74:	2300      	movs	r3, #0
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f84:	d901      	bls.n	8004f8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e01b      	b.n	8004fc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	daf2      	bge.n	8004f78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004f92:	2300      	movs	r3, #0
 8004f94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	f043 0201 	orr.w	r2, r3, #1
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004fae:	d901      	bls.n	8004fb4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e006      	b.n	8004fc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d0f0      	beq.n	8004fa2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
	...

08004fd0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 8004fd6:	4b87      	ldr	r3, [pc, #540]	@ (80051f4 <MX_LWIP_Init+0x224>)
 8004fd8:	220a      	movs	r2, #10
 8004fda:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 8004fdc:	4b85      	ldr	r3, [pc, #532]	@ (80051f4 <MX_LWIP_Init+0x224>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8004fe2:	4b84      	ldr	r3, [pc, #528]	@ (80051f4 <MX_LWIP_Init+0x224>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 4;
 8004fe8:	4b82      	ldr	r3, [pc, #520]	@ (80051f4 <MX_LWIP_Init+0x224>)
 8004fea:	2204      	movs	r2, #4
 8004fec:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004fee:	4b82      	ldr	r3, [pc, #520]	@ (80051f8 <MX_LWIP_Init+0x228>)
 8004ff0:	22ff      	movs	r2, #255	@ 0xff
 8004ff2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004ff4:	4b80      	ldr	r3, [pc, #512]	@ (80051f8 <MX_LWIP_Init+0x228>)
 8004ff6:	22ff      	movs	r2, #255	@ 0xff
 8004ff8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004ffa:	4b7f      	ldr	r3, [pc, #508]	@ (80051f8 <MX_LWIP_Init+0x228>)
 8004ffc:	22ff      	movs	r2, #255	@ 0xff
 8004ffe:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005000:	4b7d      	ldr	r3, [pc, #500]	@ (80051f8 <MX_LWIP_Init+0x228>)
 8005002:	2200      	movs	r2, #0
 8005004:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 8005006:	4b7d      	ldr	r3, [pc, #500]	@ (80051fc <MX_LWIP_Init+0x22c>)
 8005008:	220a      	movs	r2, #10
 800500a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800500c:	4b7b      	ldr	r3, [pc, #492]	@ (80051fc <MX_LWIP_Init+0x22c>)
 800500e:	2200      	movs	r2, #0
 8005010:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8005012:	4b7a      	ldr	r3, [pc, #488]	@ (80051fc <MX_LWIP_Init+0x22c>)
 8005014:	2200      	movs	r2, #0
 8005016:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8005018:	4b78      	ldr	r3, [pc, #480]	@ (80051fc <MX_LWIP_Init+0x22c>)
 800501a:	2201      	movs	r2, #1
 800501c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 800501e:	f000 fd39 	bl	8005a94 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005022:	4b74      	ldr	r3, [pc, #464]	@ (80051f4 <MX_LWIP_Init+0x224>)
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	061a      	lsls	r2, r3, #24
 8005028:	4b72      	ldr	r3, [pc, #456]	@ (80051f4 <MX_LWIP_Init+0x224>)
 800502a:	785b      	ldrb	r3, [r3, #1]
 800502c:	041b      	lsls	r3, r3, #16
 800502e:	431a      	orrs	r2, r3
 8005030:	4b70      	ldr	r3, [pc, #448]	@ (80051f4 <MX_LWIP_Init+0x224>)
 8005032:	789b      	ldrb	r3, [r3, #2]
 8005034:	021b      	lsls	r3, r3, #8
 8005036:	4313      	orrs	r3, r2
 8005038:	4a6e      	ldr	r2, [pc, #440]	@ (80051f4 <MX_LWIP_Init+0x224>)
 800503a:	78d2      	ldrb	r2, [r2, #3]
 800503c:	4313      	orrs	r3, r2
 800503e:	061a      	lsls	r2, r3, #24
 8005040:	4b6c      	ldr	r3, [pc, #432]	@ (80051f4 <MX_LWIP_Init+0x224>)
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	0619      	lsls	r1, r3, #24
 8005046:	4b6b      	ldr	r3, [pc, #428]	@ (80051f4 <MX_LWIP_Init+0x224>)
 8005048:	785b      	ldrb	r3, [r3, #1]
 800504a:	041b      	lsls	r3, r3, #16
 800504c:	4319      	orrs	r1, r3
 800504e:	4b69      	ldr	r3, [pc, #420]	@ (80051f4 <MX_LWIP_Init+0x224>)
 8005050:	789b      	ldrb	r3, [r3, #2]
 8005052:	021b      	lsls	r3, r3, #8
 8005054:	430b      	orrs	r3, r1
 8005056:	4967      	ldr	r1, [pc, #412]	@ (80051f4 <MX_LWIP_Init+0x224>)
 8005058:	78c9      	ldrb	r1, [r1, #3]
 800505a:	430b      	orrs	r3, r1
 800505c:	021b      	lsls	r3, r3, #8
 800505e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005062:	431a      	orrs	r2, r3
 8005064:	4b63      	ldr	r3, [pc, #396]	@ (80051f4 <MX_LWIP_Init+0x224>)
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	0619      	lsls	r1, r3, #24
 800506a:	4b62      	ldr	r3, [pc, #392]	@ (80051f4 <MX_LWIP_Init+0x224>)
 800506c:	785b      	ldrb	r3, [r3, #1]
 800506e:	041b      	lsls	r3, r3, #16
 8005070:	4319      	orrs	r1, r3
 8005072:	4b60      	ldr	r3, [pc, #384]	@ (80051f4 <MX_LWIP_Init+0x224>)
 8005074:	789b      	ldrb	r3, [r3, #2]
 8005076:	021b      	lsls	r3, r3, #8
 8005078:	430b      	orrs	r3, r1
 800507a:	495e      	ldr	r1, [pc, #376]	@ (80051f4 <MX_LWIP_Init+0x224>)
 800507c:	78c9      	ldrb	r1, [r1, #3]
 800507e:	430b      	orrs	r3, r1
 8005080:	0a1b      	lsrs	r3, r3, #8
 8005082:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005086:	431a      	orrs	r2, r3
 8005088:	4b5a      	ldr	r3, [pc, #360]	@ (80051f4 <MX_LWIP_Init+0x224>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	0619      	lsls	r1, r3, #24
 800508e:	4b59      	ldr	r3, [pc, #356]	@ (80051f4 <MX_LWIP_Init+0x224>)
 8005090:	785b      	ldrb	r3, [r3, #1]
 8005092:	041b      	lsls	r3, r3, #16
 8005094:	4319      	orrs	r1, r3
 8005096:	4b57      	ldr	r3, [pc, #348]	@ (80051f4 <MX_LWIP_Init+0x224>)
 8005098:	789b      	ldrb	r3, [r3, #2]
 800509a:	021b      	lsls	r3, r3, #8
 800509c:	430b      	orrs	r3, r1
 800509e:	4955      	ldr	r1, [pc, #340]	@ (80051f4 <MX_LWIP_Init+0x224>)
 80050a0:	78c9      	ldrb	r1, [r1, #3]
 80050a2:	430b      	orrs	r3, r1
 80050a4:	0e1b      	lsrs	r3, r3, #24
 80050a6:	4313      	orrs	r3, r2
 80050a8:	4a55      	ldr	r2, [pc, #340]	@ (8005200 <MX_LWIP_Init+0x230>)
 80050aa:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80050ac:	4b52      	ldr	r3, [pc, #328]	@ (80051f8 <MX_LWIP_Init+0x228>)
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	061a      	lsls	r2, r3, #24
 80050b2:	4b51      	ldr	r3, [pc, #324]	@ (80051f8 <MX_LWIP_Init+0x228>)
 80050b4:	785b      	ldrb	r3, [r3, #1]
 80050b6:	041b      	lsls	r3, r3, #16
 80050b8:	431a      	orrs	r2, r3
 80050ba:	4b4f      	ldr	r3, [pc, #316]	@ (80051f8 <MX_LWIP_Init+0x228>)
 80050bc:	789b      	ldrb	r3, [r3, #2]
 80050be:	021b      	lsls	r3, r3, #8
 80050c0:	4313      	orrs	r3, r2
 80050c2:	4a4d      	ldr	r2, [pc, #308]	@ (80051f8 <MX_LWIP_Init+0x228>)
 80050c4:	78d2      	ldrb	r2, [r2, #3]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	061a      	lsls	r2, r3, #24
 80050ca:	4b4b      	ldr	r3, [pc, #300]	@ (80051f8 <MX_LWIP_Init+0x228>)
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	0619      	lsls	r1, r3, #24
 80050d0:	4b49      	ldr	r3, [pc, #292]	@ (80051f8 <MX_LWIP_Init+0x228>)
 80050d2:	785b      	ldrb	r3, [r3, #1]
 80050d4:	041b      	lsls	r3, r3, #16
 80050d6:	4319      	orrs	r1, r3
 80050d8:	4b47      	ldr	r3, [pc, #284]	@ (80051f8 <MX_LWIP_Init+0x228>)
 80050da:	789b      	ldrb	r3, [r3, #2]
 80050dc:	021b      	lsls	r3, r3, #8
 80050de:	430b      	orrs	r3, r1
 80050e0:	4945      	ldr	r1, [pc, #276]	@ (80051f8 <MX_LWIP_Init+0x228>)
 80050e2:	78c9      	ldrb	r1, [r1, #3]
 80050e4:	430b      	orrs	r3, r1
 80050e6:	021b      	lsls	r3, r3, #8
 80050e8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80050ec:	431a      	orrs	r2, r3
 80050ee:	4b42      	ldr	r3, [pc, #264]	@ (80051f8 <MX_LWIP_Init+0x228>)
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	0619      	lsls	r1, r3, #24
 80050f4:	4b40      	ldr	r3, [pc, #256]	@ (80051f8 <MX_LWIP_Init+0x228>)
 80050f6:	785b      	ldrb	r3, [r3, #1]
 80050f8:	041b      	lsls	r3, r3, #16
 80050fa:	4319      	orrs	r1, r3
 80050fc:	4b3e      	ldr	r3, [pc, #248]	@ (80051f8 <MX_LWIP_Init+0x228>)
 80050fe:	789b      	ldrb	r3, [r3, #2]
 8005100:	021b      	lsls	r3, r3, #8
 8005102:	430b      	orrs	r3, r1
 8005104:	493c      	ldr	r1, [pc, #240]	@ (80051f8 <MX_LWIP_Init+0x228>)
 8005106:	78c9      	ldrb	r1, [r1, #3]
 8005108:	430b      	orrs	r3, r1
 800510a:	0a1b      	lsrs	r3, r3, #8
 800510c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005110:	431a      	orrs	r2, r3
 8005112:	4b39      	ldr	r3, [pc, #228]	@ (80051f8 <MX_LWIP_Init+0x228>)
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	0619      	lsls	r1, r3, #24
 8005118:	4b37      	ldr	r3, [pc, #220]	@ (80051f8 <MX_LWIP_Init+0x228>)
 800511a:	785b      	ldrb	r3, [r3, #1]
 800511c:	041b      	lsls	r3, r3, #16
 800511e:	4319      	orrs	r1, r3
 8005120:	4b35      	ldr	r3, [pc, #212]	@ (80051f8 <MX_LWIP_Init+0x228>)
 8005122:	789b      	ldrb	r3, [r3, #2]
 8005124:	021b      	lsls	r3, r3, #8
 8005126:	430b      	orrs	r3, r1
 8005128:	4933      	ldr	r1, [pc, #204]	@ (80051f8 <MX_LWIP_Init+0x228>)
 800512a:	78c9      	ldrb	r1, [r1, #3]
 800512c:	430b      	orrs	r3, r1
 800512e:	0e1b      	lsrs	r3, r3, #24
 8005130:	4313      	orrs	r3, r2
 8005132:	4a34      	ldr	r2, [pc, #208]	@ (8005204 <MX_LWIP_Init+0x234>)
 8005134:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005136:	4b31      	ldr	r3, [pc, #196]	@ (80051fc <MX_LWIP_Init+0x22c>)
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	061a      	lsls	r2, r3, #24
 800513c:	4b2f      	ldr	r3, [pc, #188]	@ (80051fc <MX_LWIP_Init+0x22c>)
 800513e:	785b      	ldrb	r3, [r3, #1]
 8005140:	041b      	lsls	r3, r3, #16
 8005142:	431a      	orrs	r2, r3
 8005144:	4b2d      	ldr	r3, [pc, #180]	@ (80051fc <MX_LWIP_Init+0x22c>)
 8005146:	789b      	ldrb	r3, [r3, #2]
 8005148:	021b      	lsls	r3, r3, #8
 800514a:	4313      	orrs	r3, r2
 800514c:	4a2b      	ldr	r2, [pc, #172]	@ (80051fc <MX_LWIP_Init+0x22c>)
 800514e:	78d2      	ldrb	r2, [r2, #3]
 8005150:	4313      	orrs	r3, r2
 8005152:	061a      	lsls	r2, r3, #24
 8005154:	4b29      	ldr	r3, [pc, #164]	@ (80051fc <MX_LWIP_Init+0x22c>)
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	0619      	lsls	r1, r3, #24
 800515a:	4b28      	ldr	r3, [pc, #160]	@ (80051fc <MX_LWIP_Init+0x22c>)
 800515c:	785b      	ldrb	r3, [r3, #1]
 800515e:	041b      	lsls	r3, r3, #16
 8005160:	4319      	orrs	r1, r3
 8005162:	4b26      	ldr	r3, [pc, #152]	@ (80051fc <MX_LWIP_Init+0x22c>)
 8005164:	789b      	ldrb	r3, [r3, #2]
 8005166:	021b      	lsls	r3, r3, #8
 8005168:	430b      	orrs	r3, r1
 800516a:	4924      	ldr	r1, [pc, #144]	@ (80051fc <MX_LWIP_Init+0x22c>)
 800516c:	78c9      	ldrb	r1, [r1, #3]
 800516e:	430b      	orrs	r3, r1
 8005170:	021b      	lsls	r3, r3, #8
 8005172:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005176:	431a      	orrs	r2, r3
 8005178:	4b20      	ldr	r3, [pc, #128]	@ (80051fc <MX_LWIP_Init+0x22c>)
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	0619      	lsls	r1, r3, #24
 800517e:	4b1f      	ldr	r3, [pc, #124]	@ (80051fc <MX_LWIP_Init+0x22c>)
 8005180:	785b      	ldrb	r3, [r3, #1]
 8005182:	041b      	lsls	r3, r3, #16
 8005184:	4319      	orrs	r1, r3
 8005186:	4b1d      	ldr	r3, [pc, #116]	@ (80051fc <MX_LWIP_Init+0x22c>)
 8005188:	789b      	ldrb	r3, [r3, #2]
 800518a:	021b      	lsls	r3, r3, #8
 800518c:	430b      	orrs	r3, r1
 800518e:	491b      	ldr	r1, [pc, #108]	@ (80051fc <MX_LWIP_Init+0x22c>)
 8005190:	78c9      	ldrb	r1, [r1, #3]
 8005192:	430b      	orrs	r3, r1
 8005194:	0a1b      	lsrs	r3, r3, #8
 8005196:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800519a:	431a      	orrs	r2, r3
 800519c:	4b17      	ldr	r3, [pc, #92]	@ (80051fc <MX_LWIP_Init+0x22c>)
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	0619      	lsls	r1, r3, #24
 80051a2:	4b16      	ldr	r3, [pc, #88]	@ (80051fc <MX_LWIP_Init+0x22c>)
 80051a4:	785b      	ldrb	r3, [r3, #1]
 80051a6:	041b      	lsls	r3, r3, #16
 80051a8:	4319      	orrs	r1, r3
 80051aa:	4b14      	ldr	r3, [pc, #80]	@ (80051fc <MX_LWIP_Init+0x22c>)
 80051ac:	789b      	ldrb	r3, [r3, #2]
 80051ae:	021b      	lsls	r3, r3, #8
 80051b0:	430b      	orrs	r3, r1
 80051b2:	4912      	ldr	r1, [pc, #72]	@ (80051fc <MX_LWIP_Init+0x22c>)
 80051b4:	78c9      	ldrb	r1, [r1, #3]
 80051b6:	430b      	orrs	r3, r1
 80051b8:	0e1b      	lsrs	r3, r3, #24
 80051ba:	4313      	orrs	r3, r2
 80051bc:	4a12      	ldr	r2, [pc, #72]	@ (8005208 <MX_LWIP_Init+0x238>)
 80051be:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80051c0:	4b12      	ldr	r3, [pc, #72]	@ (800520c <MX_LWIP_Init+0x23c>)
 80051c2:	9302      	str	r3, [sp, #8]
 80051c4:	4b12      	ldr	r3, [pc, #72]	@ (8005210 <MX_LWIP_Init+0x240>)
 80051c6:	9301      	str	r3, [sp, #4]
 80051c8:	2300      	movs	r3, #0
 80051ca:	9300      	str	r3, [sp, #0]
 80051cc:	4b0e      	ldr	r3, [pc, #56]	@ (8005208 <MX_LWIP_Init+0x238>)
 80051ce:	4a0d      	ldr	r2, [pc, #52]	@ (8005204 <MX_LWIP_Init+0x234>)
 80051d0:	490b      	ldr	r1, [pc, #44]	@ (8005200 <MX_LWIP_Init+0x230>)
 80051d2:	4810      	ldr	r0, [pc, #64]	@ (8005214 <MX_LWIP_Init+0x244>)
 80051d4:	f001 f94a 	bl	800646c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80051d8:	480e      	ldr	r0, [pc, #56]	@ (8005214 <MX_LWIP_Init+0x244>)
 80051da:	f001 faf9 	bl	80067d0 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80051de:	480d      	ldr	r0, [pc, #52]	@ (8005214 <MX_LWIP_Init+0x244>)
 80051e0:	f001 fb06 	bl	80067f0 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80051e4:	490c      	ldr	r1, [pc, #48]	@ (8005218 <MX_LWIP_Init+0x248>)
 80051e6:	480b      	ldr	r0, [pc, #44]	@ (8005214 <MX_LWIP_Init+0x244>)
 80051e8:	f001 fc04 	bl	80069f4 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80051ec:	bf00      	nop
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	20000798 	.word	0x20000798
 80051f8:	2000079c 	.word	0x2000079c
 80051fc:	200007a0 	.word	0x200007a0
 8005200:	2000078c 	.word	0x2000078c
 8005204:	20000790 	.word	0x20000790
 8005208:	20000794 	.word	0x20000794
 800520c:	080105f1 	.word	0x080105f1
 8005210:	08005591 	.word	0x08005591
 8005214:	20000758 	.word	0x20000758
 8005218:	0800526d 	.word	0x0800526d

0800521c <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8005224:	f7fb ffe8 	bl	80011f8 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	4b08      	ldr	r3, [pc, #32]	@ (800524c <Ethernet_Link_Periodic_Handle+0x30>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	2b63      	cmp	r3, #99	@ 0x63
 8005232:	d907      	bls.n	8005244 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8005234:	f7fb ffe0 	bl	80011f8 <HAL_GetTick>
 8005238:	4603      	mov	r3, r0
 800523a:	4a04      	ldr	r2, [pc, #16]	@ (800524c <Ethernet_Link_Periodic_Handle+0x30>)
 800523c:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 fafc 	bl	800583c <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8005244:	bf00      	nop
 8005246:	3708      	adds	r7, #8
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	20000754 	.word	0x20000754

08005250 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8005254:	4804      	ldr	r0, [pc, #16]	@ (8005268 <MX_LWIP_Process+0x18>)
 8005256:	f000 f97b 	bl	8005550 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800525a:	f008 fda9 	bl	800ddb0 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 800525e:	4802      	ldr	r0, [pc, #8]	@ (8005268 <MX_LWIP_Process+0x18>)
 8005260:	f7ff ffdc 	bl	800521c <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8005264:	bf00      	nop
 8005266:	bd80      	pop	{r7, pc}
 8005268:	20000758 	.word	0x20000758

0800526c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <SCB_InvalidateDCache_by_Addr>:
{
 8005280:	b480      	push	{r7}
 8005282:	b087      	sub	sp, #28
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8005292:	2320      	movs	r3, #32
 8005294:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005296:	f3bf 8f4f 	dsb	sy
}
 800529a:	bf00      	nop
    while (op_size > 0) {
 800529c:	e00b      	b.n	80052b6 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800529e:	4a0d      	ldr	r2, [pc, #52]	@ (80052d4 <SCB_InvalidateDCache_by_Addr+0x54>)
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	4413      	add	r3, r2
 80052ac:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	dcf0      	bgt.n	800529e <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 80052bc:	f3bf 8f4f 	dsb	sy
}
 80052c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80052c2:	f3bf 8f6f 	isb	sy
}
 80052c6:	bf00      	nop
}
 80052c8:	bf00      	nop
 80052ca:	371c      	adds	r7, #28
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr
 80052d4:	e000ed00 	.word	0xe000ed00

080052d8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80052e0:	2300      	movs	r3, #0
 80052e2:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80052e4:	4b44      	ldr	r3, [pc, #272]	@ (80053f8 <low_level_init+0x120>)
 80052e6:	4a45      	ldr	r2, [pc, #276]	@ (80053fc <low_level_init+0x124>)
 80052e8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80052ea:	2300      	movs	r3, #0
 80052ec:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80052ee:	2380      	movs	r3, #128	@ 0x80
 80052f0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80052f2:	23e1      	movs	r3, #225	@ 0xe1
 80052f4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80052f6:	2300      	movs	r3, #0
 80052f8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80052fa:	2300      	movs	r3, #0
 80052fc:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80052fe:	2300      	movs	r3, #0
 8005300:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005302:	4a3d      	ldr	r2, [pc, #244]	@ (80053f8 <low_level_init+0x120>)
 8005304:	f107 0308 	add.w	r3, r7, #8
 8005308:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800530a:	4b3b      	ldr	r3, [pc, #236]	@ (80053f8 <low_level_init+0x120>)
 800530c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005310:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005312:	4b39      	ldr	r3, [pc, #228]	@ (80053f8 <low_level_init+0x120>)
 8005314:	4a3a      	ldr	r2, [pc, #232]	@ (8005400 <low_level_init+0x128>)
 8005316:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005318:	4b37      	ldr	r3, [pc, #220]	@ (80053f8 <low_level_init+0x120>)
 800531a:	4a3a      	ldr	r2, [pc, #232]	@ (8005404 <low_level_init+0x12c>)
 800531c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800531e:	4b36      	ldr	r3, [pc, #216]	@ (80053f8 <low_level_init+0x120>)
 8005320:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005324:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005326:	4834      	ldr	r0, [pc, #208]	@ (80053f8 <low_level_init+0x120>)
 8005328:	f7fc f87c 	bl	8001424 <HAL_ETH_Init>
 800532c:	4603      	mov	r3, r0
 800532e:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005330:	2238      	movs	r2, #56	@ 0x38
 8005332:	2100      	movs	r1, #0
 8005334:	4834      	ldr	r0, [pc, #208]	@ (8005408 <low_level_init+0x130>)
 8005336:	f00b fcc1 	bl	8010cbc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800533a:	4b33      	ldr	r3, [pc, #204]	@ (8005408 <low_level_init+0x130>)
 800533c:	2221      	movs	r2, #33	@ 0x21
 800533e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005340:	4b31      	ldr	r3, [pc, #196]	@ (8005408 <low_level_init+0x130>)
 8005342:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8005346:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005348:	4b2f      	ldr	r3, [pc, #188]	@ (8005408 <low_level_init+0x130>)
 800534a:	2200      	movs	r2, #0
 800534c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800534e:	482f      	ldr	r0, [pc, #188]	@ (800540c <low_level_init+0x134>)
 8005350:	f000 ff54 	bl	80061fc <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2206      	movs	r2, #6
 8005358:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800535c:	4b26      	ldr	r3, [pc, #152]	@ (80053f8 <low_level_init+0x120>)
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	781a      	ldrb	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005368:	4b23      	ldr	r3, [pc, #140]	@ (80053f8 <low_level_init+0x120>)
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	785a      	ldrb	r2, [r3, #1]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005374:	4b20      	ldr	r3, [pc, #128]	@ (80053f8 <low_level_init+0x120>)
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	789a      	ldrb	r2, [r3, #2]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005380:	4b1d      	ldr	r3, [pc, #116]	@ (80053f8 <low_level_init+0x120>)
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	78da      	ldrb	r2, [r3, #3]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800538c:	4b1a      	ldr	r3, [pc, #104]	@ (80053f8 <low_level_init+0x120>)
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	791a      	ldrb	r2, [r3, #4]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005398:	4b17      	ldr	r3, [pc, #92]	@ (80053f8 <low_level_init+0x120>)
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	795a      	ldrb	r2, [r3, #5]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80053aa:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80053b2:	f043 030a 	orr.w	r3, r3, #10
 80053b6:	b2da      	uxtb	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80053be:	4914      	ldr	r1, [pc, #80]	@ (8005410 <low_level_init+0x138>)
 80053c0:	4814      	ldr	r0, [pc, #80]	@ (8005414 <low_level_init+0x13c>)
 80053c2:	f7fb fdc2 	bl	8000f4a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 80053c6:	4813      	ldr	r0, [pc, #76]	@ (8005414 <low_level_init+0x13c>)
 80053c8:	f7fb fdf1 	bl	8000fae <LAN8742_Init>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d006      	beq.n	80053e0 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f001 fade 	bl	8006994 <netif_set_link_down>
    netif_set_down(netif);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f001 fa75 	bl	80068c8 <netif_set_down>
 80053de:	e008      	b.n	80053f2 <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 80053e0:	7bfb      	ldrb	r3, [r7, #15]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d103      	bne.n	80053ee <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 fa28 	bl	800583c <ethernet_link_check_state>
 80053ec:	e001      	b.n	80053f2 <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 80053ee:	f7fb fb73 	bl	8000ad8 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	20005130 	.word	0x20005130
 80053fc:	40028000 	.word	0x40028000
 8005400:	20000128 	.word	0x20000128
 8005404:	20000088 	.word	0x20000088
 8005408:	200051e0 	.word	0x200051e0
 800540c:	08014f20 	.word	0x08014f20
 8005410:	2000000c 	.word	0x2000000c
 8005414:	20005218 	.word	0x20005218

08005418 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b092      	sub	sp, #72	@ 0x48
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005422:	2300      	movs	r3, #0
 8005424:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8005426:	2300      	movs	r3, #0
 8005428:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800542a:	2300      	movs	r3, #0
 800542c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005430:	f107 030c 	add.w	r3, r7, #12
 8005434:	2230      	movs	r2, #48	@ 0x30
 8005436:	2100      	movs	r1, #0
 8005438:	4618      	mov	r0, r3
 800543a:	f00b fc3f 	bl	8010cbc <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800543e:	f107 030c 	add.w	r3, r7, #12
 8005442:	2230      	movs	r2, #48	@ 0x30
 8005444:	2100      	movs	r1, #0
 8005446:	4618      	mov	r0, r3
 8005448:	f00b fc38 	bl	8010cbc <memset>

  for(q = p; q != NULL; q = q->next)
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005450:	e045      	b.n	80054de <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005452:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005454:	2b03      	cmp	r3, #3
 8005456:	d902      	bls.n	800545e <low_level_output+0x46>
      return ERR_IF;
 8005458:	f06f 030b 	mvn.w	r3, #11
 800545c:	e055      	b.n	800550a <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800545e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005460:	6859      	ldr	r1, [r3, #4]
 8005462:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005464:	4613      	mov	r3, r2
 8005466:	005b      	lsls	r3, r3, #1
 8005468:	4413      	add	r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	3348      	adds	r3, #72	@ 0x48
 800546e:	443b      	add	r3, r7
 8005470:	3b3c      	subs	r3, #60	@ 0x3c
 8005472:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005474:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005476:	895b      	ldrh	r3, [r3, #10]
 8005478:	4619      	mov	r1, r3
 800547a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800547c:	4613      	mov	r3, r2
 800547e:	005b      	lsls	r3, r3, #1
 8005480:	4413      	add	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	3348      	adds	r3, #72	@ 0x48
 8005486:	443b      	add	r3, r7
 8005488:	3b38      	subs	r3, #56	@ 0x38
 800548a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800548c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800548e:	2b00      	cmp	r3, #0
 8005490:	d011      	beq.n	80054b6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005492:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005494:	1e5a      	subs	r2, r3, #1
 8005496:	f107 000c 	add.w	r0, r7, #12
 800549a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800549c:	460b      	mov	r3, r1
 800549e:	005b      	lsls	r3, r3, #1
 80054a0:	440b      	add	r3, r1
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	18c1      	adds	r1, r0, r3
 80054a6:	4613      	mov	r3, r2
 80054a8:	005b      	lsls	r3, r3, #1
 80054aa:	4413      	add	r3, r2
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	3348      	adds	r3, #72	@ 0x48
 80054b0:	443b      	add	r3, r7
 80054b2:	3b34      	subs	r3, #52	@ 0x34
 80054b4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80054b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d109      	bne.n	80054d2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80054be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054c0:	4613      	mov	r3, r2
 80054c2:	005b      	lsls	r3, r3, #1
 80054c4:	4413      	add	r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	3348      	adds	r3, #72	@ 0x48
 80054ca:	443b      	add	r3, r7
 80054cc:	3b34      	subs	r3, #52	@ 0x34
 80054ce:	2200      	movs	r2, #0
 80054d0:	601a      	str	r2, [r3, #0]
    }

    i++;
 80054d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054d4:	3301      	adds	r3, #1
 80054d6:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 80054d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80054de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1b6      	bne.n	8005452 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	891b      	ldrh	r3, [r3, #8]
 80054e8:	461a      	mov	r2, r3
 80054ea:	4b0a      	ldr	r3, [pc, #40]	@ (8005514 <low_level_output+0xfc>)
 80054ec:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80054ee:	4a09      	ldr	r2, [pc, #36]	@ (8005514 <low_level_output+0xfc>)
 80054f0:	f107 030c 	add.w	r3, r7, #12
 80054f4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80054f6:	4a07      	ldr	r2, [pc, #28]	@ (8005514 <low_level_output+0xfc>)
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80054fc:	2214      	movs	r2, #20
 80054fe:	4905      	ldr	r1, [pc, #20]	@ (8005514 <low_level_output+0xfc>)
 8005500:	4805      	ldr	r0, [pc, #20]	@ (8005518 <low_level_output+0x100>)
 8005502:	f7fc f8e1 	bl	80016c8 <HAL_ETH_Transmit>

  return errval;
 8005506:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800550a:	4618      	mov	r0, r3
 800550c:	3748      	adds	r7, #72	@ 0x48
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	200051e0 	.word	0x200051e0
 8005518:	20005130 	.word	0x20005130

0800551c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005524:	2300      	movs	r3, #0
 8005526:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005528:	4b07      	ldr	r3, [pc, #28]	@ (8005548 <low_level_input+0x2c>)
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d105      	bne.n	800553c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005530:	f107 030c 	add.w	r3, r7, #12
 8005534:	4619      	mov	r1, r3
 8005536:	4805      	ldr	r0, [pc, #20]	@ (800554c <low_level_input+0x30>)
 8005538:	f7fc f95a 	bl	80017f0 <HAL_ETH_ReadData>
  }

  return p;
 800553c:	68fb      	ldr	r3, [r7, #12]
}
 800553e:	4618      	mov	r0, r3
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	2000512c 	.word	0x2000512c
 800554c:	20005130 	.word	0x20005130

08005550 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005558:	2300      	movs	r3, #0
 800555a:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f7ff ffdd 	bl	800551c <low_level_input>
 8005562:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00a      	beq.n	8005580 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	6879      	ldr	r1, [r7, #4]
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	4798      	blx	r3
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d002      	beq.n	8005580 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f001 fdba 	bl	80070f4 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1ea      	bne.n	800555c <ethernetif_input+0xc>
}
 8005586:	bf00      	nop
 8005588:	bf00      	nop
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d106      	bne.n	80055ac <ethernetif_init+0x1c>
 800559e:	4b0e      	ldr	r3, [pc, #56]	@ (80055d8 <ethernetif_init+0x48>)
 80055a0:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80055a4:	490d      	ldr	r1, [pc, #52]	@ (80055dc <ethernetif_init+0x4c>)
 80055a6:	480e      	ldr	r0, [pc, #56]	@ (80055e0 <ethernetif_init+0x50>)
 80055a8:	f00b fa28 	bl	80109fc <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2273      	movs	r2, #115	@ 0x73
 80055b0:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2274      	movs	r2, #116	@ 0x74
 80055b8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a09      	ldr	r2, [pc, #36]	@ (80055e4 <ethernetif_init+0x54>)
 80055c0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a08      	ldr	r2, [pc, #32]	@ (80055e8 <ethernetif_init+0x58>)
 80055c6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7ff fe85 	bl	80052d8 <low_level_init>

  return ERR_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3708      	adds	r7, #8
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	08011944 	.word	0x08011944
 80055dc:	08011960 	.word	0x08011960
 80055e0:	08011970 	.word	0x08011970
 80055e4:	0800ea9d 	.word	0x0800ea9d
 80055e8:	08005419 	.word	0x08005419

080055ec <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80055f8:	68f9      	ldr	r1, [r7, #12]
 80055fa:	4807      	ldr	r0, [pc, #28]	@ (8005618 <pbuf_free_custom+0x2c>)
 80055fc:	f000 fee0 	bl	80063c0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005600:	4b06      	ldr	r3, [pc, #24]	@ (800561c <pbuf_free_custom+0x30>)
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d102      	bne.n	800560e <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005608:	4b04      	ldr	r3, [pc, #16]	@ (800561c <pbuf_free_custom+0x30>)
 800560a:	2200      	movs	r2, #0
 800560c:	701a      	strb	r2, [r3, #0]
  }
}
 800560e:	bf00      	nop
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	08014f20 	.word	0x08014f20
 800561c:	2000512c 	.word	0x2000512c

08005620 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005624:	f7fb fde8 	bl	80011f8 <HAL_GetTick>
 8005628:	4603      	mov	r3, r0
}
 800562a:	4618      	mov	r0, r3
 800562c:	bd80      	pop	{r7, pc}
	...

08005630 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b08e      	sub	sp, #56	@ 0x38
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005638:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800563c:	2200      	movs	r2, #0
 800563e:	601a      	str	r2, [r3, #0]
 8005640:	605a      	str	r2, [r3, #4]
 8005642:	609a      	str	r2, [r3, #8]
 8005644:	60da      	str	r2, [r3, #12]
 8005646:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a4e      	ldr	r2, [pc, #312]	@ (8005788 <HAL_ETH_MspInit+0x158>)
 800564e:	4293      	cmp	r3, r2
 8005650:	f040 8096 	bne.w	8005780 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005654:	4b4d      	ldr	r3, [pc, #308]	@ (800578c <HAL_ETH_MspInit+0x15c>)
 8005656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005658:	4a4c      	ldr	r2, [pc, #304]	@ (800578c <HAL_ETH_MspInit+0x15c>)
 800565a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800565e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005660:	4b4a      	ldr	r3, [pc, #296]	@ (800578c <HAL_ETH_MspInit+0x15c>)
 8005662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005664:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005668:	623b      	str	r3, [r7, #32]
 800566a:	6a3b      	ldr	r3, [r7, #32]
 800566c:	4b47      	ldr	r3, [pc, #284]	@ (800578c <HAL_ETH_MspInit+0x15c>)
 800566e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005670:	4a46      	ldr	r2, [pc, #280]	@ (800578c <HAL_ETH_MspInit+0x15c>)
 8005672:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005676:	6313      	str	r3, [r2, #48]	@ 0x30
 8005678:	4b44      	ldr	r3, [pc, #272]	@ (800578c <HAL_ETH_MspInit+0x15c>)
 800567a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800567c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005680:	61fb      	str	r3, [r7, #28]
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	4b41      	ldr	r3, [pc, #260]	@ (800578c <HAL_ETH_MspInit+0x15c>)
 8005686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005688:	4a40      	ldr	r2, [pc, #256]	@ (800578c <HAL_ETH_MspInit+0x15c>)
 800568a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800568e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005690:	4b3e      	ldr	r3, [pc, #248]	@ (800578c <HAL_ETH_MspInit+0x15c>)
 8005692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005694:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005698:	61bb      	str	r3, [r7, #24]
 800569a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800569c:	4b3b      	ldr	r3, [pc, #236]	@ (800578c <HAL_ETH_MspInit+0x15c>)
 800569e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056a0:	4a3a      	ldr	r2, [pc, #232]	@ (800578c <HAL_ETH_MspInit+0x15c>)
 80056a2:	f043 0304 	orr.w	r3, r3, #4
 80056a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80056a8:	4b38      	ldr	r3, [pc, #224]	@ (800578c <HAL_ETH_MspInit+0x15c>)
 80056aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ac:	f003 0304 	and.w	r3, r3, #4
 80056b0:	617b      	str	r3, [r7, #20]
 80056b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056b4:	4b35      	ldr	r3, [pc, #212]	@ (800578c <HAL_ETH_MspInit+0x15c>)
 80056b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b8:	4a34      	ldr	r2, [pc, #208]	@ (800578c <HAL_ETH_MspInit+0x15c>)
 80056ba:	f043 0301 	orr.w	r3, r3, #1
 80056be:	6313      	str	r3, [r2, #48]	@ 0x30
 80056c0:	4b32      	ldr	r3, [pc, #200]	@ (800578c <HAL_ETH_MspInit+0x15c>)
 80056c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	613b      	str	r3, [r7, #16]
 80056ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056cc:	4b2f      	ldr	r3, [pc, #188]	@ (800578c <HAL_ETH_MspInit+0x15c>)
 80056ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056d0:	4a2e      	ldr	r2, [pc, #184]	@ (800578c <HAL_ETH_MspInit+0x15c>)
 80056d2:	f043 0302 	orr.w	r3, r3, #2
 80056d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80056d8:	4b2c      	ldr	r3, [pc, #176]	@ (800578c <HAL_ETH_MspInit+0x15c>)
 80056da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	60fb      	str	r3, [r7, #12]
 80056e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80056e4:	4b29      	ldr	r3, [pc, #164]	@ (800578c <HAL_ETH_MspInit+0x15c>)
 80056e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056e8:	4a28      	ldr	r2, [pc, #160]	@ (800578c <HAL_ETH_MspInit+0x15c>)
 80056ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80056f0:	4b26      	ldr	r3, [pc, #152]	@ (800578c <HAL_ETH_MspInit+0x15c>)
 80056f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056f8:	60bb      	str	r3, [r7, #8]
 80056fa:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80056fc:	2332      	movs	r3, #50	@ 0x32
 80056fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005700:	2302      	movs	r3, #2
 8005702:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005704:	2300      	movs	r3, #0
 8005706:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005708:	2303      	movs	r3, #3
 800570a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800570c:	230b      	movs	r3, #11
 800570e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005710:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005714:	4619      	mov	r1, r3
 8005716:	481e      	ldr	r0, [pc, #120]	@ (8005790 <HAL_ETH_MspInit+0x160>)
 8005718:	f7fc ffb6 	bl	8002688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800571c:	2386      	movs	r3, #134	@ 0x86
 800571e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005720:	2302      	movs	r3, #2
 8005722:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005724:	2300      	movs	r3, #0
 8005726:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005728:	2303      	movs	r3, #3
 800572a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800572c:	230b      	movs	r3, #11
 800572e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005730:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005734:	4619      	mov	r1, r3
 8005736:	4817      	ldr	r0, [pc, #92]	@ (8005794 <HAL_ETH_MspInit+0x164>)
 8005738:	f7fc ffa6 	bl	8002688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800573c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005740:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005742:	2302      	movs	r3, #2
 8005744:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005746:	2300      	movs	r3, #0
 8005748:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800574a:	2303      	movs	r3, #3
 800574c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800574e:	230b      	movs	r3, #11
 8005750:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8005752:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005756:	4619      	mov	r1, r3
 8005758:	480f      	ldr	r0, [pc, #60]	@ (8005798 <HAL_ETH_MspInit+0x168>)
 800575a:	f7fc ff95 	bl	8002688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800575e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8005762:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005764:	2302      	movs	r3, #2
 8005766:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005768:	2300      	movs	r3, #0
 800576a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800576c:	2303      	movs	r3, #3
 800576e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005770:	230b      	movs	r3, #11
 8005772:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005774:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005778:	4619      	mov	r1, r3
 800577a:	4808      	ldr	r0, [pc, #32]	@ (800579c <HAL_ETH_MspInit+0x16c>)
 800577c:	f7fc ff84 	bl	8002688 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005780:	bf00      	nop
 8005782:	3738      	adds	r7, #56	@ 0x38
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	40028000 	.word	0x40028000
 800578c:	40023800 	.word	0x40023800
 8005790:	40020800 	.word	0x40020800
 8005794:	40020000 	.word	0x40020000
 8005798:	40020400 	.word	0x40020400
 800579c:	40021800 	.word	0x40021800

080057a0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80057a4:	4802      	ldr	r0, [pc, #8]	@ (80057b0 <ETH_PHY_IO_Init+0x10>)
 80057a6:	f7fc fb0d 	bl	8001dc4 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	20005130 	.word	0x20005130

080057b4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80057b4:	b480      	push	{r7}
 80057b6:	af00      	add	r7, sp, #0
  return 0;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	68f9      	ldr	r1, [r7, #12]
 80057d6:	4807      	ldr	r0, [pc, #28]	@ (80057f4 <ETH_PHY_IO_ReadReg+0x30>)
 80057d8:	f7fc f94e 	bl	8001a78 <HAL_ETH_ReadPHYRegister>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d002      	beq.n	80057e8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80057e2:	f04f 33ff 	mov.w	r3, #4294967295
 80057e6:	e000      	b.n	80057ea <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	20005130 	.word	0x20005130

080057f8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	68f9      	ldr	r1, [r7, #12]
 800580a:	4807      	ldr	r0, [pc, #28]	@ (8005828 <ETH_PHY_IO_WriteReg+0x30>)
 800580c:	f7fc f97f 	bl	8001b0e <HAL_ETH_WritePHYRegister>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d002      	beq.n	800581c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8005816:	f04f 33ff 	mov.w	r3, #4294967295
 800581a:	e000      	b.n	800581e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	20005130 	.word	0x20005130

0800582c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005830:	f7fb fce2 	bl	80011f8 <HAL_GetTick>
 8005834:	4603      	mov	r3, r0
}
 8005836:	4618      	mov	r0, r3
 8005838:	bd80      	pop	{r7, pc}
	...

0800583c <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b0a0      	sub	sp, #128	@ 0x80
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005844:	f107 030c 	add.w	r3, r7, #12
 8005848:	2264      	movs	r2, #100	@ 0x64
 800584a:	2100      	movs	r1, #0
 800584c:	4618      	mov	r0, r3
 800584e:	f00b fa35 	bl	8010cbc <memset>
  int32_t PHYLinkState = 0;
 8005852:	2300      	movs	r3, #0
 8005854:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8005856:	2300      	movs	r3, #0
 8005858:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800585a:	2300      	movs	r3, #0
 800585c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800585e:	2300      	movs	r3, #0
 8005860:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005862:	483a      	ldr	r0, [pc, #232]	@ (800594c <ethernet_link_check_state+0x110>)
 8005864:	f7fb fbf0 	bl	8001048 <LAN8742_GetLinkState>
 8005868:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005870:	089b      	lsrs	r3, r3, #2
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	b2db      	uxtb	r3, r3
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00c      	beq.n	8005896 <ethernet_link_check_state+0x5a>
 800587c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800587e:	2b01      	cmp	r3, #1
 8005880:	dc09      	bgt.n	8005896 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8005882:	4833      	ldr	r0, [pc, #204]	@ (8005950 <ethernet_link_check_state+0x114>)
 8005884:	f7fb fec7 	bl	8001616 <HAL_ETH_Stop>
    netif_set_down(netif);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f001 f81d 	bl	80068c8 <netif_set_down>
    netif_set_link_down(netif);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f001 f880 	bl	8006994 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8005894:	e055      	b.n	8005942 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800589c:	f003 0304 	and.w	r3, r3, #4
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d14e      	bne.n	8005942 <ethernet_link_check_state+0x106>
 80058a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	dd4b      	ble.n	8005942 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80058aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058ac:	3b02      	subs	r3, #2
 80058ae:	2b03      	cmp	r3, #3
 80058b0:	d82a      	bhi.n	8005908 <ethernet_link_check_state+0xcc>
 80058b2:	a201      	add	r2, pc, #4	@ (adr r2, 80058b8 <ethernet_link_check_state+0x7c>)
 80058b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b8:	080058c9 	.word	0x080058c9
 80058bc:	080058db 	.word	0x080058db
 80058c0:	080058eb 	.word	0x080058eb
 80058c4:	080058fb 	.word	0x080058fb
      duplex = ETH_FULLDUPLEX_MODE;
 80058c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80058cc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80058ce:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80058d2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80058d4:	2301      	movs	r3, #1
 80058d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80058d8:	e017      	b.n	800590a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80058da:	2300      	movs	r3, #0
 80058dc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80058de:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80058e2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80058e4:	2301      	movs	r3, #1
 80058e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80058e8:	e00f      	b.n	800590a <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80058ea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80058ee:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80058f0:	2300      	movs	r3, #0
 80058f2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80058f4:	2301      	movs	r3, #1
 80058f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80058f8:	e007      	b.n	800590a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80058fa:	2300      	movs	r3, #0
 80058fc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80058fe:	2300      	movs	r3, #0
 8005900:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005902:	2301      	movs	r3, #1
 8005904:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005906:	e000      	b.n	800590a <ethernet_link_check_state+0xce>
      break;
 8005908:	bf00      	nop
    if(linkchanged)
 800590a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800590c:	2b00      	cmp	r3, #0
 800590e:	d018      	beq.n	8005942 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005910:	f107 030c 	add.w	r3, r7, #12
 8005914:	4619      	mov	r1, r3
 8005916:	480e      	ldr	r0, [pc, #56]	@ (8005950 <ethernet_link_check_state+0x114>)
 8005918:	f7fc f942 	bl	8001ba0 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800591c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800591e:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8005920:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005922:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005924:	f107 030c 	add.w	r3, r7, #12
 8005928:	4619      	mov	r1, r3
 800592a:	4809      	ldr	r0, [pc, #36]	@ (8005950 <ethernet_link_check_state+0x114>)
 800592c:	f7fc fa2f 	bl	8001d8e <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8005930:	4807      	ldr	r0, [pc, #28]	@ (8005950 <ethernet_link_check_state+0x114>)
 8005932:	f7fb fe11 	bl	8001558 <HAL_ETH_Start>
      netif_set_up(netif);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 ff5a 	bl	80067f0 <netif_set_up>
      netif_set_link_up(netif);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 fff5 	bl	800692c <netif_set_link_up>
}
 8005942:	bf00      	nop
 8005944:	3780      	adds	r7, #128	@ 0x80
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	20005218 	.word	0x20005218
 8005950:	20005130 	.word	0x20005130

08005954 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b086      	sub	sp, #24
 8005958:	af02      	add	r7, sp, #8
 800595a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800595c:	4812      	ldr	r0, [pc, #72]	@ (80059a8 <HAL_ETH_RxAllocateCallback+0x54>)
 800595e:	f000 fcc1 	bl	80062e4 <memp_malloc_pool>
 8005962:	60f8      	str	r0, [r7, #12]
  if (p)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d014      	beq.n	8005994 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f103 0220 	add.w	r2, r3, #32
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	4a0d      	ldr	r2, [pc, #52]	@ (80059ac <HAL_ETH_RxAllocateCallback+0x58>)
 8005978:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005982:	9201      	str	r2, [sp, #4]
 8005984:	9300      	str	r3, [sp, #0]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2241      	movs	r2, #65	@ 0x41
 800598a:	2100      	movs	r1, #0
 800598c:	2000      	movs	r0, #0
 800598e:	f001 f9f7 	bl	8006d80 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8005992:	e005      	b.n	80059a0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005994:	4b06      	ldr	r3, [pc, #24]	@ (80059b0 <HAL_ETH_RxAllocateCallback+0x5c>)
 8005996:	2201      	movs	r2, #1
 8005998:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	601a      	str	r2, [r3, #0]
}
 80059a0:	bf00      	nop
 80059a2:	3710      	adds	r7, #16
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	08014f20 	.word	0x08014f20
 80059ac:	080055ed 	.word	0x080055ed
 80059b0:	2000512c 	.word	0x2000512c

080059b4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b088      	sub	sp, #32
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
 80059c0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80059ca:	2300      	movs	r3, #0
 80059cc:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	3b20      	subs	r3, #32
 80059d2:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	2200      	movs	r2, #0
 80059d8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	2200      	movs	r2, #0
 80059de:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	887a      	ldrh	r2, [r7, #2]
 80059e4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d103      	bne.n	80059f6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	69fa      	ldr	r2, [r7, #28]
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	e003      	b.n	80059fe <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	69fa      	ldr	r2, [r7, #28]
 80059fc:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	69fa      	ldr	r2, [r7, #28]
 8005a02:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	61fb      	str	r3, [r7, #28]
 8005a0a:	e009      	b.n	8005a20 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	891a      	ldrh	r2, [r3, #8]
 8005a10:	887b      	ldrh	r3, [r7, #2]
 8005a12:	4413      	add	r3, r2
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	61fb      	str	r3, [r7, #28]
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1f2      	bne.n	8005a0c <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8005a26:	887b      	ldrh	r3, [r7, #2]
 8005a28:	4619      	mov	r1, r3
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7ff fc28 	bl	8005280 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005a30:	bf00      	nop
 8005a32:	3720      	adds	r7, #32
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	4603      	mov	r3, r0
 8005a40:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8005a42:	88fb      	ldrh	r3, [r7, #6]
 8005a44:	021b      	lsls	r3, r3, #8
 8005a46:	b21a      	sxth	r2, r3
 8005a48:	88fb      	ldrh	r3, [r7, #6]
 8005a4a:	0a1b      	lsrs	r3, r3, #8
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	b21b      	sxth	r3, r3
 8005a50:	4313      	orrs	r3, r2
 8005a52:	b21b      	sxth	r3, r3
 8005a54:	b29b      	uxth	r3, r3
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	370c      	adds	r7, #12
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr

08005a62 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8005a62:	b480      	push	{r7}
 8005a64:	b083      	sub	sp, #12
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	061a      	lsls	r2, r3, #24
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	021b      	lsls	r3, r3, #8
 8005a72:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005a76:	431a      	orrs	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	0a1b      	lsrs	r3, r3, #8
 8005a7c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005a80:	431a      	orrs	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	0e1b      	lsrs	r3, r3, #24
 8005a86:	4313      	orrs	r3, r2
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8005a9e:	f000 f8d5 	bl	8005c4c <mem_init>
  memp_init();
 8005aa2:	f000 fbdb 	bl	800625c <memp_init>
  pbuf_init();
  netif_init();
 8005aa6:	f000 fcd9 	bl	800645c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8005aaa:	f008 f9c3 	bl	800de34 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8005aae:	f001 fdaf 	bl	8007610 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8005ab2:	f008 f935 	bl	800dd20 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8005ab6:	bf00      	nop
 8005ab8:	3708      	adds	r7, #8
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
	...

08005ac0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8005aca:	4b05      	ldr	r3, [pc, #20]	@ (8005ae0 <ptr_to_mem+0x20>)
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	88fb      	ldrh	r3, [r7, #6]
 8005ad0:	4413      	add	r3, r2
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	200058a4 	.word	0x200058a4

08005ae4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8005aec:	4b05      	ldr	r3, [pc, #20]	@ (8005b04 <mem_to_ptr+0x20>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	b29b      	uxth	r3, r3
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	200058a4 	.word	0x200058a4

08005b08 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8005b08:	b590      	push	{r4, r7, lr}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005b10:	4b45      	ldr	r3, [pc, #276]	@ (8005c28 <plug_holes+0x120>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d206      	bcs.n	8005b28 <plug_holes+0x20>
 8005b1a:	4b44      	ldr	r3, [pc, #272]	@ (8005c2c <plug_holes+0x124>)
 8005b1c:	f240 12df 	movw	r2, #479	@ 0x1df
 8005b20:	4943      	ldr	r1, [pc, #268]	@ (8005c30 <plug_holes+0x128>)
 8005b22:	4844      	ldr	r0, [pc, #272]	@ (8005c34 <plug_holes+0x12c>)
 8005b24:	f00a ff6a 	bl	80109fc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8005b28:	4b43      	ldr	r3, [pc, #268]	@ (8005c38 <plug_holes+0x130>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d306      	bcc.n	8005b40 <plug_holes+0x38>
 8005b32:	4b3e      	ldr	r3, [pc, #248]	@ (8005c2c <plug_holes+0x124>)
 8005b34:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8005b38:	4940      	ldr	r1, [pc, #256]	@ (8005c3c <plug_holes+0x134>)
 8005b3a:	483e      	ldr	r0, [pc, #248]	@ (8005c34 <plug_holes+0x12c>)
 8005b3c:	f00a ff5e 	bl	80109fc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	791b      	ldrb	r3, [r3, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d006      	beq.n	8005b56 <plug_holes+0x4e>
 8005b48:	4b38      	ldr	r3, [pc, #224]	@ (8005c2c <plug_holes+0x124>)
 8005b4a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8005b4e:	493c      	ldr	r1, [pc, #240]	@ (8005c40 <plug_holes+0x138>)
 8005b50:	4838      	ldr	r0, [pc, #224]	@ (8005c34 <plug_holes+0x12c>)
 8005b52:	f00a ff53 	bl	80109fc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	881b      	ldrh	r3, [r3, #0]
 8005b5a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005b5e:	d906      	bls.n	8005b6e <plug_holes+0x66>
 8005b60:	4b32      	ldr	r3, [pc, #200]	@ (8005c2c <plug_holes+0x124>)
 8005b62:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8005b66:	4937      	ldr	r1, [pc, #220]	@ (8005c44 <plug_holes+0x13c>)
 8005b68:	4832      	ldr	r0, [pc, #200]	@ (8005c34 <plug_holes+0x12c>)
 8005b6a:	f00a ff47 	bl	80109fc <iprintf>

  nmem = ptr_to_mem(mem->next);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	881b      	ldrh	r3, [r3, #0]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7ff ffa4 	bl	8005ac0 <ptr_to_mem>
 8005b78:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d024      	beq.n	8005bcc <plug_holes+0xc4>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	791b      	ldrb	r3, [r3, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d120      	bne.n	8005bcc <plug_holes+0xc4>
 8005b8a:	4b2b      	ldr	r3, [pc, #172]	@ (8005c38 <plug_holes+0x130>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d01b      	beq.n	8005bcc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8005b94:	4b2c      	ldr	r3, [pc, #176]	@ (8005c48 <plug_holes+0x140>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d102      	bne.n	8005ba4 <plug_holes+0x9c>
      lfree = mem;
 8005b9e:	4a2a      	ldr	r2, [pc, #168]	@ (8005c48 <plug_holes+0x140>)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	881a      	ldrh	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	881b      	ldrh	r3, [r3, #0]
 8005bb0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005bb4:	d00a      	beq.n	8005bcc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	881b      	ldrh	r3, [r3, #0]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7ff ff80 	bl	8005ac0 <ptr_to_mem>
 8005bc0:	4604      	mov	r4, r0
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f7ff ff8e 	bl	8005ae4 <mem_to_ptr>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	885b      	ldrh	r3, [r3, #2]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7ff ff75 	bl	8005ac0 <ptr_to_mem>
 8005bd6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8005bd8:	68ba      	ldr	r2, [r7, #8]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d01f      	beq.n	8005c20 <plug_holes+0x118>
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	791b      	ldrb	r3, [r3, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d11b      	bne.n	8005c20 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8005be8:	4b17      	ldr	r3, [pc, #92]	@ (8005c48 <plug_holes+0x140>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d102      	bne.n	8005bf8 <plug_holes+0xf0>
      lfree = pmem;
 8005bf2:	4a15      	ldr	r2, [pc, #84]	@ (8005c48 <plug_holes+0x140>)
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	881a      	ldrh	r2, [r3, #0]
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	881b      	ldrh	r3, [r3, #0]
 8005c04:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005c08:	d00a      	beq.n	8005c20 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	881b      	ldrh	r3, [r3, #0]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f7ff ff56 	bl	8005ac0 <ptr_to_mem>
 8005c14:	4604      	mov	r4, r0
 8005c16:	68b8      	ldr	r0, [r7, #8]
 8005c18:	f7ff ff64 	bl	8005ae4 <mem_to_ptr>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8005c20:	bf00      	nop
 8005c22:	3714      	adds	r7, #20
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd90      	pop	{r4, r7, pc}
 8005c28:	200058a4 	.word	0x200058a4
 8005c2c:	08011998 	.word	0x08011998
 8005c30:	080119c8 	.word	0x080119c8
 8005c34:	080119e0 	.word	0x080119e0
 8005c38:	200058a8 	.word	0x200058a8
 8005c3c:	08011a08 	.word	0x08011a08
 8005c40:	08011a24 	.word	0x08011a24
 8005c44:	08011a40 	.word	0x08011a40
 8005c48:	200058ac 	.word	0x200058ac

08005c4c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005c52:	4b18      	ldr	r3, [pc, #96]	@ (8005cb4 <mem_init+0x68>)
 8005c54:	3303      	adds	r3, #3
 8005c56:	f023 0303 	bic.w	r3, r3, #3
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	4b16      	ldr	r3, [pc, #88]	@ (8005cb8 <mem_init+0x6c>)
 8005c5e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8005c60:	4b15      	ldr	r3, [pc, #84]	@ (8005cb8 <mem_init+0x6c>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8005c6c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8005c7a:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8005c7e:	f7ff ff1f 	bl	8005ac0 <ptr_to_mem>
 8005c82:	4603      	mov	r3, r0
 8005c84:	4a0d      	ldr	r2, [pc, #52]	@ (8005cbc <mem_init+0x70>)
 8005c86:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8005c88:	4b0c      	ldr	r3, [pc, #48]	@ (8005cbc <mem_init+0x70>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8005c90:	4b0a      	ldr	r3, [pc, #40]	@ (8005cbc <mem_init+0x70>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8005c98:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8005c9a:	4b08      	ldr	r3, [pc, #32]	@ (8005cbc <mem_init+0x70>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8005ca2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8005ca4:	4b04      	ldr	r3, [pc, #16]	@ (8005cb8 <mem_init+0x6c>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a05      	ldr	r2, [pc, #20]	@ (8005cc0 <mem_init+0x74>)
 8005caa:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8005cac:	bf00      	nop
 8005cae:	3708      	adds	r7, #8
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	20005250 	.word	0x20005250
 8005cb8:	200058a4 	.word	0x200058a4
 8005cbc:	200058a8 	.word	0x200058a8
 8005cc0:	200058ac 	.word	0x200058ac

08005cc4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f7ff ff09 	bl	8005ae4 <mem_to_ptr>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	881b      	ldrh	r3, [r3, #0]
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7ff fef0 	bl	8005ac0 <ptr_to_mem>
 8005ce0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	885b      	ldrh	r3, [r3, #2]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7ff feea 	bl	8005ac0 <ptr_to_mem>
 8005cec:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	881b      	ldrh	r3, [r3, #0]
 8005cf2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005cf6:	d818      	bhi.n	8005d2a <mem_link_valid+0x66>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	885b      	ldrh	r3, [r3, #2]
 8005cfc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005d00:	d813      	bhi.n	8005d2a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005d06:	8afa      	ldrh	r2, [r7, #22]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d004      	beq.n	8005d16 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	881b      	ldrh	r3, [r3, #0]
 8005d10:	8afa      	ldrh	r2, [r7, #22]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d109      	bne.n	8005d2a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005d16:	4b08      	ldr	r3, [pc, #32]	@ (8005d38 <mem_link_valid+0x74>)
 8005d18:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d006      	beq.n	8005d2e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	885b      	ldrh	r3, [r3, #2]
 8005d24:	8afa      	ldrh	r2, [r7, #22]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d001      	beq.n	8005d2e <mem_link_valid+0x6a>
    return 0;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	e000      	b.n	8005d30 <mem_link_valid+0x6c>
  }
  return 1;
 8005d2e:	2301      	movs	r3, #1
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3718      	adds	r7, #24
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	200058a8 	.word	0x200058a8

08005d3c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d04c      	beq.n	8005de4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f003 0303 	and.w	r3, r3, #3
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d007      	beq.n	8005d64 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8005d54:	4b25      	ldr	r3, [pc, #148]	@ (8005dec <mem_free+0xb0>)
 8005d56:	f240 2273 	movw	r2, #627	@ 0x273
 8005d5a:	4925      	ldr	r1, [pc, #148]	@ (8005df0 <mem_free+0xb4>)
 8005d5c:	4825      	ldr	r0, [pc, #148]	@ (8005df4 <mem_free+0xb8>)
 8005d5e:	f00a fe4d 	bl	80109fc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005d62:	e040      	b.n	8005de6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	3b08      	subs	r3, #8
 8005d68:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8005d6a:	4b23      	ldr	r3, [pc, #140]	@ (8005df8 <mem_free+0xbc>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d306      	bcc.n	8005d82 <mem_free+0x46>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f103 020c 	add.w	r2, r3, #12
 8005d7a:	4b20      	ldr	r3, [pc, #128]	@ (8005dfc <mem_free+0xc0>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d907      	bls.n	8005d92 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8005d82:	4b1a      	ldr	r3, [pc, #104]	@ (8005dec <mem_free+0xb0>)
 8005d84:	f240 227f 	movw	r2, #639	@ 0x27f
 8005d88:	491d      	ldr	r1, [pc, #116]	@ (8005e00 <mem_free+0xc4>)
 8005d8a:	481a      	ldr	r0, [pc, #104]	@ (8005df4 <mem_free+0xb8>)
 8005d8c:	f00a fe36 	bl	80109fc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005d90:	e029      	b.n	8005de6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	791b      	ldrb	r3, [r3, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d107      	bne.n	8005daa <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8005d9a:	4b14      	ldr	r3, [pc, #80]	@ (8005dec <mem_free+0xb0>)
 8005d9c:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8005da0:	4918      	ldr	r1, [pc, #96]	@ (8005e04 <mem_free+0xc8>)
 8005da2:	4814      	ldr	r0, [pc, #80]	@ (8005df4 <mem_free+0xb8>)
 8005da4:	f00a fe2a 	bl	80109fc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005da8:	e01d      	b.n	8005de6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f7ff ff8a 	bl	8005cc4 <mem_link_valid>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d107      	bne.n	8005dc6 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8005db6:	4b0d      	ldr	r3, [pc, #52]	@ (8005dec <mem_free+0xb0>)
 8005db8:	f240 2295 	movw	r2, #661	@ 0x295
 8005dbc:	4912      	ldr	r1, [pc, #72]	@ (8005e08 <mem_free+0xcc>)
 8005dbe:	480d      	ldr	r0, [pc, #52]	@ (8005df4 <mem_free+0xb8>)
 8005dc0:	f00a fe1c 	bl	80109fc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005dc4:	e00f      	b.n	8005de6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8005e0c <mem_free+0xd0>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d202      	bcs.n	8005ddc <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8005dd6:	4a0d      	ldr	r2, [pc, #52]	@ (8005e0c <mem_free+0xd0>)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f7ff fe93 	bl	8005b08 <plug_holes>
 8005de2:	e000      	b.n	8005de6 <mem_free+0xaa>
    return;
 8005de4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	08011998 	.word	0x08011998
 8005df0:	08011a6c 	.word	0x08011a6c
 8005df4:	080119e0 	.word	0x080119e0
 8005df8:	200058a4 	.word	0x200058a4
 8005dfc:	200058a8 	.word	0x200058a8
 8005e00:	08011a90 	.word	0x08011a90
 8005e04:	08011aac 	.word	0x08011aac
 8005e08:	08011ad4 	.word	0x08011ad4
 8005e0c:	200058ac 	.word	0x200058ac

08005e10 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b088      	sub	sp, #32
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	460b      	mov	r3, r1
 8005e1a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005e1c:	887b      	ldrh	r3, [r7, #2]
 8005e1e:	3303      	adds	r3, #3
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	f023 0303 	bic.w	r3, r3, #3
 8005e26:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8005e28:	8bfb      	ldrh	r3, [r7, #30]
 8005e2a:	2b0b      	cmp	r3, #11
 8005e2c:	d801      	bhi.n	8005e32 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005e2e:	230c      	movs	r3, #12
 8005e30:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8005e32:	8bfb      	ldrh	r3, [r7, #30]
 8005e34:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005e38:	d803      	bhi.n	8005e42 <mem_trim+0x32>
 8005e3a:	8bfa      	ldrh	r2, [r7, #30]
 8005e3c:	887b      	ldrh	r3, [r7, #2]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d201      	bcs.n	8005e46 <mem_trim+0x36>
    return NULL;
 8005e42:	2300      	movs	r3, #0
 8005e44:	e0cc      	b.n	8005fe0 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005e46:	4b68      	ldr	r3, [pc, #416]	@ (8005fe8 <mem_trim+0x1d8>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d304      	bcc.n	8005e5a <mem_trim+0x4a>
 8005e50:	4b66      	ldr	r3, [pc, #408]	@ (8005fec <mem_trim+0x1dc>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d306      	bcc.n	8005e68 <mem_trim+0x58>
 8005e5a:	4b65      	ldr	r3, [pc, #404]	@ (8005ff0 <mem_trim+0x1e0>)
 8005e5c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8005e60:	4964      	ldr	r1, [pc, #400]	@ (8005ff4 <mem_trim+0x1e4>)
 8005e62:	4865      	ldr	r0, [pc, #404]	@ (8005ff8 <mem_trim+0x1e8>)
 8005e64:	f00a fdca 	bl	80109fc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005e68:	4b5f      	ldr	r3, [pc, #380]	@ (8005fe8 <mem_trim+0x1d8>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d304      	bcc.n	8005e7c <mem_trim+0x6c>
 8005e72:	4b5e      	ldr	r3, [pc, #376]	@ (8005fec <mem_trim+0x1dc>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d301      	bcc.n	8005e80 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	e0af      	b.n	8005fe0 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	3b08      	subs	r3, #8
 8005e84:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8005e86:	69b8      	ldr	r0, [r7, #24]
 8005e88:	f7ff fe2c 	bl	8005ae4 <mem_to_ptr>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	881a      	ldrh	r2, [r3, #0]
 8005e94:	8afb      	ldrh	r3, [r7, #22]
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	3b08      	subs	r3, #8
 8005e9c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005e9e:	8bfa      	ldrh	r2, [r7, #30]
 8005ea0:	8abb      	ldrh	r3, [r7, #20]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d906      	bls.n	8005eb4 <mem_trim+0xa4>
 8005ea6:	4b52      	ldr	r3, [pc, #328]	@ (8005ff0 <mem_trim+0x1e0>)
 8005ea8:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8005eac:	4953      	ldr	r1, [pc, #332]	@ (8005ffc <mem_trim+0x1ec>)
 8005eae:	4852      	ldr	r0, [pc, #328]	@ (8005ff8 <mem_trim+0x1e8>)
 8005eb0:	f00a fda4 	bl	80109fc <iprintf>
  if (newsize > size) {
 8005eb4:	8bfa      	ldrh	r2, [r7, #30]
 8005eb6:	8abb      	ldrh	r3, [r7, #20]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d901      	bls.n	8005ec0 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	e08f      	b.n	8005fe0 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8005ec0:	8bfa      	ldrh	r2, [r7, #30]
 8005ec2:	8abb      	ldrh	r3, [r7, #20]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d101      	bne.n	8005ecc <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	e089      	b.n	8005fe0 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	881b      	ldrh	r3, [r3, #0]
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7ff fdf5 	bl	8005ac0 <ptr_to_mem>
 8005ed6:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	791b      	ldrb	r3, [r3, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d13f      	bne.n	8005f60 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	881b      	ldrh	r3, [r3, #0]
 8005ee4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005ee8:	d106      	bne.n	8005ef8 <mem_trim+0xe8>
 8005eea:	4b41      	ldr	r3, [pc, #260]	@ (8005ff0 <mem_trim+0x1e0>)
 8005eec:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8005ef0:	4943      	ldr	r1, [pc, #268]	@ (8006000 <mem_trim+0x1f0>)
 8005ef2:	4841      	ldr	r0, [pc, #260]	@ (8005ff8 <mem_trim+0x1e8>)
 8005ef4:	f00a fd82 	bl	80109fc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	881b      	ldrh	r3, [r3, #0]
 8005efc:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005efe:	8afa      	ldrh	r2, [r7, #22]
 8005f00:	8bfb      	ldrh	r3, [r7, #30]
 8005f02:	4413      	add	r3, r2
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	3308      	adds	r3, #8
 8005f08:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8005f0a:	4b3e      	ldr	r3, [pc, #248]	@ (8006004 <mem_trim+0x1f4>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d106      	bne.n	8005f22 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8005f14:	89fb      	ldrh	r3, [r7, #14]
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7ff fdd2 	bl	8005ac0 <ptr_to_mem>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	4a39      	ldr	r2, [pc, #228]	@ (8006004 <mem_trim+0x1f4>)
 8005f20:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8005f22:	89fb      	ldrh	r3, [r7, #14]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7ff fdcb 	bl	8005ac0 <ptr_to_mem>
 8005f2a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	89ba      	ldrh	r2, [r7, #12]
 8005f36:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	8afa      	ldrh	r2, [r7, #22]
 8005f3c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	89fa      	ldrh	r2, [r7, #14]
 8005f42:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	881b      	ldrh	r3, [r3, #0]
 8005f48:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005f4c:	d047      	beq.n	8005fde <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	881b      	ldrh	r3, [r3, #0]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7ff fdb4 	bl	8005ac0 <ptr_to_mem>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	89fb      	ldrh	r3, [r7, #14]
 8005f5c:	8053      	strh	r3, [r2, #2]
 8005f5e:	e03e      	b.n	8005fde <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005f60:	8bfb      	ldrh	r3, [r7, #30]
 8005f62:	f103 0214 	add.w	r2, r3, #20
 8005f66:	8abb      	ldrh	r3, [r7, #20]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d838      	bhi.n	8005fde <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005f6c:	8afa      	ldrh	r2, [r7, #22]
 8005f6e:	8bfb      	ldrh	r3, [r7, #30]
 8005f70:	4413      	add	r3, r2
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	3308      	adds	r3, #8
 8005f76:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	881b      	ldrh	r3, [r3, #0]
 8005f7c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005f80:	d106      	bne.n	8005f90 <mem_trim+0x180>
 8005f82:	4b1b      	ldr	r3, [pc, #108]	@ (8005ff0 <mem_trim+0x1e0>)
 8005f84:	f240 3216 	movw	r2, #790	@ 0x316
 8005f88:	491d      	ldr	r1, [pc, #116]	@ (8006000 <mem_trim+0x1f0>)
 8005f8a:	481b      	ldr	r0, [pc, #108]	@ (8005ff8 <mem_trim+0x1e8>)
 8005f8c:	f00a fd36 	bl	80109fc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8005f90:	89fb      	ldrh	r3, [r7, #14]
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7ff fd94 	bl	8005ac0 <ptr_to_mem>
 8005f98:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8005f9a:	4b1a      	ldr	r3, [pc, #104]	@ (8006004 <mem_trim+0x1f4>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d202      	bcs.n	8005faa <mem_trim+0x19a>
      lfree = mem2;
 8005fa4:	4a17      	ldr	r2, [pc, #92]	@ (8006004 <mem_trim+0x1f4>)
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	2200      	movs	r2, #0
 8005fae:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	881a      	ldrh	r2, [r3, #0]
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	8afa      	ldrh	r2, [r7, #22]
 8005fbc:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	89fa      	ldrh	r2, [r7, #14]
 8005fc2:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	881b      	ldrh	r3, [r3, #0]
 8005fc8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005fcc:	d007      	beq.n	8005fde <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7ff fd74 	bl	8005ac0 <ptr_to_mem>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	89fb      	ldrh	r3, [r7, #14]
 8005fdc:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8005fde:	687b      	ldr	r3, [r7, #4]
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3720      	adds	r7, #32
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	200058a4 	.word	0x200058a4
 8005fec:	200058a8 	.word	0x200058a8
 8005ff0:	08011998 	.word	0x08011998
 8005ff4:	08011b08 	.word	0x08011b08
 8005ff8:	080119e0 	.word	0x080119e0
 8005ffc:	08011b20 	.word	0x08011b20
 8006000:	08011b40 	.word	0x08011b40
 8006004:	200058ac 	.word	0x200058ac

08006008 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b088      	sub	sp, #32
 800600c:	af00      	add	r7, sp, #0
 800600e:	4603      	mov	r3, r0
 8006010:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8006012:	88fb      	ldrh	r3, [r7, #6]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d101      	bne.n	800601c <mem_malloc+0x14>
    return NULL;
 8006018:	2300      	movs	r3, #0
 800601a:	e0d9      	b.n	80061d0 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800601c:	88fb      	ldrh	r3, [r7, #6]
 800601e:	3303      	adds	r3, #3
 8006020:	b29b      	uxth	r3, r3
 8006022:	f023 0303 	bic.w	r3, r3, #3
 8006026:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8006028:	8bbb      	ldrh	r3, [r7, #28]
 800602a:	2b0b      	cmp	r3, #11
 800602c:	d801      	bhi.n	8006032 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800602e:	230c      	movs	r3, #12
 8006030:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8006032:	8bbb      	ldrh	r3, [r7, #28]
 8006034:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006038:	d803      	bhi.n	8006042 <mem_malloc+0x3a>
 800603a:	8bba      	ldrh	r2, [r7, #28]
 800603c:	88fb      	ldrh	r3, [r7, #6]
 800603e:	429a      	cmp	r2, r3
 8006040:	d201      	bcs.n	8006046 <mem_malloc+0x3e>
    return NULL;
 8006042:	2300      	movs	r3, #0
 8006044:	e0c4      	b.n	80061d0 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006046:	4b64      	ldr	r3, [pc, #400]	@ (80061d8 <mem_malloc+0x1d0>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4618      	mov	r0, r3
 800604c:	f7ff fd4a 	bl	8005ae4 <mem_to_ptr>
 8006050:	4603      	mov	r3, r0
 8006052:	83fb      	strh	r3, [r7, #30]
 8006054:	e0b4      	b.n	80061c0 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8006056:	8bfb      	ldrh	r3, [r7, #30]
 8006058:	4618      	mov	r0, r3
 800605a:	f7ff fd31 	bl	8005ac0 <ptr_to_mem>
 800605e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	791b      	ldrb	r3, [r3, #4]
 8006064:	2b00      	cmp	r3, #0
 8006066:	f040 80a4 	bne.w	80061b2 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	881b      	ldrh	r3, [r3, #0]
 800606e:	461a      	mov	r2, r3
 8006070:	8bfb      	ldrh	r3, [r7, #30]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	f1a3 0208 	sub.w	r2, r3, #8
 8006078:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800607a:	429a      	cmp	r2, r3
 800607c:	f0c0 8099 	bcc.w	80061b2 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	881b      	ldrh	r3, [r3, #0]
 8006084:	461a      	mov	r2, r3
 8006086:	8bfb      	ldrh	r3, [r7, #30]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	f1a3 0208 	sub.w	r2, r3, #8
 800608e:	8bbb      	ldrh	r3, [r7, #28]
 8006090:	3314      	adds	r3, #20
 8006092:	429a      	cmp	r2, r3
 8006094:	d333      	bcc.n	80060fe <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8006096:	8bfa      	ldrh	r2, [r7, #30]
 8006098:	8bbb      	ldrh	r3, [r7, #28]
 800609a:	4413      	add	r3, r2
 800609c:	b29b      	uxth	r3, r3
 800609e:	3308      	adds	r3, #8
 80060a0:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80060a2:	8a7b      	ldrh	r3, [r7, #18]
 80060a4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80060a8:	d106      	bne.n	80060b8 <mem_malloc+0xb0>
 80060aa:	4b4c      	ldr	r3, [pc, #304]	@ (80061dc <mem_malloc+0x1d4>)
 80060ac:	f240 3287 	movw	r2, #903	@ 0x387
 80060b0:	494b      	ldr	r1, [pc, #300]	@ (80061e0 <mem_malloc+0x1d8>)
 80060b2:	484c      	ldr	r0, [pc, #304]	@ (80061e4 <mem_malloc+0x1dc>)
 80060b4:	f00a fca2 	bl	80109fc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80060b8:	8a7b      	ldrh	r3, [r7, #18]
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7ff fd00 	bl	8005ac0 <ptr_to_mem>
 80060c0:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	881a      	ldrh	r2, [r3, #0]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	8bfa      	ldrh	r2, [r7, #30]
 80060d4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	8a7a      	ldrh	r2, [r7, #18]
 80060da:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	2201      	movs	r2, #1
 80060e0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80060ea:	d00b      	beq.n	8006104 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	881b      	ldrh	r3, [r3, #0]
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7ff fce5 	bl	8005ac0 <ptr_to_mem>
 80060f6:	4602      	mov	r2, r0
 80060f8:	8a7b      	ldrh	r3, [r7, #18]
 80060fa:	8053      	strh	r3, [r2, #2]
 80060fc:	e002      	b.n	8006104 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	2201      	movs	r2, #1
 8006102:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8006104:	4b34      	ldr	r3, [pc, #208]	@ (80061d8 <mem_malloc+0x1d0>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	429a      	cmp	r2, r3
 800610c:	d127      	bne.n	800615e <mem_malloc+0x156>
          struct mem *cur = lfree;
 800610e:	4b32      	ldr	r3, [pc, #200]	@ (80061d8 <mem_malloc+0x1d0>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8006114:	e005      	b.n	8006122 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	881b      	ldrh	r3, [r3, #0]
 800611a:	4618      	mov	r0, r3
 800611c:	f7ff fcd0 	bl	8005ac0 <ptr_to_mem>
 8006120:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	791b      	ldrb	r3, [r3, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d004      	beq.n	8006134 <mem_malloc+0x12c>
 800612a:	4b2f      	ldr	r3, [pc, #188]	@ (80061e8 <mem_malloc+0x1e0>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	69ba      	ldr	r2, [r7, #24]
 8006130:	429a      	cmp	r2, r3
 8006132:	d1f0      	bne.n	8006116 <mem_malloc+0x10e>
          }
          lfree = cur;
 8006134:	4a28      	ldr	r2, [pc, #160]	@ (80061d8 <mem_malloc+0x1d0>)
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800613a:	4b27      	ldr	r3, [pc, #156]	@ (80061d8 <mem_malloc+0x1d0>)
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	4b2a      	ldr	r3, [pc, #168]	@ (80061e8 <mem_malloc+0x1e0>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	429a      	cmp	r2, r3
 8006144:	d00b      	beq.n	800615e <mem_malloc+0x156>
 8006146:	4b24      	ldr	r3, [pc, #144]	@ (80061d8 <mem_malloc+0x1d0>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	791b      	ldrb	r3, [r3, #4]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d006      	beq.n	800615e <mem_malloc+0x156>
 8006150:	4b22      	ldr	r3, [pc, #136]	@ (80061dc <mem_malloc+0x1d4>)
 8006152:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8006156:	4925      	ldr	r1, [pc, #148]	@ (80061ec <mem_malloc+0x1e4>)
 8006158:	4822      	ldr	r0, [pc, #136]	@ (80061e4 <mem_malloc+0x1dc>)
 800615a:	f00a fc4f 	bl	80109fc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800615e:	8bba      	ldrh	r2, [r7, #28]
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	4413      	add	r3, r2
 8006164:	3308      	adds	r3, #8
 8006166:	4a20      	ldr	r2, [pc, #128]	@ (80061e8 <mem_malloc+0x1e0>)
 8006168:	6812      	ldr	r2, [r2, #0]
 800616a:	4293      	cmp	r3, r2
 800616c:	d906      	bls.n	800617c <mem_malloc+0x174>
 800616e:	4b1b      	ldr	r3, [pc, #108]	@ (80061dc <mem_malloc+0x1d4>)
 8006170:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8006174:	491e      	ldr	r1, [pc, #120]	@ (80061f0 <mem_malloc+0x1e8>)
 8006176:	481b      	ldr	r0, [pc, #108]	@ (80061e4 <mem_malloc+0x1dc>)
 8006178:	f00a fc40 	bl	80109fc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	f003 0303 	and.w	r3, r3, #3
 8006182:	2b00      	cmp	r3, #0
 8006184:	d006      	beq.n	8006194 <mem_malloc+0x18c>
 8006186:	4b15      	ldr	r3, [pc, #84]	@ (80061dc <mem_malloc+0x1d4>)
 8006188:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800618c:	4919      	ldr	r1, [pc, #100]	@ (80061f4 <mem_malloc+0x1ec>)
 800618e:	4815      	ldr	r0, [pc, #84]	@ (80061e4 <mem_malloc+0x1dc>)
 8006190:	f00a fc34 	bl	80109fc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	f003 0303 	and.w	r3, r3, #3
 800619a:	2b00      	cmp	r3, #0
 800619c:	d006      	beq.n	80061ac <mem_malloc+0x1a4>
 800619e:	4b0f      	ldr	r3, [pc, #60]	@ (80061dc <mem_malloc+0x1d4>)
 80061a0:	f240 32bd 	movw	r2, #957	@ 0x3bd
 80061a4:	4914      	ldr	r1, [pc, #80]	@ (80061f8 <mem_malloc+0x1f0>)
 80061a6:	480f      	ldr	r0, [pc, #60]	@ (80061e4 <mem_malloc+0x1dc>)
 80061a8:	f00a fc28 	bl	80109fc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	3308      	adds	r3, #8
 80061b0:	e00e      	b.n	80061d0 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80061b2:	8bfb      	ldrh	r3, [r7, #30]
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7ff fc83 	bl	8005ac0 <ptr_to_mem>
 80061ba:	4603      	mov	r3, r0
 80061bc:	881b      	ldrh	r3, [r3, #0]
 80061be:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80061c0:	8bfa      	ldrh	r2, [r7, #30]
 80061c2:	8bbb      	ldrh	r3, [r7, #28]
 80061c4:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 80061c8:	429a      	cmp	r2, r3
 80061ca:	f4ff af44 	bcc.w	8006056 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3720      	adds	r7, #32
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	200058ac 	.word	0x200058ac
 80061dc:	08011998 	.word	0x08011998
 80061e0:	08011b40 	.word	0x08011b40
 80061e4:	080119e0 	.word	0x080119e0
 80061e8:	200058a8 	.word	0x200058a8
 80061ec:	08011b54 	.word	0x08011b54
 80061f0:	08011b70 	.word	0x08011b70
 80061f4:	08011ba0 	.word	0x08011ba0
 80061f8:	08011bd0 	.word	0x08011bd0

080061fc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	3303      	adds	r3, #3
 8006212:	f023 0303 	bic.w	r3, r3, #3
 8006216:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006218:	2300      	movs	r3, #0
 800621a:	60fb      	str	r3, [r7, #12]
 800621c:	e011      	b.n	8006242 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	68ba      	ldr	r2, [r7, #8]
 800622e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	889b      	ldrh	r3, [r3, #4]
 8006234:	461a      	mov	r2, r3
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	4413      	add	r3, r2
 800623a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	3301      	adds	r3, #1
 8006240:	60fb      	str	r3, [r7, #12]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	88db      	ldrh	r3, [r3, #6]
 8006246:	461a      	mov	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	4293      	cmp	r3, r2
 800624c:	dbe7      	blt.n	800621e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800624e:	bf00      	nop
 8006250:	bf00      	nop
 8006252:	3714      	adds	r7, #20
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006262:	2300      	movs	r3, #0
 8006264:	80fb      	strh	r3, [r7, #6]
 8006266:	e009      	b.n	800627c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8006268:	88fb      	ldrh	r3, [r7, #6]
 800626a:	4a08      	ldr	r2, [pc, #32]	@ (800628c <memp_init+0x30>)
 800626c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006270:	4618      	mov	r0, r3
 8006272:	f7ff ffc3 	bl	80061fc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006276:	88fb      	ldrh	r3, [r7, #6]
 8006278:	3301      	adds	r3, #1
 800627a:	80fb      	strh	r3, [r7, #6]
 800627c:	88fb      	ldrh	r3, [r7, #6]
 800627e:	2b08      	cmp	r3, #8
 8006280:	d9f2      	bls.n	8006268 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8006282:	bf00      	nop
 8006284:	bf00      	nop
 8006286:	3708      	adds	r7, #8
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	08014fc0 	.word	0x08014fc0

08006290 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d012      	beq.n	80062cc <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	6812      	ldr	r2, [r2, #0]
 80062ae:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f003 0303 	and.w	r3, r3, #3
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d006      	beq.n	80062c8 <do_memp_malloc_pool+0x38>
 80062ba:	4b07      	ldr	r3, [pc, #28]	@ (80062d8 <do_memp_malloc_pool+0x48>)
 80062bc:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80062c0:	4906      	ldr	r1, [pc, #24]	@ (80062dc <do_memp_malloc_pool+0x4c>)
 80062c2:	4807      	ldr	r0, [pc, #28]	@ (80062e0 <do_memp_malloc_pool+0x50>)
 80062c4:	f00a fb9a 	bl	80109fc <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	e000      	b.n	80062ce <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	08011c5c 	.word	0x08011c5c
 80062dc:	08011c8c 	.word	0x08011c8c
 80062e0:	08011cb0 	.word	0x08011cb0

080062e4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d106      	bne.n	8006300 <memp_malloc_pool+0x1c>
 80062f2:	4b0a      	ldr	r3, [pc, #40]	@ (800631c <memp_malloc_pool+0x38>)
 80062f4:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 80062f8:	4909      	ldr	r1, [pc, #36]	@ (8006320 <memp_malloc_pool+0x3c>)
 80062fa:	480a      	ldr	r0, [pc, #40]	@ (8006324 <memp_malloc_pool+0x40>)
 80062fc:	f00a fb7e 	bl	80109fc <iprintf>
  if (desc == NULL) {
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <memp_malloc_pool+0x26>
    return NULL;
 8006306:	2300      	movs	r3, #0
 8006308:	e003      	b.n	8006312 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f7ff ffc0 	bl	8006290 <do_memp_malloc_pool>
 8006310:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8006312:	4618      	mov	r0, r3
 8006314:	3708      	adds	r7, #8
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	08011c5c 	.word	0x08011c5c
 8006320:	08011cd8 	.word	0x08011cd8
 8006324:	08011cb0 	.word	0x08011cb0

08006328 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	4603      	mov	r3, r0
 8006330:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006332:	79fb      	ldrb	r3, [r7, #7]
 8006334:	2b08      	cmp	r3, #8
 8006336:	d908      	bls.n	800634a <memp_malloc+0x22>
 8006338:	4b0a      	ldr	r3, [pc, #40]	@ (8006364 <memp_malloc+0x3c>)
 800633a:	f240 1257 	movw	r2, #343	@ 0x157
 800633e:	490a      	ldr	r1, [pc, #40]	@ (8006368 <memp_malloc+0x40>)
 8006340:	480a      	ldr	r0, [pc, #40]	@ (800636c <memp_malloc+0x44>)
 8006342:	f00a fb5b 	bl	80109fc <iprintf>
 8006346:	2300      	movs	r3, #0
 8006348:	e008      	b.n	800635c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800634a:	79fb      	ldrb	r3, [r7, #7]
 800634c:	4a08      	ldr	r2, [pc, #32]	@ (8006370 <memp_malloc+0x48>)
 800634e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006352:	4618      	mov	r0, r3
 8006354:	f7ff ff9c 	bl	8006290 <do_memp_malloc_pool>
 8006358:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800635a:	68fb      	ldr	r3, [r7, #12]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	08011c5c 	.word	0x08011c5c
 8006368:	08011cec 	.word	0x08011cec
 800636c:	08011cb0 	.word	0x08011cb0
 8006370:	08014fc0 	.word	0x08014fc0

08006374 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	f003 0303 	and.w	r3, r3, #3
 8006384:	2b00      	cmp	r3, #0
 8006386:	d006      	beq.n	8006396 <do_memp_free_pool+0x22>
 8006388:	4b0a      	ldr	r3, [pc, #40]	@ (80063b4 <do_memp_free_pool+0x40>)
 800638a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800638e:	490a      	ldr	r1, [pc, #40]	@ (80063b8 <do_memp_free_pool+0x44>)
 8006390:	480a      	ldr	r0, [pc, #40]	@ (80063bc <do_memp_free_pool+0x48>)
 8006392:	f00a fb33 	bl	80109fc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80063ac:	bf00      	nop
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	08011c5c 	.word	0x08011c5c
 80063b8:	08011d0c 	.word	0x08011d0c
 80063bc:	08011cb0 	.word	0x08011cb0

080063c0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d106      	bne.n	80063de <memp_free_pool+0x1e>
 80063d0:	4b0a      	ldr	r3, [pc, #40]	@ (80063fc <memp_free_pool+0x3c>)
 80063d2:	f240 1295 	movw	r2, #405	@ 0x195
 80063d6:	490a      	ldr	r1, [pc, #40]	@ (8006400 <memp_free_pool+0x40>)
 80063d8:	480a      	ldr	r0, [pc, #40]	@ (8006404 <memp_free_pool+0x44>)
 80063da:	f00a fb0f 	bl	80109fc <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d007      	beq.n	80063f4 <memp_free_pool+0x34>
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d004      	beq.n	80063f4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80063ea:	6839      	ldr	r1, [r7, #0]
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f7ff ffc1 	bl	8006374 <do_memp_free_pool>
 80063f2:	e000      	b.n	80063f6 <memp_free_pool+0x36>
    return;
 80063f4:	bf00      	nop
}
 80063f6:	3708      	adds	r7, #8
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	08011c5c 	.word	0x08011c5c
 8006400:	08011cd8 	.word	0x08011cd8
 8006404:	08011cb0 	.word	0x08011cb0

08006408 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	4603      	mov	r3, r0
 8006410:	6039      	str	r1, [r7, #0]
 8006412:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006414:	79fb      	ldrb	r3, [r7, #7]
 8006416:	2b08      	cmp	r3, #8
 8006418:	d907      	bls.n	800642a <memp_free+0x22>
 800641a:	4b0c      	ldr	r3, [pc, #48]	@ (800644c <memp_free+0x44>)
 800641c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8006420:	490b      	ldr	r1, [pc, #44]	@ (8006450 <memp_free+0x48>)
 8006422:	480c      	ldr	r0, [pc, #48]	@ (8006454 <memp_free+0x4c>)
 8006424:	f00a faea 	bl	80109fc <iprintf>
 8006428:	e00c      	b.n	8006444 <memp_free+0x3c>

  if (mem == NULL) {
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d008      	beq.n	8006442 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006430:	79fb      	ldrb	r3, [r7, #7]
 8006432:	4a09      	ldr	r2, [pc, #36]	@ (8006458 <memp_free+0x50>)
 8006434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006438:	6839      	ldr	r1, [r7, #0]
 800643a:	4618      	mov	r0, r3
 800643c:	f7ff ff9a 	bl	8006374 <do_memp_free_pool>
 8006440:	e000      	b.n	8006444 <memp_free+0x3c>
    return;
 8006442:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006444:	3708      	adds	r7, #8
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	08011c5c 	.word	0x08011c5c
 8006450:	08011d2c 	.word	0x08011d2c
 8006454:	08011cb0 	.word	0x08011cb0
 8006458:	08014fc0 	.word	0x08014fc0

0800645c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800645c:	b480      	push	{r7}
 800645e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006460:	bf00      	nop
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
	...

0800646c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b086      	sub	sp, #24
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]
 8006478:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d108      	bne.n	8006492 <netif_add+0x26>
 8006480:	4b57      	ldr	r3, [pc, #348]	@ (80065e0 <netif_add+0x174>)
 8006482:	f240 1227 	movw	r2, #295	@ 0x127
 8006486:	4957      	ldr	r1, [pc, #348]	@ (80065e4 <netif_add+0x178>)
 8006488:	4857      	ldr	r0, [pc, #348]	@ (80065e8 <netif_add+0x17c>)
 800648a:	f00a fab7 	bl	80109fc <iprintf>
 800648e:	2300      	movs	r3, #0
 8006490:	e0a2      	b.n	80065d8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8006492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006494:	2b00      	cmp	r3, #0
 8006496:	d108      	bne.n	80064aa <netif_add+0x3e>
 8006498:	4b51      	ldr	r3, [pc, #324]	@ (80065e0 <netif_add+0x174>)
 800649a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800649e:	4953      	ldr	r1, [pc, #332]	@ (80065ec <netif_add+0x180>)
 80064a0:	4851      	ldr	r0, [pc, #324]	@ (80065e8 <netif_add+0x17c>)
 80064a2:	f00a faab 	bl	80109fc <iprintf>
 80064a6:	2300      	movs	r3, #0
 80064a8:	e096      	b.n	80065d8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d101      	bne.n	80064b4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80064b0:	4b4f      	ldr	r3, [pc, #316]	@ (80065f0 <netif_add+0x184>)
 80064b2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d101      	bne.n	80064be <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80064ba:	4b4d      	ldr	r3, [pc, #308]	@ (80065f0 <netif_add+0x184>)
 80064bc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80064c4:	4b4a      	ldr	r3, [pc, #296]	@ (80065f0 <netif_add+0x184>)
 80064c6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	4a45      	ldr	r2, [pc, #276]	@ (80065f4 <netif_add+0x188>)
 80064de:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6a3a      	ldr	r2, [r7, #32]
 80064f8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80064fa:	4b3f      	ldr	r3, [pc, #252]	@ (80065f8 <netif_add+0x18c>)
 80064fc:	781a      	ldrb	r2, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006508:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	68b9      	ldr	r1, [r7, #8]
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f000 f913 	bl	800673c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8006516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	4798      	blx	r3
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d001      	beq.n	8006526 <netif_add+0xba>
    return NULL;
 8006522:	2300      	movs	r3, #0
 8006524:	e058      	b.n	80065d8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800652c:	2bff      	cmp	r3, #255	@ 0xff
 800652e:	d103      	bne.n	8006538 <netif_add+0xcc>
        netif->num = 0;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8006538:	2300      	movs	r3, #0
 800653a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800653c:	4b2f      	ldr	r3, [pc, #188]	@ (80065fc <netif_add+0x190>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	617b      	str	r3, [r7, #20]
 8006542:	e02b      	b.n	800659c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	429a      	cmp	r2, r3
 800654a:	d106      	bne.n	800655a <netif_add+0xee>
 800654c:	4b24      	ldr	r3, [pc, #144]	@ (80065e0 <netif_add+0x174>)
 800654e:	f240 128b 	movw	r2, #395	@ 0x18b
 8006552:	492b      	ldr	r1, [pc, #172]	@ (8006600 <netif_add+0x194>)
 8006554:	4824      	ldr	r0, [pc, #144]	@ (80065e8 <netif_add+0x17c>)
 8006556:	f00a fa51 	bl	80109fc <iprintf>
        num_netifs++;
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	3301      	adds	r3, #1
 800655e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	2bff      	cmp	r3, #255	@ 0xff
 8006564:	dd06      	ble.n	8006574 <netif_add+0x108>
 8006566:	4b1e      	ldr	r3, [pc, #120]	@ (80065e0 <netif_add+0x174>)
 8006568:	f240 128d 	movw	r2, #397	@ 0x18d
 800656c:	4925      	ldr	r1, [pc, #148]	@ (8006604 <netif_add+0x198>)
 800656e:	481e      	ldr	r0, [pc, #120]	@ (80065e8 <netif_add+0x17c>)
 8006570:	f00a fa44 	bl	80109fc <iprintf>
        if (netif2->num == netif->num) {
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006580:	429a      	cmp	r2, r3
 8006582:	d108      	bne.n	8006596 <netif_add+0x12a>
          netif->num++;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800658a:	3301      	adds	r3, #1
 800658c:	b2da      	uxtb	r2, r3
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8006594:	e005      	b.n	80065a2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	617b      	str	r3, [r7, #20]
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1d0      	bne.n	8006544 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1be      	bne.n	8006526 <netif_add+0xba>
  }
  if (netif->num == 254) {
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80065ae:	2bfe      	cmp	r3, #254	@ 0xfe
 80065b0:	d103      	bne.n	80065ba <netif_add+0x14e>
    netif_num = 0;
 80065b2:	4b11      	ldr	r3, [pc, #68]	@ (80065f8 <netif_add+0x18c>)
 80065b4:	2200      	movs	r2, #0
 80065b6:	701a      	strb	r2, [r3, #0]
 80065b8:	e006      	b.n	80065c8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80065c0:	3301      	adds	r3, #1
 80065c2:	b2da      	uxtb	r2, r3
 80065c4:	4b0c      	ldr	r3, [pc, #48]	@ (80065f8 <netif_add+0x18c>)
 80065c6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80065c8:	4b0c      	ldr	r3, [pc, #48]	@ (80065fc <netif_add+0x190>)
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80065d0:	4a0a      	ldr	r2, [pc, #40]	@ (80065fc <netif_add+0x190>)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80065d6:	68fb      	ldr	r3, [r7, #12]
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3718      	adds	r7, #24
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	08011d48 	.word	0x08011d48
 80065e4:	08011ddc 	.word	0x08011ddc
 80065e8:	08011d98 	.word	0x08011d98
 80065ec:	08011df8 	.word	0x08011df8
 80065f0:	08015050 	.word	0x08015050
 80065f4:	08006a17 	.word	0x08006a17
 80065f8:	200087e4 	.word	0x200087e4
 80065fc:	200087dc 	.word	0x200087dc
 8006600:	08011e1c 	.word	0x08011e1c
 8006604:	08011e30 	.word	0x08011e30

08006608 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8006612:	6839      	ldr	r1, [r7, #0]
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f002 fe67 	bl	80092e8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800661a:	6839      	ldr	r1, [r7, #0]
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f007 fd93 	bl	800e148 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8006622:	bf00      	nop
 8006624:	3708      	adds	r7, #8
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
	...

0800662c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d106      	bne.n	800664c <netif_do_set_ipaddr+0x20>
 800663e:	4b1d      	ldr	r3, [pc, #116]	@ (80066b4 <netif_do_set_ipaddr+0x88>)
 8006640:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8006644:	491c      	ldr	r1, [pc, #112]	@ (80066b8 <netif_do_set_ipaddr+0x8c>)
 8006646:	481d      	ldr	r0, [pc, #116]	@ (80066bc <netif_do_set_ipaddr+0x90>)
 8006648:	f00a f9d8 	bl	80109fc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d106      	bne.n	8006660 <netif_do_set_ipaddr+0x34>
 8006652:	4b18      	ldr	r3, [pc, #96]	@ (80066b4 <netif_do_set_ipaddr+0x88>)
 8006654:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8006658:	4917      	ldr	r1, [pc, #92]	@ (80066b8 <netif_do_set_ipaddr+0x8c>)
 800665a:	4818      	ldr	r0, [pc, #96]	@ (80066bc <netif_do_set_ipaddr+0x90>)
 800665c:	f00a f9ce 	bl	80109fc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	3304      	adds	r3, #4
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	429a      	cmp	r2, r3
 800666c:	d01c      	beq.n	80066a8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	3304      	adds	r3, #4
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800667e:	f107 0314 	add.w	r3, r7, #20
 8006682:	4619      	mov	r1, r3
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f7ff ffbf 	bl	8006608 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d002      	beq.n	8006696 <netif_do_set_ipaddr+0x6a>
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	e000      	b.n	8006698 <netif_do_set_ipaddr+0x6c>
 8006696:	2300      	movs	r3, #0
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800669c:	2101      	movs	r1, #1
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f000 f8d2 	bl	8006848 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80066a4:	2301      	movs	r3, #1
 80066a6:	e000      	b.n	80066aa <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3718      	adds	r7, #24
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	08011d48 	.word	0x08011d48
 80066b8:	08011e60 	.word	0x08011e60
 80066bc:	08011d98 	.word	0x08011d98

080066c0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	3308      	adds	r3, #8
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d00a      	beq.n	80066f0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d002      	beq.n	80066e6 <netif_do_set_netmask+0x26>
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	e000      	b.n	80066e8 <netif_do_set_netmask+0x28>
 80066e6:	2300      	movs	r3, #0
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80066ec:	2301      	movs	r3, #1
 80066ee:	e000      	b.n	80066f2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3714      	adds	r7, #20
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr

080066fe <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80066fe:	b480      	push	{r7}
 8006700:	b085      	sub	sp, #20
 8006702:	af00      	add	r7, sp, #0
 8006704:	60f8      	str	r0, [r7, #12]
 8006706:	60b9      	str	r1, [r7, #8]
 8006708:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	330c      	adds	r3, #12
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	429a      	cmp	r2, r3
 8006716:	d00a      	beq.n	800672e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d002      	beq.n	8006724 <netif_do_set_gw+0x26>
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	e000      	b.n	8006726 <netif_do_set_gw+0x28>
 8006724:	2300      	movs	r3, #0
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800672a:	2301      	movs	r3, #1
 800672c:	e000      	b.n	8006730 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3714      	adds	r7, #20
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b088      	sub	sp, #32
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	607a      	str	r2, [r7, #4]
 8006748:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800674a:	2300      	movs	r3, #0
 800674c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800674e:	2300      	movs	r3, #0
 8006750:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d101      	bne.n	800675c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8006758:	4b1c      	ldr	r3, [pc, #112]	@ (80067cc <netif_set_addr+0x90>)
 800675a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d101      	bne.n	8006766 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8006762:	4b1a      	ldr	r3, [pc, #104]	@ (80067cc <netif_set_addr+0x90>)
 8006764:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d101      	bne.n	8006770 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800676c:	4b17      	ldr	r3, [pc, #92]	@ (80067cc <netif_set_addr+0x90>)
 800676e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d003      	beq.n	800677e <netif_set_addr+0x42>
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d101      	bne.n	8006782 <netif_set_addr+0x46>
 800677e:	2301      	movs	r3, #1
 8006780:	e000      	b.n	8006784 <netif_set_addr+0x48>
 8006782:	2300      	movs	r3, #0
 8006784:	617b      	str	r3, [r7, #20]
  if (remove) {
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d006      	beq.n	800679a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800678c:	f107 0310 	add.w	r3, r7, #16
 8006790:	461a      	mov	r2, r3
 8006792:	68b9      	ldr	r1, [r7, #8]
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f7ff ff49 	bl	800662c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800679a:	69fa      	ldr	r2, [r7, #28]
 800679c:	6879      	ldr	r1, [r7, #4]
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f7ff ff8e 	bl	80066c0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80067a4:	69ba      	ldr	r2, [r7, #24]
 80067a6:	6839      	ldr	r1, [r7, #0]
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f7ff ffa8 	bl	80066fe <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d106      	bne.n	80067c2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80067b4:	f107 0310 	add.w	r3, r7, #16
 80067b8:	461a      	mov	r2, r3
 80067ba:	68b9      	ldr	r1, [r7, #8]
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f7ff ff35 	bl	800662c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80067c2:	bf00      	nop
 80067c4:	3720      	adds	r7, #32
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	08015050 	.word	0x08015050

080067d0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80067d8:	4a04      	ldr	r2, [pc, #16]	@ (80067ec <netif_set_default+0x1c>)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80067de:	bf00      	nop
 80067e0:	370c      	adds	r7, #12
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	200087e0 	.word	0x200087e0

080067f0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d107      	bne.n	800680e <netif_set_up+0x1e>
 80067fe:	4b0f      	ldr	r3, [pc, #60]	@ (800683c <netif_set_up+0x4c>)
 8006800:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8006804:	490e      	ldr	r1, [pc, #56]	@ (8006840 <netif_set_up+0x50>)
 8006806:	480f      	ldr	r0, [pc, #60]	@ (8006844 <netif_set_up+0x54>)
 8006808:	f00a f8f8 	bl	80109fc <iprintf>
 800680c:	e013      	b.n	8006836 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006814:	f003 0301 	and.w	r3, r3, #1
 8006818:	2b00      	cmp	r3, #0
 800681a:	d10c      	bne.n	8006836 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006822:	f043 0301 	orr.w	r3, r3, #1
 8006826:	b2da      	uxtb	r2, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800682e:	2103      	movs	r1, #3
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 f809 	bl	8006848 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8006836:	3708      	adds	r7, #8
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}
 800683c:	08011d48 	.word	0x08011d48
 8006840:	08011ed0 	.word	0x08011ed0
 8006844:	08011d98 	.word	0x08011d98

08006848 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	460b      	mov	r3, r1
 8006852:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d106      	bne.n	8006868 <netif_issue_reports+0x20>
 800685a:	4b18      	ldr	r3, [pc, #96]	@ (80068bc <netif_issue_reports+0x74>)
 800685c:	f240 326d 	movw	r2, #877	@ 0x36d
 8006860:	4917      	ldr	r1, [pc, #92]	@ (80068c0 <netif_issue_reports+0x78>)
 8006862:	4818      	ldr	r0, [pc, #96]	@ (80068c4 <netif_issue_reports+0x7c>)
 8006864:	f00a f8ca 	bl	80109fc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800686e:	f003 0304 	and.w	r3, r3, #4
 8006872:	2b00      	cmp	r3, #0
 8006874:	d01e      	beq.n	80068b4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800687c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006880:	2b00      	cmp	r3, #0
 8006882:	d017      	beq.n	80068b4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006884:	78fb      	ldrb	r3, [r7, #3]
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	2b00      	cmp	r3, #0
 800688c:	d013      	beq.n	80068b6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	3304      	adds	r3, #4
 8006892:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00e      	beq.n	80068b6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800689e:	f003 0308 	and.w	r3, r3, #8
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d007      	beq.n	80068b6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	3304      	adds	r3, #4
 80068aa:	4619      	mov	r1, r3
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f008 fbe3 	bl	800f078 <etharp_request>
 80068b2:	e000      	b.n	80068b6 <netif_issue_reports+0x6e>
    return;
 80068b4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80068b6:	3708      	adds	r7, #8
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	08011d48 	.word	0x08011d48
 80068c0:	08011eec 	.word	0x08011eec
 80068c4:	08011d98 	.word	0x08011d98

080068c8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d107      	bne.n	80068e6 <netif_set_down+0x1e>
 80068d6:	4b12      	ldr	r3, [pc, #72]	@ (8006920 <netif_set_down+0x58>)
 80068d8:	f240 329b 	movw	r2, #923	@ 0x39b
 80068dc:	4911      	ldr	r1, [pc, #68]	@ (8006924 <netif_set_down+0x5c>)
 80068de:	4812      	ldr	r0, [pc, #72]	@ (8006928 <netif_set_down+0x60>)
 80068e0:	f00a f88c 	bl	80109fc <iprintf>
 80068e4:	e019      	b.n	800691a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80068ec:	f003 0301 	and.w	r3, r3, #1
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d012      	beq.n	800691a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80068fa:	f023 0301 	bic.w	r3, r3, #1
 80068fe:	b2da      	uxtb	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800690c:	f003 0308 	and.w	r3, r3, #8
 8006910:	2b00      	cmp	r3, #0
 8006912:	d002      	beq.n	800691a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f007 ff6d 	bl	800e7f4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800691a:	3708      	adds	r7, #8
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}
 8006920:	08011d48 	.word	0x08011d48
 8006924:	08011f10 	.word	0x08011f10
 8006928:	08011d98 	.word	0x08011d98

0800692c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d107      	bne.n	800694a <netif_set_link_up+0x1e>
 800693a:	4b13      	ldr	r3, [pc, #76]	@ (8006988 <netif_set_link_up+0x5c>)
 800693c:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8006940:	4912      	ldr	r1, [pc, #72]	@ (800698c <netif_set_link_up+0x60>)
 8006942:	4813      	ldr	r0, [pc, #76]	@ (8006990 <netif_set_link_up+0x64>)
 8006944:	f00a f85a 	bl	80109fc <iprintf>
 8006948:	e01b      	b.n	8006982 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006950:	f003 0304 	and.w	r3, r3, #4
 8006954:	2b00      	cmp	r3, #0
 8006956:	d114      	bne.n	8006982 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800695e:	f043 0304 	orr.w	r3, r3, #4
 8006962:	b2da      	uxtb	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800696a:	2103      	movs	r1, #3
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f7ff ff6b 	bl	8006848 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	69db      	ldr	r3, [r3, #28]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d003      	beq.n	8006982 <netif_set_link_up+0x56>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	69db      	ldr	r3, [r3, #28]
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8006982:	3708      	adds	r7, #8
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	08011d48 	.word	0x08011d48
 800698c:	08011f30 	.word	0x08011f30
 8006990:	08011d98 	.word	0x08011d98

08006994 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d107      	bne.n	80069b2 <netif_set_link_down+0x1e>
 80069a2:	4b11      	ldr	r3, [pc, #68]	@ (80069e8 <netif_set_link_down+0x54>)
 80069a4:	f240 4206 	movw	r2, #1030	@ 0x406
 80069a8:	4910      	ldr	r1, [pc, #64]	@ (80069ec <netif_set_link_down+0x58>)
 80069aa:	4811      	ldr	r0, [pc, #68]	@ (80069f0 <netif_set_link_down+0x5c>)
 80069ac:	f00a f826 	bl	80109fc <iprintf>
 80069b0:	e017      	b.n	80069e2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80069b8:	f003 0304 	and.w	r3, r3, #4
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d010      	beq.n	80069e2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80069c6:	f023 0304 	bic.w	r3, r3, #4
 80069ca:	b2da      	uxtb	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	69db      	ldr	r3, [r3, #28]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d003      	beq.n	80069e2 <netif_set_link_down+0x4e>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80069e2:	3708      	adds	r7, #8
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	08011d48 	.word	0x08011d48
 80069ec:	08011f54 	.word	0x08011f54
 80069f0:	08011d98 	.word	0x08011d98

080069f4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d002      	beq.n	8006a0a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	683a      	ldr	r2, [r7, #0]
 8006a08:	61da      	str	r2, [r3, #28]
  }
}
 8006a0a:	bf00      	nop
 8006a0c:	370c      	adds	r7, #12
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8006a16:	b480      	push	{r7}
 8006a18:	b085      	sub	sp, #20
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	60f8      	str	r0, [r7, #12]
 8006a1e:	60b9      	str	r1, [r7, #8]
 8006a20:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8006a22:	f06f 030b 	mvn.w	r3, #11
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3714      	adds	r7, #20
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
	...

08006a34 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b085      	sub	sp, #20
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8006a3e:	79fb      	ldrb	r3, [r7, #7]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d013      	beq.n	8006a6c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8006a44:	4b0d      	ldr	r3, [pc, #52]	@ (8006a7c <netif_get_by_index+0x48>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	60fb      	str	r3, [r7, #12]
 8006a4a:	e00c      	b.n	8006a66 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006a52:	3301      	adds	r3, #1
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	79fa      	ldrb	r2, [r7, #7]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d101      	bne.n	8006a60 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	e006      	b.n	8006a6e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	60fb      	str	r3, [r7, #12]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1ef      	bne.n	8006a4c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3714      	adds	r7, #20
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	200087dc 	.word	0x200087dc

08006a80 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8006a86:	4b0c      	ldr	r3, [pc, #48]	@ (8006ab8 <pbuf_free_ooseq+0x38>)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8006abc <pbuf_free_ooseq+0x3c>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	607b      	str	r3, [r7, #4]
 8006a92:	e00a      	b.n	8006aaa <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d003      	beq.n	8006aa4 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f002 fc61 	bl	8009364 <tcp_free_ooseq>
      return;
 8006aa2:	e005      	b.n	8006ab0 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	607b      	str	r3, [r7, #4]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1f1      	bne.n	8006a94 <pbuf_free_ooseq+0x14>
    }
  }
}
 8006ab0:	3708      	adds	r7, #8
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	200087e5 	.word	0x200087e5
 8006abc:	200087f4 	.word	0x200087f4

08006ac0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8006ac4:	4b03      	ldr	r3, [pc, #12]	@ (8006ad4 <pbuf_pool_is_empty+0x14>)
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8006aca:	bf00      	nop
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr
 8006ad4:	200087e5 	.word	0x200087e5

08006ad8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	4611      	mov	r1, r2
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	80fb      	strh	r3, [r7, #6]
 8006aea:	4613      	mov	r3, r2
 8006aec:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	68ba      	ldr	r2, [r7, #8]
 8006af8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	88fa      	ldrh	r2, [r7, #6]
 8006afe:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	88ba      	ldrh	r2, [r7, #4]
 8006b04:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8006b06:	8b3b      	ldrh	r3, [r7, #24]
 8006b08:	b2da      	uxtb	r2, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	7f3a      	ldrb	r2, [r7, #28]
 8006b12:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2201      	movs	r2, #1
 8006b18:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	73da      	strb	r2, [r3, #15]
}
 8006b20:	bf00      	nop
 8006b22:	3714      	adds	r7, #20
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b08c      	sub	sp, #48	@ 0x30
 8006b30:	af02      	add	r7, sp, #8
 8006b32:	4603      	mov	r3, r0
 8006b34:	71fb      	strb	r3, [r7, #7]
 8006b36:	460b      	mov	r3, r1
 8006b38:	80bb      	strh	r3, [r7, #4]
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8006b3e:	79fb      	ldrb	r3, [r7, #7]
 8006b40:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8006b42:	887b      	ldrh	r3, [r7, #2]
 8006b44:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8006b48:	d07f      	beq.n	8006c4a <pbuf_alloc+0x11e>
 8006b4a:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8006b4e:	f300 80c8 	bgt.w	8006ce2 <pbuf_alloc+0x1b6>
 8006b52:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8006b56:	d010      	beq.n	8006b7a <pbuf_alloc+0x4e>
 8006b58:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8006b5c:	f300 80c1 	bgt.w	8006ce2 <pbuf_alloc+0x1b6>
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d002      	beq.n	8006b6a <pbuf_alloc+0x3e>
 8006b64:	2b41      	cmp	r3, #65	@ 0x41
 8006b66:	f040 80bc 	bne.w	8006ce2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8006b6a:	887a      	ldrh	r2, [r7, #2]
 8006b6c:	88bb      	ldrh	r3, [r7, #4]
 8006b6e:	4619      	mov	r1, r3
 8006b70:	2000      	movs	r0, #0
 8006b72:	f000 f8d1 	bl	8006d18 <pbuf_alloc_reference>
 8006b76:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8006b78:	e0bd      	b.n	8006cf6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8006b82:	88bb      	ldrh	r3, [r7, #4]
 8006b84:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006b86:	2008      	movs	r0, #8
 8006b88:	f7ff fbce 	bl	8006328 <memp_malloc>
 8006b8c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d109      	bne.n	8006ba8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8006b94:	f7ff ff94 	bl	8006ac0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8006b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d002      	beq.n	8006ba4 <pbuf_alloc+0x78>
            pbuf_free(p);
 8006b9e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006ba0:	f000 faa8 	bl	80070f4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	e0a7      	b.n	8006cf8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8006ba8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006baa:	3303      	adds	r3, #3
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	f023 0303 	bic.w	r3, r3, #3
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	8b7a      	ldrh	r2, [r7, #26]
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	bf28      	it	cs
 8006bc0:	4613      	movcs	r3, r2
 8006bc2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8006bc4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006bc6:	3310      	adds	r3, #16
 8006bc8:	693a      	ldr	r2, [r7, #16]
 8006bca:	4413      	add	r3, r2
 8006bcc:	3303      	adds	r3, #3
 8006bce:	f023 0303 	bic.w	r3, r3, #3
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	89f9      	ldrh	r1, [r7, #14]
 8006bd6:	8b7a      	ldrh	r2, [r7, #26]
 8006bd8:	2300      	movs	r3, #0
 8006bda:	9301      	str	r3, [sp, #4]
 8006bdc:	887b      	ldrh	r3, [r7, #2]
 8006bde:	9300      	str	r3, [sp, #0]
 8006be0:	460b      	mov	r3, r1
 8006be2:	4601      	mov	r1, r0
 8006be4:	6938      	ldr	r0, [r7, #16]
 8006be6:	f7ff ff77 	bl	8006ad8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f003 0303 	and.w	r3, r3, #3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d006      	beq.n	8006c04 <pbuf_alloc+0xd8>
 8006bf6:	4b42      	ldr	r3, [pc, #264]	@ (8006d00 <pbuf_alloc+0x1d4>)
 8006bf8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006bfc:	4941      	ldr	r1, [pc, #260]	@ (8006d04 <pbuf_alloc+0x1d8>)
 8006bfe:	4842      	ldr	r0, [pc, #264]	@ (8006d08 <pbuf_alloc+0x1dc>)
 8006c00:	f009 fefc 	bl	80109fc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8006c04:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006c06:	3303      	adds	r3, #3
 8006c08:	f023 0303 	bic.w	r3, r3, #3
 8006c0c:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8006c10:	d106      	bne.n	8006c20 <pbuf_alloc+0xf4>
 8006c12:	4b3b      	ldr	r3, [pc, #236]	@ (8006d00 <pbuf_alloc+0x1d4>)
 8006c14:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8006c18:	493c      	ldr	r1, [pc, #240]	@ (8006d0c <pbuf_alloc+0x1e0>)
 8006c1a:	483b      	ldr	r0, [pc, #236]	@ (8006d08 <pbuf_alloc+0x1dc>)
 8006c1c:	f009 feee 	bl	80109fc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8006c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d102      	bne.n	8006c2c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c2a:	e002      	b.n	8006c32 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	693a      	ldr	r2, [r7, #16]
 8006c30:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8006c36:	8b7a      	ldrh	r2, [r7, #26]
 8006c38:	89fb      	ldrh	r3, [r7, #14]
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8006c42:	8b7b      	ldrh	r3, [r7, #26]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d19e      	bne.n	8006b86 <pbuf_alloc+0x5a>
      break;
 8006c48:	e055      	b.n	8006cf6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8006c4a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006c4c:	3303      	adds	r3, #3
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	f023 0303 	bic.w	r3, r3, #3
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	88bb      	ldrh	r3, [r7, #4]
 8006c58:	3303      	adds	r3, #3
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	f023 0303 	bic.w	r3, r3, #3
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	4413      	add	r3, r2
 8006c64:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8006c66:	8b3b      	ldrh	r3, [r7, #24]
 8006c68:	3310      	adds	r3, #16
 8006c6a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006c6c:	8b3a      	ldrh	r2, [r7, #24]
 8006c6e:	88bb      	ldrh	r3, [r7, #4]
 8006c70:	3303      	adds	r3, #3
 8006c72:	f023 0303 	bic.w	r3, r3, #3
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d306      	bcc.n	8006c88 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8006c7a:	8afa      	ldrh	r2, [r7, #22]
 8006c7c:	88bb      	ldrh	r3, [r7, #4]
 8006c7e:	3303      	adds	r3, #3
 8006c80:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d201      	bcs.n	8006c8c <pbuf_alloc+0x160>
        return NULL;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	e035      	b.n	8006cf8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8006c8c:	8afb      	ldrh	r3, [r7, #22]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7ff f9ba 	bl	8006008 <mem_malloc>
 8006c94:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8006c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d101      	bne.n	8006ca0 <pbuf_alloc+0x174>
        return NULL;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	e02b      	b.n	8006cf8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8006ca0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006ca2:	3310      	adds	r3, #16
 8006ca4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ca6:	4413      	add	r3, r2
 8006ca8:	3303      	adds	r3, #3
 8006caa:	f023 0303 	bic.w	r3, r3, #3
 8006cae:	4618      	mov	r0, r3
 8006cb0:	88b9      	ldrh	r1, [r7, #4]
 8006cb2:	88ba      	ldrh	r2, [r7, #4]
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	9301      	str	r3, [sp, #4]
 8006cb8:	887b      	ldrh	r3, [r7, #2]
 8006cba:	9300      	str	r3, [sp, #0]
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	4601      	mov	r1, r0
 8006cc0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006cc2:	f7ff ff09 	bl	8006ad8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	f003 0303 	and.w	r3, r3, #3
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d010      	beq.n	8006cf4 <pbuf_alloc+0x1c8>
 8006cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8006d00 <pbuf_alloc+0x1d4>)
 8006cd4:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8006cd8:	490d      	ldr	r1, [pc, #52]	@ (8006d10 <pbuf_alloc+0x1e4>)
 8006cda:	480b      	ldr	r0, [pc, #44]	@ (8006d08 <pbuf_alloc+0x1dc>)
 8006cdc:	f009 fe8e 	bl	80109fc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8006ce0:	e008      	b.n	8006cf4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8006ce2:	4b07      	ldr	r3, [pc, #28]	@ (8006d00 <pbuf_alloc+0x1d4>)
 8006ce4:	f240 1227 	movw	r2, #295	@ 0x127
 8006ce8:	490a      	ldr	r1, [pc, #40]	@ (8006d14 <pbuf_alloc+0x1e8>)
 8006cea:	4807      	ldr	r0, [pc, #28]	@ (8006d08 <pbuf_alloc+0x1dc>)
 8006cec:	f009 fe86 	bl	80109fc <iprintf>
      return NULL;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	e001      	b.n	8006cf8 <pbuf_alloc+0x1cc>
      break;
 8006cf4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8006cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3728      	adds	r7, #40	@ 0x28
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	08011f78 	.word	0x08011f78
 8006d04:	08011fa8 	.word	0x08011fa8
 8006d08:	08011fd8 	.word	0x08011fd8
 8006d0c:	08012000 	.word	0x08012000
 8006d10:	08012034 	.word	0x08012034
 8006d14:	08012060 	.word	0x08012060

08006d18 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af02      	add	r7, sp, #8
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	460b      	mov	r3, r1
 8006d22:	807b      	strh	r3, [r7, #2]
 8006d24:	4613      	mov	r3, r2
 8006d26:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8006d28:	883b      	ldrh	r3, [r7, #0]
 8006d2a:	2b41      	cmp	r3, #65	@ 0x41
 8006d2c:	d009      	beq.n	8006d42 <pbuf_alloc_reference+0x2a>
 8006d2e:	883b      	ldrh	r3, [r7, #0]
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d006      	beq.n	8006d42 <pbuf_alloc_reference+0x2a>
 8006d34:	4b0f      	ldr	r3, [pc, #60]	@ (8006d74 <pbuf_alloc_reference+0x5c>)
 8006d36:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8006d3a:	490f      	ldr	r1, [pc, #60]	@ (8006d78 <pbuf_alloc_reference+0x60>)
 8006d3c:	480f      	ldr	r0, [pc, #60]	@ (8006d7c <pbuf_alloc_reference+0x64>)
 8006d3e:	f009 fe5d 	bl	80109fc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006d42:	2007      	movs	r0, #7
 8006d44:	f7ff faf0 	bl	8006328 <memp_malloc>
 8006d48:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d101      	bne.n	8006d54 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8006d50:	2300      	movs	r3, #0
 8006d52:	e00b      	b.n	8006d6c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8006d54:	8879      	ldrh	r1, [r7, #2]
 8006d56:	887a      	ldrh	r2, [r7, #2]
 8006d58:	2300      	movs	r3, #0
 8006d5a:	9301      	str	r3, [sp, #4]
 8006d5c:	883b      	ldrh	r3, [r7, #0]
 8006d5e:	9300      	str	r3, [sp, #0]
 8006d60:	460b      	mov	r3, r1
 8006d62:	6879      	ldr	r1, [r7, #4]
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f7ff feb7 	bl	8006ad8 <pbuf_init_alloced_pbuf>
  return p;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	08011f78 	.word	0x08011f78
 8006d78:	0801207c 	.word	0x0801207c
 8006d7c:	08011fd8 	.word	0x08011fd8

08006d80 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b088      	sub	sp, #32
 8006d84:	af02      	add	r7, sp, #8
 8006d86:	607b      	str	r3, [r7, #4]
 8006d88:	4603      	mov	r3, r0
 8006d8a:	73fb      	strb	r3, [r7, #15]
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	81bb      	strh	r3, [r7, #12]
 8006d90:	4613      	mov	r3, r2
 8006d92:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8006d94:	7bfb      	ldrb	r3, [r7, #15]
 8006d96:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006d98:	8a7b      	ldrh	r3, [r7, #18]
 8006d9a:	3303      	adds	r3, #3
 8006d9c:	f023 0203 	bic.w	r2, r3, #3
 8006da0:	89bb      	ldrh	r3, [r7, #12]
 8006da2:	441a      	add	r2, r3
 8006da4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d901      	bls.n	8006dae <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8006daa:	2300      	movs	r3, #0
 8006dac:	e018      	b.n	8006de0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8006dae:	6a3b      	ldr	r3, [r7, #32]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d007      	beq.n	8006dc4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006db4:	8a7b      	ldrh	r3, [r7, #18]
 8006db6:	3303      	adds	r3, #3
 8006db8:	f023 0303 	bic.w	r3, r3, #3
 8006dbc:	6a3a      	ldr	r2, [r7, #32]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	617b      	str	r3, [r7, #20]
 8006dc2:	e001      	b.n	8006dc8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	89b9      	ldrh	r1, [r7, #12]
 8006dcc:	89ba      	ldrh	r2, [r7, #12]
 8006dce:	2302      	movs	r3, #2
 8006dd0:	9301      	str	r3, [sp, #4]
 8006dd2:	897b      	ldrh	r3, [r7, #10]
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	6979      	ldr	r1, [r7, #20]
 8006dda:	f7ff fe7d 	bl	8006ad8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8006dde:	687b      	ldr	r3, [r7, #4]
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3718      	adds	r7, #24
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	460b      	mov	r3, r1
 8006df2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d106      	bne.n	8006e08 <pbuf_realloc+0x20>
 8006dfa:	4b3a      	ldr	r3, [pc, #232]	@ (8006ee4 <pbuf_realloc+0xfc>)
 8006dfc:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8006e00:	4939      	ldr	r1, [pc, #228]	@ (8006ee8 <pbuf_realloc+0x100>)
 8006e02:	483a      	ldr	r0, [pc, #232]	@ (8006eec <pbuf_realloc+0x104>)
 8006e04:	f009 fdfa 	bl	80109fc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	891b      	ldrh	r3, [r3, #8]
 8006e0c:	887a      	ldrh	r2, [r7, #2]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d263      	bcs.n	8006eda <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	891a      	ldrh	r2, [r3, #8]
 8006e16:	887b      	ldrh	r3, [r7, #2]
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006e1c:	887b      	ldrh	r3, [r7, #2]
 8006e1e:	817b      	strh	r3, [r7, #10]
  q = p;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006e24:	e018      	b.n	8006e58 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	895b      	ldrh	r3, [r3, #10]
 8006e2a:	897a      	ldrh	r2, [r7, #10]
 8006e2c:	1ad3      	subs	r3, r2, r3
 8006e2e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	891a      	ldrh	r2, [r3, #8]
 8006e34:	893b      	ldrh	r3, [r7, #8]
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d106      	bne.n	8006e58 <pbuf_realloc+0x70>
 8006e4a:	4b26      	ldr	r3, [pc, #152]	@ (8006ee4 <pbuf_realloc+0xfc>)
 8006e4c:	f240 12af 	movw	r2, #431	@ 0x1af
 8006e50:	4927      	ldr	r1, [pc, #156]	@ (8006ef0 <pbuf_realloc+0x108>)
 8006e52:	4826      	ldr	r0, [pc, #152]	@ (8006eec <pbuf_realloc+0x104>)
 8006e54:	f009 fdd2 	bl	80109fc <iprintf>
  while (rem_len > q->len) {
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	895b      	ldrh	r3, [r3, #10]
 8006e5c:	897a      	ldrh	r2, [r7, #10]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d8e1      	bhi.n	8006e26 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	7b1b      	ldrb	r3, [r3, #12]
 8006e66:	f003 030f 	and.w	r3, r3, #15
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d121      	bne.n	8006eb2 <pbuf_realloc+0xca>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	895b      	ldrh	r3, [r3, #10]
 8006e72:	897a      	ldrh	r2, [r7, #10]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d01c      	beq.n	8006eb2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	7b5b      	ldrb	r3, [r3, #13]
 8006e7c:	f003 0302 	and.w	r3, r3, #2
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d116      	bne.n	8006eb2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	685a      	ldr	r2, [r3, #4]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	1ad3      	subs	r3, r2, r3
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	897b      	ldrh	r3, [r7, #10]
 8006e90:	4413      	add	r3, r2
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	4619      	mov	r1, r3
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f7fe ffba 	bl	8005e10 <mem_trim>
 8006e9c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d106      	bne.n	8006eb2 <pbuf_realloc+0xca>
 8006ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8006ee4 <pbuf_realloc+0xfc>)
 8006ea6:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8006eaa:	4912      	ldr	r1, [pc, #72]	@ (8006ef4 <pbuf_realloc+0x10c>)
 8006eac:	480f      	ldr	r0, [pc, #60]	@ (8006eec <pbuf_realloc+0x104>)
 8006eae:	f009 fda5 	bl	80109fc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	897a      	ldrh	r2, [r7, #10]
 8006eb6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	895a      	ldrh	r2, [r3, #10]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d004      	beq.n	8006ed2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f000 f911 	bl	80070f4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	601a      	str	r2, [r3, #0]
 8006ed8:	e000      	b.n	8006edc <pbuf_realloc+0xf4>
    return;
 8006eda:	bf00      	nop

}
 8006edc:	3710      	adds	r7, #16
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	08011f78 	.word	0x08011f78
 8006ee8:	08012090 	.word	0x08012090
 8006eec:	08011fd8 	.word	0x08011fd8
 8006ef0:	080120a8 	.word	0x080120a8
 8006ef4:	080120c0 	.word	0x080120c0

08006ef8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b086      	sub	sp, #24
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	4613      	mov	r3, r2
 8006f04:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d106      	bne.n	8006f1a <pbuf_add_header_impl+0x22>
 8006f0c:	4b2b      	ldr	r3, [pc, #172]	@ (8006fbc <pbuf_add_header_impl+0xc4>)
 8006f0e:	f240 12df 	movw	r2, #479	@ 0x1df
 8006f12:	492b      	ldr	r1, [pc, #172]	@ (8006fc0 <pbuf_add_header_impl+0xc8>)
 8006f14:	482b      	ldr	r0, [pc, #172]	@ (8006fc4 <pbuf_add_header_impl+0xcc>)
 8006f16:	f009 fd71 	bl	80109fc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d003      	beq.n	8006f28 <pbuf_add_header_impl+0x30>
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f26:	d301      	bcc.n	8006f2c <pbuf_add_header_impl+0x34>
    return 1;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e043      	b.n	8006fb4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d101      	bne.n	8006f36 <pbuf_add_header_impl+0x3e>
    return 0;
 8006f32:	2300      	movs	r3, #0
 8006f34:	e03e      	b.n	8006fb4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	891a      	ldrh	r2, [r3, #8]
 8006f3e:	8a7b      	ldrh	r3, [r7, #18]
 8006f40:	4413      	add	r3, r2
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	8a7a      	ldrh	r2, [r7, #18]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d901      	bls.n	8006f4e <pbuf_add_header_impl+0x56>
    return 1;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e032      	b.n	8006fb4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	7b1b      	ldrb	r3, [r3, #12]
 8006f52:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006f54:	8a3b      	ldrh	r3, [r7, #16]
 8006f56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00c      	beq.n	8006f78 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	685a      	ldr	r2, [r3, #4]
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	425b      	negs	r3, r3
 8006f66:	4413      	add	r3, r2
 8006f68:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	3310      	adds	r3, #16
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d20d      	bcs.n	8006f90 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e01d      	b.n	8006fb4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8006f78:	79fb      	ldrb	r3, [r7, #7]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d006      	beq.n	8006f8c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	685a      	ldr	r2, [r3, #4]
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	425b      	negs	r3, r3
 8006f86:	4413      	add	r3, r2
 8006f88:	617b      	str	r3, [r7, #20]
 8006f8a:	e001      	b.n	8006f90 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e011      	b.n	8006fb4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	895a      	ldrh	r2, [r3, #10]
 8006f9a:	8a7b      	ldrh	r3, [r7, #18]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	b29a      	uxth	r2, r3
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	891a      	ldrh	r2, [r3, #8]
 8006fa8:	8a7b      	ldrh	r3, [r7, #18]
 8006faa:	4413      	add	r3, r2
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	811a      	strh	r2, [r3, #8]


  return 0;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3718      	adds	r7, #24
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	08011f78 	.word	0x08011f78
 8006fc0:	080120dc 	.word	0x080120dc
 8006fc4:	08011fd8 	.word	0x08011fd8

08006fc8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	6839      	ldr	r1, [r7, #0]
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f7ff ff8e 	bl	8006ef8 <pbuf_add_header_impl>
 8006fdc:	4603      	mov	r3, r0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3708      	adds	r7, #8
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
	...

08006fe8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d106      	bne.n	8007006 <pbuf_remove_header+0x1e>
 8006ff8:	4b20      	ldr	r3, [pc, #128]	@ (800707c <pbuf_remove_header+0x94>)
 8006ffa:	f240 224b 	movw	r2, #587	@ 0x24b
 8006ffe:	4920      	ldr	r1, [pc, #128]	@ (8007080 <pbuf_remove_header+0x98>)
 8007000:	4820      	ldr	r0, [pc, #128]	@ (8007084 <pbuf_remove_header+0x9c>)
 8007002:	f009 fcfb 	bl	80109fc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d003      	beq.n	8007014 <pbuf_remove_header+0x2c>
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007012:	d301      	bcc.n	8007018 <pbuf_remove_header+0x30>
    return 1;
 8007014:	2301      	movs	r3, #1
 8007016:	e02c      	b.n	8007072 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d101      	bne.n	8007022 <pbuf_remove_header+0x3a>
    return 0;
 800701e:	2300      	movs	r3, #0
 8007020:	e027      	b.n	8007072 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	895b      	ldrh	r3, [r3, #10]
 800702a:	89fa      	ldrh	r2, [r7, #14]
 800702c:	429a      	cmp	r2, r3
 800702e:	d908      	bls.n	8007042 <pbuf_remove_header+0x5a>
 8007030:	4b12      	ldr	r3, [pc, #72]	@ (800707c <pbuf_remove_header+0x94>)
 8007032:	f240 2255 	movw	r2, #597	@ 0x255
 8007036:	4914      	ldr	r1, [pc, #80]	@ (8007088 <pbuf_remove_header+0xa0>)
 8007038:	4812      	ldr	r0, [pc, #72]	@ (8007084 <pbuf_remove_header+0x9c>)
 800703a:	f009 fcdf 	bl	80109fc <iprintf>
 800703e:	2301      	movs	r3, #1
 8007040:	e017      	b.n	8007072 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	441a      	add	r2, r3
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	895a      	ldrh	r2, [r3, #10]
 8007058:	89fb      	ldrh	r3, [r7, #14]
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	b29a      	uxth	r2, r3
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	891a      	ldrh	r2, [r3, #8]
 8007066:	89fb      	ldrh	r3, [r7, #14]
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	b29a      	uxth	r2, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	08011f78 	.word	0x08011f78
 8007080:	080120dc 	.word	0x080120dc
 8007084:	08011fd8 	.word	0x08011fd8
 8007088:	080120e8 	.word	0x080120e8

0800708c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	460b      	mov	r3, r1
 8007096:	807b      	strh	r3, [r7, #2]
 8007098:	4613      	mov	r3, r2
 800709a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800709c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	da08      	bge.n	80070b6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80070a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80070a8:	425b      	negs	r3, r3
 80070aa:	4619      	mov	r1, r3
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f7ff ff9b 	bl	8006fe8 <pbuf_remove_header>
 80070b2:	4603      	mov	r3, r0
 80070b4:	e007      	b.n	80070c6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80070b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80070ba:	787a      	ldrb	r2, [r7, #1]
 80070bc:	4619      	mov	r1, r3
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f7ff ff1a 	bl	8006ef8 <pbuf_add_header_impl>
 80070c4:	4603      	mov	r3, r0
  }
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3708      	adds	r7, #8
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}

080070ce <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b082      	sub	sp, #8
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
 80070d6:	460b      	mov	r3, r1
 80070d8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80070da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80070de:	2201      	movs	r2, #1
 80070e0:	4619      	mov	r1, r3
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f7ff ffd2 	bl	800708c <pbuf_header_impl>
 80070e8:	4603      	mov	r3, r0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3708      	adds	r7, #8
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
	...

080070f4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d10b      	bne.n	800711a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d106      	bne.n	8007116 <pbuf_free+0x22>
 8007108:	4b38      	ldr	r3, [pc, #224]	@ (80071ec <pbuf_free+0xf8>)
 800710a:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800710e:	4938      	ldr	r1, [pc, #224]	@ (80071f0 <pbuf_free+0xfc>)
 8007110:	4838      	ldr	r0, [pc, #224]	@ (80071f4 <pbuf_free+0x100>)
 8007112:	f009 fc73 	bl	80109fc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8007116:	2300      	movs	r3, #0
 8007118:	e063      	b.n	80071e2 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800711a:	2300      	movs	r3, #0
 800711c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800711e:	e05c      	b.n	80071da <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	7b9b      	ldrb	r3, [r3, #14]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d106      	bne.n	8007136 <pbuf_free+0x42>
 8007128:	4b30      	ldr	r3, [pc, #192]	@ (80071ec <pbuf_free+0xf8>)
 800712a:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800712e:	4932      	ldr	r1, [pc, #200]	@ (80071f8 <pbuf_free+0x104>)
 8007130:	4830      	ldr	r0, [pc, #192]	@ (80071f4 <pbuf_free+0x100>)
 8007132:	f009 fc63 	bl	80109fc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	7b9b      	ldrb	r3, [r3, #14]
 800713a:	3b01      	subs	r3, #1
 800713c:	b2da      	uxtb	r2, r3
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	739a      	strb	r2, [r3, #14]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	7b9b      	ldrb	r3, [r3, #14]
 8007146:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8007148:	7dbb      	ldrb	r3, [r7, #22]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d143      	bne.n	80071d6 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	7b1b      	ldrb	r3, [r3, #12]
 8007158:	f003 030f 	and.w	r3, r3, #15
 800715c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	7b5b      	ldrb	r3, [r3, #13]
 8007162:	f003 0302 	and.w	r3, r3, #2
 8007166:	2b00      	cmp	r3, #0
 8007168:	d011      	beq.n	800718e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d106      	bne.n	8007184 <pbuf_free+0x90>
 8007176:	4b1d      	ldr	r3, [pc, #116]	@ (80071ec <pbuf_free+0xf8>)
 8007178:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800717c:	491f      	ldr	r1, [pc, #124]	@ (80071fc <pbuf_free+0x108>)
 800717e:	481d      	ldr	r0, [pc, #116]	@ (80071f4 <pbuf_free+0x100>)
 8007180:	f009 fc3c 	bl	80109fc <iprintf>
        pc->custom_free_function(p);
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	4798      	blx	r3
 800718c:	e01d      	b.n	80071ca <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800718e:	7bfb      	ldrb	r3, [r7, #15]
 8007190:	2b02      	cmp	r3, #2
 8007192:	d104      	bne.n	800719e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8007194:	6879      	ldr	r1, [r7, #4]
 8007196:	2008      	movs	r0, #8
 8007198:	f7ff f936 	bl	8006408 <memp_free>
 800719c:	e015      	b.n	80071ca <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800719e:	7bfb      	ldrb	r3, [r7, #15]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d104      	bne.n	80071ae <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80071a4:	6879      	ldr	r1, [r7, #4]
 80071a6:	2007      	movs	r0, #7
 80071a8:	f7ff f92e 	bl	8006408 <memp_free>
 80071ac:	e00d      	b.n	80071ca <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80071ae:	7bfb      	ldrb	r3, [r7, #15]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d103      	bne.n	80071bc <pbuf_free+0xc8>
          mem_free(p);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f7fe fdc1 	bl	8005d3c <mem_free>
 80071ba:	e006      	b.n	80071ca <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80071bc:	4b0b      	ldr	r3, [pc, #44]	@ (80071ec <pbuf_free+0xf8>)
 80071be:	f240 320f 	movw	r2, #783	@ 0x30f
 80071c2:	490f      	ldr	r1, [pc, #60]	@ (8007200 <pbuf_free+0x10c>)
 80071c4:	480b      	ldr	r0, [pc, #44]	@ (80071f4 <pbuf_free+0x100>)
 80071c6:	f009 fc19 	bl	80109fc <iprintf>
        }
      }
      count++;
 80071ca:	7dfb      	ldrb	r3, [r7, #23]
 80071cc:	3301      	adds	r3, #1
 80071ce:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	607b      	str	r3, [r7, #4]
 80071d4:	e001      	b.n	80071da <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80071d6:	2300      	movs	r3, #0
 80071d8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d19f      	bne.n	8007120 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80071e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3718      	adds	r7, #24
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	08011f78 	.word	0x08011f78
 80071f0:	080120dc 	.word	0x080120dc
 80071f4:	08011fd8 	.word	0x08011fd8
 80071f8:	08012108 	.word	0x08012108
 80071fc:	08012120 	.word	0x08012120
 8007200:	08012144 	.word	0x08012144

08007204 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800720c:	2300      	movs	r3, #0
 800720e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8007210:	e005      	b.n	800721e <pbuf_clen+0x1a>
    ++len;
 8007212:	89fb      	ldrh	r3, [r7, #14]
 8007214:	3301      	adds	r3, #1
 8007216:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d1f6      	bne.n	8007212 <pbuf_clen+0xe>
  }
  return len;
 8007224:	89fb      	ldrh	r3, [r7, #14]
}
 8007226:	4618      	mov	r0, r3
 8007228:	3714      	adds	r7, #20
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
	...

08007234 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d010      	beq.n	8007264 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	7b9b      	ldrb	r3, [r3, #14]
 8007246:	3301      	adds	r3, #1
 8007248:	b2da      	uxtb	r2, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	7b9b      	ldrb	r3, [r3, #14]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d106      	bne.n	8007264 <pbuf_ref+0x30>
 8007256:	4b05      	ldr	r3, [pc, #20]	@ (800726c <pbuf_ref+0x38>)
 8007258:	f240 3242 	movw	r2, #834	@ 0x342
 800725c:	4904      	ldr	r1, [pc, #16]	@ (8007270 <pbuf_ref+0x3c>)
 800725e:	4805      	ldr	r0, [pc, #20]	@ (8007274 <pbuf_ref+0x40>)
 8007260:	f009 fbcc 	bl	80109fc <iprintf>
  }
}
 8007264:	bf00      	nop
 8007266:	3708      	adds	r7, #8
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	08011f78 	.word	0x08011f78
 8007270:	08012158 	.word	0x08012158
 8007274:	08011fd8 	.word	0x08011fd8

08007278 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d002      	beq.n	800728e <pbuf_cat+0x16>
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d107      	bne.n	800729e <pbuf_cat+0x26>
 800728e:	4b20      	ldr	r3, [pc, #128]	@ (8007310 <pbuf_cat+0x98>)
 8007290:	f240 3259 	movw	r2, #857	@ 0x359
 8007294:	491f      	ldr	r1, [pc, #124]	@ (8007314 <pbuf_cat+0x9c>)
 8007296:	4820      	ldr	r0, [pc, #128]	@ (8007318 <pbuf_cat+0xa0>)
 8007298:	f009 fbb0 	bl	80109fc <iprintf>
 800729c:	e034      	b.n	8007308 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	60fb      	str	r3, [r7, #12]
 80072a2:	e00a      	b.n	80072ba <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	891a      	ldrh	r2, [r3, #8]
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	891b      	ldrh	r3, [r3, #8]
 80072ac:	4413      	add	r3, r2
 80072ae:	b29a      	uxth	r2, r3
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	60fb      	str	r3, [r7, #12]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1f0      	bne.n	80072a4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	891a      	ldrh	r2, [r3, #8]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	895b      	ldrh	r3, [r3, #10]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d006      	beq.n	80072dc <pbuf_cat+0x64>
 80072ce:	4b10      	ldr	r3, [pc, #64]	@ (8007310 <pbuf_cat+0x98>)
 80072d0:	f240 3262 	movw	r2, #866	@ 0x362
 80072d4:	4911      	ldr	r1, [pc, #68]	@ (800731c <pbuf_cat+0xa4>)
 80072d6:	4810      	ldr	r0, [pc, #64]	@ (8007318 <pbuf_cat+0xa0>)
 80072d8:	f009 fb90 	bl	80109fc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d006      	beq.n	80072f2 <pbuf_cat+0x7a>
 80072e4:	4b0a      	ldr	r3, [pc, #40]	@ (8007310 <pbuf_cat+0x98>)
 80072e6:	f240 3263 	movw	r2, #867	@ 0x363
 80072ea:	490d      	ldr	r1, [pc, #52]	@ (8007320 <pbuf_cat+0xa8>)
 80072ec:	480a      	ldr	r0, [pc, #40]	@ (8007318 <pbuf_cat+0xa0>)
 80072ee:	f009 fb85 	bl	80109fc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	891a      	ldrh	r2, [r3, #8]
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	891b      	ldrh	r3, [r3, #8]
 80072fa:	4413      	add	r3, r2
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	683a      	ldr	r2, [r7, #0]
 8007306:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	08011f78 	.word	0x08011f78
 8007314:	0801216c 	.word	0x0801216c
 8007318:	08011fd8 	.word	0x08011fd8
 800731c:	080121a4 	.word	0x080121a4
 8007320:	080121d4 	.word	0x080121d4

08007324 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b086      	sub	sp, #24
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800732e:	2300      	movs	r3, #0
 8007330:	617b      	str	r3, [r7, #20]
 8007332:	2300      	movs	r3, #0
 8007334:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d008      	beq.n	800734e <pbuf_copy+0x2a>
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d005      	beq.n	800734e <pbuf_copy+0x2a>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	891a      	ldrh	r2, [r3, #8]
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	891b      	ldrh	r3, [r3, #8]
 800734a:	429a      	cmp	r2, r3
 800734c:	d209      	bcs.n	8007362 <pbuf_copy+0x3e>
 800734e:	4b57      	ldr	r3, [pc, #348]	@ (80074ac <pbuf_copy+0x188>)
 8007350:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8007354:	4956      	ldr	r1, [pc, #344]	@ (80074b0 <pbuf_copy+0x18c>)
 8007356:	4857      	ldr	r0, [pc, #348]	@ (80074b4 <pbuf_copy+0x190>)
 8007358:	f009 fb50 	bl	80109fc <iprintf>
 800735c:	f06f 030f 	mvn.w	r3, #15
 8007360:	e09f      	b.n	80074a2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	895b      	ldrh	r3, [r3, #10]
 8007366:	461a      	mov	r2, r3
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	1ad2      	subs	r2, r2, r3
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	895b      	ldrh	r3, [r3, #10]
 8007370:	4619      	mov	r1, r3
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	1acb      	subs	r3, r1, r3
 8007376:	429a      	cmp	r2, r3
 8007378:	d306      	bcc.n	8007388 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	895b      	ldrh	r3, [r3, #10]
 800737e:	461a      	mov	r2, r3
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	60fb      	str	r3, [r7, #12]
 8007386:	e005      	b.n	8007394 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	895b      	ldrh	r3, [r3, #10]
 800738c:	461a      	mov	r2, r3
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	685a      	ldr	r2, [r3, #4]
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	18d0      	adds	r0, r2, r3
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	685a      	ldr	r2, [r3, #4]
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	4413      	add	r3, r2
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	4619      	mov	r1, r3
 80073a8:	f009 fcfd 	bl	8010da6 <memcpy>
    offset_to += len;
 80073ac:	697a      	ldr	r2, [r7, #20]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	4413      	add	r3, r2
 80073b2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80073b4:	693a      	ldr	r2, [r7, #16]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	4413      	add	r3, r2
 80073ba:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	895b      	ldrh	r3, [r3, #10]
 80073c0:	461a      	mov	r2, r3
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d906      	bls.n	80073d6 <pbuf_copy+0xb2>
 80073c8:	4b38      	ldr	r3, [pc, #224]	@ (80074ac <pbuf_copy+0x188>)
 80073ca:	f240 32d9 	movw	r2, #985	@ 0x3d9
 80073ce:	493a      	ldr	r1, [pc, #232]	@ (80074b8 <pbuf_copy+0x194>)
 80073d0:	4838      	ldr	r0, [pc, #224]	@ (80074b4 <pbuf_copy+0x190>)
 80073d2:	f009 fb13 	bl	80109fc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	895b      	ldrh	r3, [r3, #10]
 80073da:	461a      	mov	r2, r3
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	4293      	cmp	r3, r2
 80073e0:	d906      	bls.n	80073f0 <pbuf_copy+0xcc>
 80073e2:	4b32      	ldr	r3, [pc, #200]	@ (80074ac <pbuf_copy+0x188>)
 80073e4:	f240 32da 	movw	r2, #986	@ 0x3da
 80073e8:	4934      	ldr	r1, [pc, #208]	@ (80074bc <pbuf_copy+0x198>)
 80073ea:	4832      	ldr	r0, [pc, #200]	@ (80074b4 <pbuf_copy+0x190>)
 80073ec:	f009 fb06 	bl	80109fc <iprintf>
    if (offset_from >= p_from->len) {
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	895b      	ldrh	r3, [r3, #10]
 80073f4:	461a      	mov	r2, r3
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d304      	bcc.n	8007406 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80073fc:	2300      	movs	r3, #0
 80073fe:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	895b      	ldrh	r3, [r3, #10]
 800740a:	461a      	mov	r2, r3
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	4293      	cmp	r3, r2
 8007410:	d114      	bne.n	800743c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8007412:	2300      	movs	r3, #0
 8007414:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d10c      	bne.n	800743c <pbuf_copy+0x118>
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d009      	beq.n	800743c <pbuf_copy+0x118>
 8007428:	4b20      	ldr	r3, [pc, #128]	@ (80074ac <pbuf_copy+0x188>)
 800742a:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800742e:	4924      	ldr	r1, [pc, #144]	@ (80074c0 <pbuf_copy+0x19c>)
 8007430:	4820      	ldr	r0, [pc, #128]	@ (80074b4 <pbuf_copy+0x190>)
 8007432:	f009 fae3 	bl	80109fc <iprintf>
 8007436:	f06f 030f 	mvn.w	r3, #15
 800743a:	e032      	b.n	80074a2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d013      	beq.n	800746a <pbuf_copy+0x146>
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	895a      	ldrh	r2, [r3, #10]
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	891b      	ldrh	r3, [r3, #8]
 800744a:	429a      	cmp	r2, r3
 800744c:	d10d      	bne.n	800746a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d009      	beq.n	800746a <pbuf_copy+0x146>
 8007456:	4b15      	ldr	r3, [pc, #84]	@ (80074ac <pbuf_copy+0x188>)
 8007458:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800745c:	4919      	ldr	r1, [pc, #100]	@ (80074c4 <pbuf_copy+0x1a0>)
 800745e:	4815      	ldr	r0, [pc, #84]	@ (80074b4 <pbuf_copy+0x190>)
 8007460:	f009 facc 	bl	80109fc <iprintf>
 8007464:	f06f 0305 	mvn.w	r3, #5
 8007468:	e01b      	b.n	80074a2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d013      	beq.n	8007498 <pbuf_copy+0x174>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	895a      	ldrh	r2, [r3, #10]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	891b      	ldrh	r3, [r3, #8]
 8007478:	429a      	cmp	r2, r3
 800747a:	d10d      	bne.n	8007498 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d009      	beq.n	8007498 <pbuf_copy+0x174>
 8007484:	4b09      	ldr	r3, [pc, #36]	@ (80074ac <pbuf_copy+0x188>)
 8007486:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800748a:	490e      	ldr	r1, [pc, #56]	@ (80074c4 <pbuf_copy+0x1a0>)
 800748c:	4809      	ldr	r0, [pc, #36]	@ (80074b4 <pbuf_copy+0x190>)
 800748e:	f009 fab5 	bl	80109fc <iprintf>
 8007492:	f06f 0305 	mvn.w	r3, #5
 8007496:	e004      	b.n	80074a2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	f47f af61 	bne.w	8007362 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3718      	adds	r7, #24
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	08011f78 	.word	0x08011f78
 80074b0:	08012220 	.word	0x08012220
 80074b4:	08011fd8 	.word	0x08011fd8
 80074b8:	08012250 	.word	0x08012250
 80074bc:	08012268 	.word	0x08012268
 80074c0:	08012284 	.word	0x08012284
 80074c4:	08012294 	.word	0x08012294

080074c8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b088      	sub	sp, #32
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	4611      	mov	r1, r2
 80074d4:	461a      	mov	r2, r3
 80074d6:	460b      	mov	r3, r1
 80074d8:	80fb      	strh	r3, [r7, #6]
 80074da:	4613      	mov	r3, r2
 80074dc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80074de:	2300      	movs	r3, #0
 80074e0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80074e2:	2300      	movs	r3, #0
 80074e4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d108      	bne.n	80074fe <pbuf_copy_partial+0x36>
 80074ec:	4b2b      	ldr	r3, [pc, #172]	@ (800759c <pbuf_copy_partial+0xd4>)
 80074ee:	f240 420a 	movw	r2, #1034	@ 0x40a
 80074f2:	492b      	ldr	r1, [pc, #172]	@ (80075a0 <pbuf_copy_partial+0xd8>)
 80074f4:	482b      	ldr	r0, [pc, #172]	@ (80075a4 <pbuf_copy_partial+0xdc>)
 80074f6:	f009 fa81 	bl	80109fc <iprintf>
 80074fa:	2300      	movs	r3, #0
 80074fc:	e04a      	b.n	8007594 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d108      	bne.n	8007516 <pbuf_copy_partial+0x4e>
 8007504:	4b25      	ldr	r3, [pc, #148]	@ (800759c <pbuf_copy_partial+0xd4>)
 8007506:	f240 420b 	movw	r2, #1035	@ 0x40b
 800750a:	4927      	ldr	r1, [pc, #156]	@ (80075a8 <pbuf_copy_partial+0xe0>)
 800750c:	4825      	ldr	r0, [pc, #148]	@ (80075a4 <pbuf_copy_partial+0xdc>)
 800750e:	f009 fa75 	bl	80109fc <iprintf>
 8007512:	2300      	movs	r3, #0
 8007514:	e03e      	b.n	8007594 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	61fb      	str	r3, [r7, #28]
 800751a:	e034      	b.n	8007586 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800751c:	88bb      	ldrh	r3, [r7, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00a      	beq.n	8007538 <pbuf_copy_partial+0x70>
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	895b      	ldrh	r3, [r3, #10]
 8007526:	88ba      	ldrh	r2, [r7, #4]
 8007528:	429a      	cmp	r2, r3
 800752a:	d305      	bcc.n	8007538 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	895b      	ldrh	r3, [r3, #10]
 8007530:	88ba      	ldrh	r2, [r7, #4]
 8007532:	1ad3      	subs	r3, r2, r3
 8007534:	80bb      	strh	r3, [r7, #4]
 8007536:	e023      	b.n	8007580 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	895a      	ldrh	r2, [r3, #10]
 800753c:	88bb      	ldrh	r3, [r7, #4]
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8007542:	8b3a      	ldrh	r2, [r7, #24]
 8007544:	88fb      	ldrh	r3, [r7, #6]
 8007546:	429a      	cmp	r2, r3
 8007548:	d901      	bls.n	800754e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800754a:	88fb      	ldrh	r3, [r7, #6]
 800754c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800754e:	8b7b      	ldrh	r3, [r7, #26]
 8007550:	68ba      	ldr	r2, [r7, #8]
 8007552:	18d0      	adds	r0, r2, r3
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	685a      	ldr	r2, [r3, #4]
 8007558:	88bb      	ldrh	r3, [r7, #4]
 800755a:	4413      	add	r3, r2
 800755c:	8b3a      	ldrh	r2, [r7, #24]
 800755e:	4619      	mov	r1, r3
 8007560:	f009 fc21 	bl	8010da6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8007564:	8afa      	ldrh	r2, [r7, #22]
 8007566:	8b3b      	ldrh	r3, [r7, #24]
 8007568:	4413      	add	r3, r2
 800756a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800756c:	8b7a      	ldrh	r2, [r7, #26]
 800756e:	8b3b      	ldrh	r3, [r7, #24]
 8007570:	4413      	add	r3, r2
 8007572:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8007574:	88fa      	ldrh	r2, [r7, #6]
 8007576:	8b3b      	ldrh	r3, [r7, #24]
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800757c:	2300      	movs	r3, #0
 800757e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	61fb      	str	r3, [r7, #28]
 8007586:	88fb      	ldrh	r3, [r7, #6]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d002      	beq.n	8007592 <pbuf_copy_partial+0xca>
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1c4      	bne.n	800751c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8007592:	8afb      	ldrh	r3, [r7, #22]
}
 8007594:	4618      	mov	r0, r3
 8007596:	3720      	adds	r7, #32
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	08011f78 	.word	0x08011f78
 80075a0:	080122c0 	.word	0x080122c0
 80075a4:	08011fd8 	.word	0x08011fd8
 80075a8:	080122e0 	.word	0x080122e0

080075ac <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	4603      	mov	r3, r0
 80075b4:	603a      	str	r2, [r7, #0]
 80075b6:	71fb      	strb	r3, [r7, #7]
 80075b8:	460b      	mov	r3, r1
 80075ba:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	8919      	ldrh	r1, [r3, #8]
 80075c0:	88ba      	ldrh	r2, [r7, #4]
 80075c2:	79fb      	ldrb	r3, [r7, #7]
 80075c4:	4618      	mov	r0, r3
 80075c6:	f7ff fab1 	bl	8006b2c <pbuf_alloc>
 80075ca:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d101      	bne.n	80075d6 <pbuf_clone+0x2a>
    return NULL;
 80075d2:	2300      	movs	r3, #0
 80075d4:	e011      	b.n	80075fa <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80075d6:	6839      	ldr	r1, [r7, #0]
 80075d8:	68f8      	ldr	r0, [r7, #12]
 80075da:	f7ff fea3 	bl	8007324 <pbuf_copy>
 80075de:	4603      	mov	r3, r0
 80075e0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80075e2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d006      	beq.n	80075f8 <pbuf_clone+0x4c>
 80075ea:	4b06      	ldr	r3, [pc, #24]	@ (8007604 <pbuf_clone+0x58>)
 80075ec:	f240 5224 	movw	r2, #1316	@ 0x524
 80075f0:	4905      	ldr	r1, [pc, #20]	@ (8007608 <pbuf_clone+0x5c>)
 80075f2:	4806      	ldr	r0, [pc, #24]	@ (800760c <pbuf_clone+0x60>)
 80075f4:	f009 fa02 	bl	80109fc <iprintf>
  return q;
 80075f8:	68fb      	ldr	r3, [r7, #12]
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3710      	adds	r7, #16
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	08011f78 	.word	0x08011f78
 8007608:	080123ec 	.word	0x080123ec
 800760c:	08011fd8 	.word	0x08011fd8

08007610 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8007614:	f009 f8e0 	bl	80107d8 <rand>
 8007618:	4603      	mov	r3, r0
 800761a:	b29b      	uxth	r3, r3
 800761c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007620:	b29b      	uxth	r3, r3
 8007622:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8007626:	b29a      	uxth	r2, r3
 8007628:	4b01      	ldr	r3, [pc, #4]	@ (8007630 <tcp_init+0x20>)
 800762a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800762c:	bf00      	nop
 800762e:	bd80      	pop	{r7, pc}
 8007630:	20000020 	.word	0x20000020

08007634 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	7d1b      	ldrb	r3, [r3, #20]
 8007640:	2b01      	cmp	r3, #1
 8007642:	d105      	bne.n	8007650 <tcp_free+0x1c>
 8007644:	4b06      	ldr	r3, [pc, #24]	@ (8007660 <tcp_free+0x2c>)
 8007646:	22d4      	movs	r2, #212	@ 0xd4
 8007648:	4906      	ldr	r1, [pc, #24]	@ (8007664 <tcp_free+0x30>)
 800764a:	4807      	ldr	r0, [pc, #28]	@ (8007668 <tcp_free+0x34>)
 800764c:	f009 f9d6 	bl	80109fc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8007650:	6879      	ldr	r1, [r7, #4]
 8007652:	2001      	movs	r0, #1
 8007654:	f7fe fed8 	bl	8006408 <memp_free>
}
 8007658:	bf00      	nop
 800765a:	3708      	adds	r7, #8
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}
 8007660:	08012478 	.word	0x08012478
 8007664:	080124a8 	.word	0x080124a8
 8007668:	080124bc 	.word	0x080124bc

0800766c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b082      	sub	sp, #8
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	7d1b      	ldrb	r3, [r3, #20]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d105      	bne.n	8007688 <tcp_free_listen+0x1c>
 800767c:	4b06      	ldr	r3, [pc, #24]	@ (8007698 <tcp_free_listen+0x2c>)
 800767e:	22df      	movs	r2, #223	@ 0xdf
 8007680:	4906      	ldr	r1, [pc, #24]	@ (800769c <tcp_free_listen+0x30>)
 8007682:	4807      	ldr	r0, [pc, #28]	@ (80076a0 <tcp_free_listen+0x34>)
 8007684:	f009 f9ba 	bl	80109fc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8007688:	6879      	ldr	r1, [r7, #4]
 800768a:	2002      	movs	r0, #2
 800768c:	f7fe febc 	bl	8006408 <memp_free>
}
 8007690:	bf00      	nop
 8007692:	3708      	adds	r7, #8
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}
 8007698:	08012478 	.word	0x08012478
 800769c:	080124e4 	.word	0x080124e4
 80076a0:	080124bc 	.word	0x080124bc

080076a4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80076a8:	f001 f8d0 	bl	800884c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80076ac:	4b07      	ldr	r3, [pc, #28]	@ (80076cc <tcp_tmr+0x28>)
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	3301      	adds	r3, #1
 80076b2:	b2da      	uxtb	r2, r3
 80076b4:	4b05      	ldr	r3, [pc, #20]	@ (80076cc <tcp_tmr+0x28>)
 80076b6:	701a      	strb	r2, [r3, #0]
 80076b8:	4b04      	ldr	r3, [pc, #16]	@ (80076cc <tcp_tmr+0x28>)
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	f003 0301 	and.w	r3, r3, #1
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d001      	beq.n	80076c8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80076c4:	f000 fd32 	bl	800812c <tcp_slowtmr>
  }
}
 80076c8:	bf00      	nop
 80076ca:	bd80      	pop	{r7, pc}
 80076cc:	200087fd 	.word	0x200087fd

080076d0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d105      	bne.n	80076ec <tcp_remove_listener+0x1c>
 80076e0:	4b0d      	ldr	r3, [pc, #52]	@ (8007718 <tcp_remove_listener+0x48>)
 80076e2:	22ff      	movs	r2, #255	@ 0xff
 80076e4:	490d      	ldr	r1, [pc, #52]	@ (800771c <tcp_remove_listener+0x4c>)
 80076e6:	480e      	ldr	r0, [pc, #56]	@ (8007720 <tcp_remove_listener+0x50>)
 80076e8:	f009 f988 	bl	80109fc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	60fb      	str	r3, [r7, #12]
 80076f0:	e00a      	b.n	8007708 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80076f6:	683a      	ldr	r2, [r7, #0]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d102      	bne.n	8007702 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2200      	movs	r2, #0
 8007700:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	60fb      	str	r3, [r7, #12]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d1f1      	bne.n	80076f2 <tcp_remove_listener+0x22>
    }
  }
}
 800770e:	bf00      	nop
 8007710:	bf00      	nop
 8007712:	3710      	adds	r7, #16
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}
 8007718:	08012478 	.word	0x08012478
 800771c:	08012500 	.word	0x08012500
 8007720:	080124bc 	.word	0x080124bc

08007724 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d106      	bne.n	8007740 <tcp_listen_closed+0x1c>
 8007732:	4b14      	ldr	r3, [pc, #80]	@ (8007784 <tcp_listen_closed+0x60>)
 8007734:	f240 1211 	movw	r2, #273	@ 0x111
 8007738:	4913      	ldr	r1, [pc, #76]	@ (8007788 <tcp_listen_closed+0x64>)
 800773a:	4814      	ldr	r0, [pc, #80]	@ (800778c <tcp_listen_closed+0x68>)
 800773c:	f009 f95e 	bl	80109fc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	7d1b      	ldrb	r3, [r3, #20]
 8007744:	2b01      	cmp	r3, #1
 8007746:	d006      	beq.n	8007756 <tcp_listen_closed+0x32>
 8007748:	4b0e      	ldr	r3, [pc, #56]	@ (8007784 <tcp_listen_closed+0x60>)
 800774a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800774e:	4910      	ldr	r1, [pc, #64]	@ (8007790 <tcp_listen_closed+0x6c>)
 8007750:	480e      	ldr	r0, [pc, #56]	@ (800778c <tcp_listen_closed+0x68>)
 8007752:	f009 f953 	bl	80109fc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007756:	2301      	movs	r3, #1
 8007758:	60fb      	str	r3, [r7, #12]
 800775a:	e00b      	b.n	8007774 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800775c:	4a0d      	ldr	r2, [pc, #52]	@ (8007794 <tcp_listen_closed+0x70>)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	6879      	ldr	r1, [r7, #4]
 8007768:	4618      	mov	r0, r3
 800776a:	f7ff ffb1 	bl	80076d0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	3301      	adds	r3, #1
 8007772:	60fb      	str	r3, [r7, #12]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2b03      	cmp	r3, #3
 8007778:	d9f0      	bls.n	800775c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800777a:	bf00      	nop
 800777c:	bf00      	nop
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	08012478 	.word	0x08012478
 8007788:	08012528 	.word	0x08012528
 800778c:	080124bc 	.word	0x080124bc
 8007790:	08012534 	.word	0x08012534
 8007794:	08015028 	.word	0x08015028

08007798 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8007798:	b5b0      	push	{r4, r5, r7, lr}
 800779a:	b088      	sub	sp, #32
 800779c:	af04      	add	r7, sp, #16
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	460b      	mov	r3, r1
 80077a2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d106      	bne.n	80077b8 <tcp_close_shutdown+0x20>
 80077aa:	4b63      	ldr	r3, [pc, #396]	@ (8007938 <tcp_close_shutdown+0x1a0>)
 80077ac:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80077b0:	4962      	ldr	r1, [pc, #392]	@ (800793c <tcp_close_shutdown+0x1a4>)
 80077b2:	4863      	ldr	r0, [pc, #396]	@ (8007940 <tcp_close_shutdown+0x1a8>)
 80077b4:	f009 f922 	bl	80109fc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80077b8:	78fb      	ldrb	r3, [r7, #3]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d066      	beq.n	800788c <tcp_close_shutdown+0xf4>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	7d1b      	ldrb	r3, [r3, #20]
 80077c2:	2b04      	cmp	r3, #4
 80077c4:	d003      	beq.n	80077ce <tcp_close_shutdown+0x36>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	7d1b      	ldrb	r3, [r3, #20]
 80077ca:	2b07      	cmp	r3, #7
 80077cc:	d15e      	bne.n	800788c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d104      	bne.n	80077e0 <tcp_close_shutdown+0x48>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077da:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80077de:	d055      	beq.n	800788c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	8b5b      	ldrh	r3, [r3, #26]
 80077e4:	f003 0310 	and.w	r3, r3, #16
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d106      	bne.n	80077fa <tcp_close_shutdown+0x62>
 80077ec:	4b52      	ldr	r3, [pc, #328]	@ (8007938 <tcp_close_shutdown+0x1a0>)
 80077ee:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 80077f2:	4954      	ldr	r1, [pc, #336]	@ (8007944 <tcp_close_shutdown+0x1ac>)
 80077f4:	4852      	ldr	r0, [pc, #328]	@ (8007940 <tcp_close_shutdown+0x1a8>)
 80077f6:	f009 f901 	bl	80109fc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8007802:	687d      	ldr	r5, [r7, #4]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	3304      	adds	r3, #4
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	8ad2      	ldrh	r2, [r2, #22]
 800780c:	6879      	ldr	r1, [r7, #4]
 800780e:	8b09      	ldrh	r1, [r1, #24]
 8007810:	9102      	str	r1, [sp, #8]
 8007812:	9201      	str	r2, [sp, #4]
 8007814:	9300      	str	r3, [sp, #0]
 8007816:	462b      	mov	r3, r5
 8007818:	4622      	mov	r2, r4
 800781a:	4601      	mov	r1, r0
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f005 ff79 	bl	800d714 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f001 fbba 	bl	8008f9c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007828:	4b47      	ldr	r3, [pc, #284]	@ (8007948 <tcp_close_shutdown+0x1b0>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	429a      	cmp	r2, r3
 8007830:	d105      	bne.n	800783e <tcp_close_shutdown+0xa6>
 8007832:	4b45      	ldr	r3, [pc, #276]	@ (8007948 <tcp_close_shutdown+0x1b0>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	4a43      	ldr	r2, [pc, #268]	@ (8007948 <tcp_close_shutdown+0x1b0>)
 800783a:	6013      	str	r3, [r2, #0]
 800783c:	e013      	b.n	8007866 <tcp_close_shutdown+0xce>
 800783e:	4b42      	ldr	r3, [pc, #264]	@ (8007948 <tcp_close_shutdown+0x1b0>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	60fb      	str	r3, [r7, #12]
 8007844:	e00c      	b.n	8007860 <tcp_close_shutdown+0xc8>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	429a      	cmp	r2, r3
 800784e:	d104      	bne.n	800785a <tcp_close_shutdown+0xc2>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	68da      	ldr	r2, [r3, #12]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	60da      	str	r2, [r3, #12]
 8007858:	e005      	b.n	8007866 <tcp_close_shutdown+0xce>
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	60fb      	str	r3, [r7, #12]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1ef      	bne.n	8007846 <tcp_close_shutdown+0xae>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	60da      	str	r2, [r3, #12]
 800786c:	4b37      	ldr	r3, [pc, #220]	@ (800794c <tcp_close_shutdown+0x1b4>)
 800786e:	2201      	movs	r2, #1
 8007870:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8007872:	4b37      	ldr	r3, [pc, #220]	@ (8007950 <tcp_close_shutdown+0x1b8>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	429a      	cmp	r2, r3
 800787a:	d102      	bne.n	8007882 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800787c:	f004 f982 	bl	800bb84 <tcp_trigger_input_pcb_close>
 8007880:	e002      	b.n	8007888 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f7ff fed6 	bl	8007634 <tcp_free>
      }
      return ERR_OK;
 8007888:	2300      	movs	r3, #0
 800788a:	e050      	b.n	800792e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	7d1b      	ldrb	r3, [r3, #20]
 8007890:	2b02      	cmp	r3, #2
 8007892:	d03b      	beq.n	800790c <tcp_close_shutdown+0x174>
 8007894:	2b02      	cmp	r3, #2
 8007896:	dc44      	bgt.n	8007922 <tcp_close_shutdown+0x18a>
 8007898:	2b00      	cmp	r3, #0
 800789a:	d002      	beq.n	80078a2 <tcp_close_shutdown+0x10a>
 800789c:	2b01      	cmp	r3, #1
 800789e:	d02a      	beq.n	80078f6 <tcp_close_shutdown+0x15e>
 80078a0:	e03f      	b.n	8007922 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	8adb      	ldrh	r3, [r3, #22]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d021      	beq.n	80078ee <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80078aa:	4b2a      	ldr	r3, [pc, #168]	@ (8007954 <tcp_close_shutdown+0x1bc>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d105      	bne.n	80078c0 <tcp_close_shutdown+0x128>
 80078b4:	4b27      	ldr	r3, [pc, #156]	@ (8007954 <tcp_close_shutdown+0x1bc>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	4a26      	ldr	r2, [pc, #152]	@ (8007954 <tcp_close_shutdown+0x1bc>)
 80078bc:	6013      	str	r3, [r2, #0]
 80078be:	e013      	b.n	80078e8 <tcp_close_shutdown+0x150>
 80078c0:	4b24      	ldr	r3, [pc, #144]	@ (8007954 <tcp_close_shutdown+0x1bc>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	60bb      	str	r3, [r7, #8]
 80078c6:	e00c      	b.n	80078e2 <tcp_close_shutdown+0x14a>
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d104      	bne.n	80078dc <tcp_close_shutdown+0x144>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	68da      	ldr	r2, [r3, #12]
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	60da      	str	r2, [r3, #12]
 80078da:	e005      	b.n	80078e8 <tcp_close_shutdown+0x150>
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	60bb      	str	r3, [r7, #8]
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d1ef      	bne.n	80078c8 <tcp_close_shutdown+0x130>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f7ff fea0 	bl	8007634 <tcp_free>
      break;
 80078f4:	e01a      	b.n	800792c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f7ff ff14 	bl	8007724 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80078fc:	6879      	ldr	r1, [r7, #4]
 80078fe:	4816      	ldr	r0, [pc, #88]	@ (8007958 <tcp_close_shutdown+0x1c0>)
 8007900:	f001 fbbe 	bl	8009080 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f7ff feb1 	bl	800766c <tcp_free_listen>
      break;
 800790a:	e00f      	b.n	800792c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800790c:	6879      	ldr	r1, [r7, #4]
 800790e:	480e      	ldr	r0, [pc, #56]	@ (8007948 <tcp_close_shutdown+0x1b0>)
 8007910:	f001 fbb6 	bl	8009080 <tcp_pcb_remove>
 8007914:	4b0d      	ldr	r3, [pc, #52]	@ (800794c <tcp_close_shutdown+0x1b4>)
 8007916:	2201      	movs	r2, #1
 8007918:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f7ff fe8a 	bl	8007634 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8007920:	e004      	b.n	800792c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 f81a 	bl	800795c <tcp_close_shutdown_fin>
 8007928:	4603      	mov	r3, r0
 800792a:	e000      	b.n	800792e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3710      	adds	r7, #16
 8007932:	46bd      	mov	sp, r7
 8007934:	bdb0      	pop	{r4, r5, r7, pc}
 8007936:	bf00      	nop
 8007938:	08012478 	.word	0x08012478
 800793c:	0801254c 	.word	0x0801254c
 8007940:	080124bc 	.word	0x080124bc
 8007944:	0801256c 	.word	0x0801256c
 8007948:	200087f4 	.word	0x200087f4
 800794c:	200087fc 	.word	0x200087fc
 8007950:	20008838 	.word	0x20008838
 8007954:	200087ec 	.word	0x200087ec
 8007958:	200087f0 	.word	0x200087f0

0800795c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d106      	bne.n	8007978 <tcp_close_shutdown_fin+0x1c>
 800796a:	4b2e      	ldr	r3, [pc, #184]	@ (8007a24 <tcp_close_shutdown_fin+0xc8>)
 800796c:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8007970:	492d      	ldr	r1, [pc, #180]	@ (8007a28 <tcp_close_shutdown_fin+0xcc>)
 8007972:	482e      	ldr	r0, [pc, #184]	@ (8007a2c <tcp_close_shutdown_fin+0xd0>)
 8007974:	f009 f842 	bl	80109fc <iprintf>

  switch (pcb->state) {
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	7d1b      	ldrb	r3, [r3, #20]
 800797c:	2b07      	cmp	r3, #7
 800797e:	d020      	beq.n	80079c2 <tcp_close_shutdown_fin+0x66>
 8007980:	2b07      	cmp	r3, #7
 8007982:	dc2b      	bgt.n	80079dc <tcp_close_shutdown_fin+0x80>
 8007984:	2b03      	cmp	r3, #3
 8007986:	d002      	beq.n	800798e <tcp_close_shutdown_fin+0x32>
 8007988:	2b04      	cmp	r3, #4
 800798a:	d00d      	beq.n	80079a8 <tcp_close_shutdown_fin+0x4c>
 800798c:	e026      	b.n	80079dc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f004 ffc2 	bl	800c918 <tcp_send_fin>
 8007994:	4603      	mov	r3, r0
 8007996:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007998:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d11f      	bne.n	80079e0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2205      	movs	r2, #5
 80079a4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80079a6:	e01b      	b.n	80079e0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f004 ffb5 	bl	800c918 <tcp_send_fin>
 80079ae:	4603      	mov	r3, r0
 80079b0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80079b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d114      	bne.n	80079e4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2205      	movs	r2, #5
 80079be:	751a      	strb	r2, [r3, #20]
      }
      break;
 80079c0:	e010      	b.n	80079e4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f004 ffa8 	bl	800c918 <tcp_send_fin>
 80079c8:	4603      	mov	r3, r0
 80079ca:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80079cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d109      	bne.n	80079e8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2209      	movs	r2, #9
 80079d8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80079da:	e005      	b.n	80079e8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80079dc:	2300      	movs	r3, #0
 80079de:	e01c      	b.n	8007a1a <tcp_close_shutdown_fin+0xbe>
      break;
 80079e0:	bf00      	nop
 80079e2:	e002      	b.n	80079ea <tcp_close_shutdown_fin+0x8e>
      break;
 80079e4:	bf00      	nop
 80079e6:	e000      	b.n	80079ea <tcp_close_shutdown_fin+0x8e>
      break;
 80079e8:	bf00      	nop
  }

  if (err == ERR_OK) {
 80079ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d103      	bne.n	80079fa <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f005 f8ce 	bl	800cb94 <tcp_output>
 80079f8:	e00d      	b.n	8007a16 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80079fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a02:	d108      	bne.n	8007a16 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	8b5b      	ldrh	r3, [r3, #26]
 8007a08:	f043 0308 	orr.w	r3, r3, #8
 8007a0c:	b29a      	uxth	r2, r3
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8007a12:	2300      	movs	r3, #0
 8007a14:	e001      	b.n	8007a1a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8007a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3710      	adds	r7, #16
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	08012478 	.word	0x08012478
 8007a28:	08012528 	.word	0x08012528
 8007a2c:	080124bc 	.word	0x080124bc

08007a30 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d109      	bne.n	8007a52 <tcp_close+0x22>
 8007a3e:	4b13      	ldr	r3, [pc, #76]	@ (8007a8c <tcp_close+0x5c>)
 8007a40:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8007a44:	4912      	ldr	r1, [pc, #72]	@ (8007a90 <tcp_close+0x60>)
 8007a46:	4813      	ldr	r0, [pc, #76]	@ (8007a94 <tcp_close+0x64>)
 8007a48:	f008 ffd8 	bl	80109fc <iprintf>
 8007a4c:	f06f 030f 	mvn.w	r3, #15
 8007a50:	e017      	b.n	8007a82 <tcp_close+0x52>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
 8007a52:	4811      	ldr	r0, [pc, #68]	@ (8007a98 <tcp_close+0x68>)
 8007a54:	f008 ffd2 	bl	80109fc <iprintf>

  tcp_debug_print_state(pcb->state);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	7d1b      	ldrb	r3, [r3, #20]
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f001 fc95 	bl	800938c <tcp_debug_print_state>

  if (pcb->state != LISTEN) {
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	7d1b      	ldrb	r3, [r3, #20]
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d006      	beq.n	8007a78 <tcp_close+0x48>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	8b5b      	ldrh	r3, [r3, #26]
 8007a6e:	f043 0310 	orr.w	r3, r3, #16
 8007a72:	b29a      	uxth	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8007a78:	2101      	movs	r1, #1
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f7ff fe8c 	bl	8007798 <tcp_close_shutdown>
 8007a80:	4603      	mov	r3, r0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	08012478 	.word	0x08012478
 8007a90:	08012588 	.word	0x08012588
 8007a94:	080124bc 	.word	0x080124bc
 8007a98:	080125a0 	.word	0x080125a0

08007a9c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b08e      	sub	sp, #56	@ 0x38
 8007aa0:	af04      	add	r7, sp, #16
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d107      	bne.n	8007abc <tcp_abandon+0x20>
 8007aac:	4b52      	ldr	r3, [pc, #328]	@ (8007bf8 <tcp_abandon+0x15c>)
 8007aae:	f240 223d 	movw	r2, #573	@ 0x23d
 8007ab2:	4952      	ldr	r1, [pc, #328]	@ (8007bfc <tcp_abandon+0x160>)
 8007ab4:	4852      	ldr	r0, [pc, #328]	@ (8007c00 <tcp_abandon+0x164>)
 8007ab6:	f008 ffa1 	bl	80109fc <iprintf>
 8007aba:	e099      	b.n	8007bf0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	7d1b      	ldrb	r3, [r3, #20]
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d106      	bne.n	8007ad2 <tcp_abandon+0x36>
 8007ac4:	4b4c      	ldr	r3, [pc, #304]	@ (8007bf8 <tcp_abandon+0x15c>)
 8007ac6:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8007aca:	494e      	ldr	r1, [pc, #312]	@ (8007c04 <tcp_abandon+0x168>)
 8007acc:	484c      	ldr	r0, [pc, #304]	@ (8007c00 <tcp_abandon+0x164>)
 8007ace:	f008 ff95 	bl	80109fc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	7d1b      	ldrb	r3, [r3, #20]
 8007ad6:	2b0a      	cmp	r3, #10
 8007ad8:	d107      	bne.n	8007aea <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8007ada:	6879      	ldr	r1, [r7, #4]
 8007adc:	484a      	ldr	r0, [pc, #296]	@ (8007c08 <tcp_abandon+0x16c>)
 8007ade:	f001 facf 	bl	8009080 <tcp_pcb_remove>
    tcp_free(pcb);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f7ff fda6 	bl	8007634 <tcp_free>
 8007ae8:	e082      	b.n	8007bf0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8007aea:	2300      	movs	r3, #0
 8007aec:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8007aee:	2300      	movs	r3, #0
 8007af0:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007af6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007afc:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b04:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	7d1b      	ldrb	r3, [r3, #20]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d126      	bne.n	8007b62 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	8adb      	ldrh	r3, [r3, #22]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d02e      	beq.n	8007b7a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007b1c:	4b3b      	ldr	r3, [pc, #236]	@ (8007c0c <tcp_abandon+0x170>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d105      	bne.n	8007b32 <tcp_abandon+0x96>
 8007b26:	4b39      	ldr	r3, [pc, #228]	@ (8007c0c <tcp_abandon+0x170>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	4a37      	ldr	r2, [pc, #220]	@ (8007c0c <tcp_abandon+0x170>)
 8007b2e:	6013      	str	r3, [r2, #0]
 8007b30:	e013      	b.n	8007b5a <tcp_abandon+0xbe>
 8007b32:	4b36      	ldr	r3, [pc, #216]	@ (8007c0c <tcp_abandon+0x170>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	61fb      	str	r3, [r7, #28]
 8007b38:	e00c      	b.n	8007b54 <tcp_abandon+0xb8>
 8007b3a:	69fb      	ldr	r3, [r7, #28]
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d104      	bne.n	8007b4e <tcp_abandon+0xb2>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	68da      	ldr	r2, [r3, #12]
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	60da      	str	r2, [r3, #12]
 8007b4c:	e005      	b.n	8007b5a <tcp_abandon+0xbe>
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	61fb      	str	r3, [r7, #28]
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d1ef      	bne.n	8007b3a <tcp_abandon+0x9e>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	60da      	str	r2, [r3, #12]
 8007b60:	e00b      	b.n	8007b7a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	8adb      	ldrh	r3, [r3, #22]
 8007b6a:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007b6c:	6879      	ldr	r1, [r7, #4]
 8007b6e:	4828      	ldr	r0, [pc, #160]	@ (8007c10 <tcp_abandon+0x174>)
 8007b70:	f001 fa86 	bl	8009080 <tcp_pcb_remove>
 8007b74:	4b27      	ldr	r3, [pc, #156]	@ (8007c14 <tcp_abandon+0x178>)
 8007b76:	2201      	movs	r2, #1
 8007b78:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d004      	beq.n	8007b8c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b86:	4618      	mov	r0, r3
 8007b88:	f000 ff4a 	bl	8008a20 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d004      	beq.n	8007b9e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f000 ff41 	bl	8008a20 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d004      	beq.n	8007bb0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007baa:	4618      	mov	r0, r3
 8007bac:	f000 ff38 	bl	8008a20 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8007bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00e      	beq.n	8007bd4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8007bb6:	6879      	ldr	r1, [r7, #4]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	3304      	adds	r3, #4
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	8b12      	ldrh	r2, [r2, #24]
 8007bc0:	9202      	str	r2, [sp, #8]
 8007bc2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8007bc4:	9201      	str	r2, [sp, #4]
 8007bc6:	9300      	str	r3, [sp, #0]
 8007bc8:	460b      	mov	r3, r1
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	69b9      	ldr	r1, [r7, #24]
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f005 fda0 	bl	800d714 <tcp_rst>
    }
    last_state = pcb->state;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	7d1b      	ldrb	r3, [r3, #20]
 8007bd8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f7ff fd2a 	bl	8007634 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d004      	beq.n	8007bf0 <tcp_abandon+0x154>
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	f06f 010c 	mvn.w	r1, #12
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	4798      	blx	r3
  }
}
 8007bf0:	3728      	adds	r7, #40	@ 0x28
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	08012478 	.word	0x08012478
 8007bfc:	080125d4 	.word	0x080125d4
 8007c00:	080124bc 	.word	0x080124bc
 8007c04:	080125f0 	.word	0x080125f0
 8007c08:	200087f8 	.word	0x200087f8
 8007c0c:	200087ec 	.word	0x200087ec
 8007c10:	200087f4 	.word	0x200087f4
 8007c14:	200087fc 	.word	0x200087fc

08007c18 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8007c20:	2101      	movs	r1, #1
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f7ff ff3a 	bl	8007a9c <tcp_abandon>
}
 8007c28:	bf00      	nop
 8007c2a:	3708      	adds	r7, #8
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b088      	sub	sp, #32
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	60b9      	str	r1, [r7, #8]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8007c3e:	2304      	movs	r3, #4
 8007c40:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d101      	bne.n	8007c4c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8007c48:	4b41      	ldr	r3, [pc, #260]	@ (8007d50 <tcp_bind+0x120>)
 8007c4a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d109      	bne.n	8007c66 <tcp_bind+0x36>
 8007c52:	4b40      	ldr	r3, [pc, #256]	@ (8007d54 <tcp_bind+0x124>)
 8007c54:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8007c58:	493f      	ldr	r1, [pc, #252]	@ (8007d58 <tcp_bind+0x128>)
 8007c5a:	4840      	ldr	r0, [pc, #256]	@ (8007d5c <tcp_bind+0x12c>)
 8007c5c:	f008 fece 	bl	80109fc <iprintf>
 8007c60:	f06f 030f 	mvn.w	r3, #15
 8007c64:	e06f      	b.n	8007d46 <tcp_bind+0x116>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	7d1b      	ldrb	r3, [r3, #20]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d009      	beq.n	8007c82 <tcp_bind+0x52>
 8007c6e:	4b39      	ldr	r3, [pc, #228]	@ (8007d54 <tcp_bind+0x124>)
 8007c70:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8007c74:	493a      	ldr	r1, [pc, #232]	@ (8007d60 <tcp_bind+0x130>)
 8007c76:	4839      	ldr	r0, [pc, #228]	@ (8007d5c <tcp_bind+0x12c>)
 8007c78:	f008 fec0 	bl	80109fc <iprintf>
 8007c7c:	f06f 0305 	mvn.w	r3, #5
 8007c80:	e061      	b.n	8007d46 <tcp_bind+0x116>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8007c82:	88fb      	ldrh	r3, [r7, #6]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d109      	bne.n	8007c9c <tcp_bind+0x6c>
    port = tcp_new_port();
 8007c88:	f000 fa0a 	bl	80080a0 <tcp_new_port>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8007c90:	88fb      	ldrh	r3, [r7, #6]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d135      	bne.n	8007d02 <tcp_bind+0xd2>
      return ERR_BUF;
 8007c96:	f06f 0301 	mvn.w	r3, #1
 8007c9a:	e054      	b.n	8007d46 <tcp_bind+0x116>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	61fb      	str	r3, [r7, #28]
 8007ca0:	e02b      	b.n	8007cfa <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007ca2:	4a30      	ldr	r2, [pc, #192]	@ (8007d64 <tcp_bind+0x134>)
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	61bb      	str	r3, [r7, #24]
 8007cae:	e01e      	b.n	8007cee <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	8adb      	ldrh	r3, [r3, #22]
 8007cb4:	88fa      	ldrh	r2, [r7, #6]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d116      	bne.n	8007ce8 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8007cba:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d010      	beq.n	8007ce2 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00c      	beq.n	8007ce2 <tcp_bind+0xb2>
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d009      	beq.n	8007ce2 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d005      	beq.n	8007ce2 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d102      	bne.n	8007ce8 <tcp_bind+0xb8>
              return ERR_USE;
 8007ce2:	f06f 0307 	mvn.w	r3, #7
 8007ce6:	e02e      	b.n	8007d46 <tcp_bind+0x116>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	61bb      	str	r3, [r7, #24]
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d1dd      	bne.n	8007cb0 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	61fb      	str	r3, [r7, #28]
 8007cfa:	69fa      	ldr	r2, [r7, #28]
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	dbcf      	blt.n	8007ca2 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00c      	beq.n	8007d22 <tcp_bind+0xf2>
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d008      	beq.n	8007d22 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d002      	beq.n	8007d1c <tcp_bind+0xec>
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	e000      	b.n	8007d1e <tcp_bind+0xee>
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	88fa      	ldrh	r2, [r7, #6]
 8007d26:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8007d28:	4b0f      	ldr	r3, [pc, #60]	@ (8007d68 <tcp_bind+0x138>)
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	60da      	str	r2, [r3, #12]
 8007d30:	4a0d      	ldr	r2, [pc, #52]	@ (8007d68 <tcp_bind+0x138>)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6013      	str	r3, [r2, #0]
 8007d36:	f005 ff33 	bl	800dba0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
 8007d3a:	88fb      	ldrh	r3, [r7, #6]
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	480b      	ldr	r0, [pc, #44]	@ (8007d6c <tcp_bind+0x13c>)
 8007d40:	f008 fe5c 	bl	80109fc <iprintf>
  return ERR_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3720      	adds	r7, #32
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	08015050 	.word	0x08015050
 8007d54:	08012478 	.word	0x08012478
 8007d58:	08012624 	.word	0x08012624
 8007d5c:	080124bc 	.word	0x080124bc
 8007d60:	0801263c 	.word	0x0801263c
 8007d64:	08015028 	.word	0x08015028
 8007d68:	200087ec 	.word	0x200087ec
 8007d6c:	08012664 	.word	0x08012664

08007d70 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d106      	bne.n	8007d92 <tcp_accept_null+0x22>
 8007d84:	4b07      	ldr	r3, [pc, #28]	@ (8007da4 <tcp_accept_null+0x34>)
 8007d86:	f240 320f 	movw	r2, #783	@ 0x30f
 8007d8a:	4907      	ldr	r1, [pc, #28]	@ (8007da8 <tcp_accept_null+0x38>)
 8007d8c:	4807      	ldr	r0, [pc, #28]	@ (8007dac <tcp_accept_null+0x3c>)
 8007d8e:	f008 fe35 	bl	80109fc <iprintf>

  tcp_abort(pcb);
 8007d92:	68b8      	ldr	r0, [r7, #8]
 8007d94:	f7ff ff40 	bl	8007c18 <tcp_abort>

  return ERR_ABRT;
 8007d98:	f06f 030c 	mvn.w	r3, #12
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	08012478 	.word	0x08012478
 8007da8:	08012680 	.word	0x08012680
 8007dac:	080124bc 	.word	0x080124bc

08007db0 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	460b      	mov	r3, r1
 8007dba:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8007dbc:	78fb      	ldrb	r3, [r7, #3]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 f806 	bl	8007dd4 <tcp_listen_with_backlog_and_err>
 8007dc8:	4603      	mov	r3, r0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3708      	adds	r7, #8
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
	...

08007dd4 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b088      	sub	sp, #32
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	460b      	mov	r3, r1
 8007dde:	607a      	str	r2, [r7, #4]
 8007de0:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8007de2:	2300      	movs	r3, #0
 8007de4:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d109      	bne.n	8007e00 <tcp_listen_with_backlog_and_err+0x2c>
 8007dec:	4b47      	ldr	r3, [pc, #284]	@ (8007f0c <tcp_listen_with_backlog_and_err+0x138>)
 8007dee:	f240 3259 	movw	r2, #857	@ 0x359
 8007df2:	4947      	ldr	r1, [pc, #284]	@ (8007f10 <tcp_listen_with_backlog_and_err+0x13c>)
 8007df4:	4847      	ldr	r0, [pc, #284]	@ (8007f14 <tcp_listen_with_backlog_and_err+0x140>)
 8007df6:	f008 fe01 	bl	80109fc <iprintf>
 8007dfa:	23f0      	movs	r3, #240	@ 0xf0
 8007dfc:	76fb      	strb	r3, [r7, #27]
 8007dfe:	e079      	b.n	8007ef4 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	7d1b      	ldrb	r3, [r3, #20]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d009      	beq.n	8007e1c <tcp_listen_with_backlog_and_err+0x48>
 8007e08:	4b40      	ldr	r3, [pc, #256]	@ (8007f0c <tcp_listen_with_backlog_and_err+0x138>)
 8007e0a:	f240 325a 	movw	r2, #858	@ 0x35a
 8007e0e:	4942      	ldr	r1, [pc, #264]	@ (8007f18 <tcp_listen_with_backlog_and_err+0x144>)
 8007e10:	4840      	ldr	r0, [pc, #256]	@ (8007f14 <tcp_listen_with_backlog_and_err+0x140>)
 8007e12:	f008 fdf3 	bl	80109fc <iprintf>
 8007e16:	23f1      	movs	r3, #241	@ 0xf1
 8007e18:	76fb      	strb	r3, [r7, #27]
 8007e1a:	e06b      	b.n	8007ef4 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	7d1b      	ldrb	r3, [r3, #20]
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d104      	bne.n	8007e2e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8007e28:	23f7      	movs	r3, #247	@ 0xf7
 8007e2a:	76fb      	strb	r3, [r7, #27]
    goto done;
 8007e2c:	e062      	b.n	8007ef4 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8007e2e:	2002      	movs	r0, #2
 8007e30:	f7fe fa7a 	bl	8006328 <memp_malloc>
 8007e34:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8007e36:	69fb      	ldr	r3, [r7, #28]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d102      	bne.n	8007e42 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8007e3c:	23ff      	movs	r3, #255	@ 0xff
 8007e3e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8007e40:	e058      	b.n	8007ef4 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	691a      	ldr	r2, [r3, #16]
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	8ada      	ldrh	r2, [r3, #22]
 8007e4e:	69fb      	ldr	r3, [r7, #28]
 8007e50:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	2201      	movs	r2, #1
 8007e56:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	7d5a      	ldrb	r2, [r3, #21]
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	7a5a      	ldrb	r2, [r3, #9]
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	7ada      	ldrb	r2, [r3, #11]
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	7a9a      	ldrb	r2, [r3, #10]
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	8adb      	ldrh	r3, [r3, #22]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d021      	beq.n	8007ed2 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8007e8e:	4b23      	ldr	r3, [pc, #140]	@ (8007f1c <tcp_listen_with_backlog_and_err+0x148>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d105      	bne.n	8007ea4 <tcp_listen_with_backlog_and_err+0xd0>
 8007e98:	4b20      	ldr	r3, [pc, #128]	@ (8007f1c <tcp_listen_with_backlog_and_err+0x148>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	4a1f      	ldr	r2, [pc, #124]	@ (8007f1c <tcp_listen_with_backlog_and_err+0x148>)
 8007ea0:	6013      	str	r3, [r2, #0]
 8007ea2:	e013      	b.n	8007ecc <tcp_listen_with_backlog_and_err+0xf8>
 8007ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8007f1c <tcp_listen_with_backlog_and_err+0x148>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	617b      	str	r3, [r7, #20]
 8007eaa:	e00c      	b.n	8007ec6 <tcp_listen_with_backlog_and_err+0xf2>
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	68db      	ldr	r3, [r3, #12]
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d104      	bne.n	8007ec0 <tcp_listen_with_backlog_and_err+0xec>
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	68da      	ldr	r2, [r3, #12]
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	60da      	str	r2, [r3, #12]
 8007ebe:	e005      	b.n	8007ecc <tcp_listen_with_backlog_and_err+0xf8>
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	617b      	str	r3, [r7, #20]
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d1ef      	bne.n	8007eac <tcp_listen_with_backlog_and_err+0xd8>
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8007ed2:	68f8      	ldr	r0, [r7, #12]
 8007ed4:	f7ff fbae 	bl	8007634 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	4a11      	ldr	r2, [pc, #68]	@ (8007f20 <tcp_listen_with_backlog_and_err+0x14c>)
 8007edc:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8007ede:	4b11      	ldr	r3, [pc, #68]	@ (8007f24 <tcp_listen_with_backlog_and_err+0x150>)
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	60da      	str	r2, [r3, #12]
 8007ee6:	4a0f      	ldr	r2, [pc, #60]	@ (8007f24 <tcp_listen_with_backlog_and_err+0x150>)
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	6013      	str	r3, [r2, #0]
 8007eec:	f005 fe58 	bl	800dba0 <tcp_timer_needed>
  res = ERR_OK;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d002      	beq.n	8007f00 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	7efa      	ldrb	r2, [r7, #27]
 8007efe:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8007f00:	69fb      	ldr	r3, [r7, #28]
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3720      	adds	r7, #32
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	08012478 	.word	0x08012478
 8007f10:	080126a0 	.word	0x080126a0
 8007f14:	080124bc 	.word	0x080124bc
 8007f18:	080126d0 	.word	0x080126d0
 8007f1c:	200087ec 	.word	0x200087ec
 8007f20:	08007d71 	.word	0x08007d71
 8007f24:	200087f0 	.word	0x200087f0

08007f28 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d106      	bne.n	8007f44 <tcp_update_rcv_ann_wnd+0x1c>
 8007f36:	4b25      	ldr	r3, [pc, #148]	@ (8007fcc <tcp_update_rcv_ann_wnd+0xa4>)
 8007f38:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8007f3c:	4924      	ldr	r1, [pc, #144]	@ (8007fd0 <tcp_update_rcv_ann_wnd+0xa8>)
 8007f3e:	4825      	ldr	r0, [pc, #148]	@ (8007fd4 <tcp_update_rcv_ann_wnd+0xac>)
 8007f40:	f008 fd5c 	bl	80109fc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8007f4c:	4413      	add	r3, r2
 8007f4e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8007f58:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8007f5c:	bf28      	it	cs
 8007f5e:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8007f62:	b292      	uxth	r2, r2
 8007f64:	4413      	add	r3, r2
 8007f66:	68fa      	ldr	r2, [r7, #12]
 8007f68:	1ad3      	subs	r3, r2, r3
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	db08      	blt.n	8007f80 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f7a:	68fa      	ldr	r2, [r7, #12]
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	e020      	b.n	8007fc2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f88:	1ad3      	subs	r3, r2, r3
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	dd03      	ble.n	8007f96 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007f94:	e014      	b.n	8007fc0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f9e:	1ad3      	subs	r3, r2, r3
 8007fa0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fa8:	d306      	bcc.n	8007fb8 <tcp_update_rcv_ann_wnd+0x90>
 8007faa:	4b08      	ldr	r3, [pc, #32]	@ (8007fcc <tcp_update_rcv_ann_wnd+0xa4>)
 8007fac:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8007fb0:	4909      	ldr	r1, [pc, #36]	@ (8007fd8 <tcp_update_rcv_ann_wnd+0xb0>)
 8007fb2:	4808      	ldr	r0, [pc, #32]	@ (8007fd4 <tcp_update_rcv_ann_wnd+0xac>)
 8007fb4:	f008 fd22 	bl	80109fc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	b29a      	uxth	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8007fc0:	2300      	movs	r3, #0
  }
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	08012478 	.word	0x08012478
 8007fd0:	08012708 	.word	0x08012708
 8007fd4:	080124bc 	.word	0x080124bc
 8007fd8:	0801272c 	.word	0x0801272c

08007fdc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	460b      	mov	r3, r1
 8007fe6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d107      	bne.n	8007ffe <tcp_recved+0x22>
 8007fee:	4b26      	ldr	r3, [pc, #152]	@ (8008088 <tcp_recved+0xac>)
 8007ff0:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8007ff4:	4925      	ldr	r1, [pc, #148]	@ (800808c <tcp_recved+0xb0>)
 8007ff6:	4826      	ldr	r0, [pc, #152]	@ (8008090 <tcp_recved+0xb4>)
 8007ff8:	f008 fd00 	bl	80109fc <iprintf>
 8007ffc:	e041      	b.n	8008082 <tcp_recved+0xa6>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	7d1b      	ldrb	r3, [r3, #20]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d106      	bne.n	8008014 <tcp_recved+0x38>
 8008006:	4b20      	ldr	r3, [pc, #128]	@ (8008088 <tcp_recved+0xac>)
 8008008:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800800c:	4921      	ldr	r1, [pc, #132]	@ (8008094 <tcp_recved+0xb8>)
 800800e:	4820      	ldr	r0, [pc, #128]	@ (8008090 <tcp_recved+0xb4>)
 8008010:	f008 fcf4 	bl	80109fc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008018:	887b      	ldrh	r3, [r7, #2]
 800801a:	4413      	add	r3, r2
 800801c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800801e:	89fb      	ldrh	r3, [r7, #14]
 8008020:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8008024:	d804      	bhi.n	8008030 <tcp_recved+0x54>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800802a:	89fa      	ldrh	r2, [r7, #14]
 800802c:	429a      	cmp	r2, r3
 800802e:	d207      	bcs.n	8008040 <tcp_recved+0x64>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
 8008030:	4819      	ldr	r0, [pc, #100]	@ (8008098 <tcp_recved+0xbc>)
 8008032:	f008 fd53 	bl	8010adc <puts>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800803c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800803e:	e002      	b.n	8008046 <tcp_recved+0x6a>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	89fa      	ldrh	r2, [r7, #14]
 8008044:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f7ff ff6e 	bl	8007f28 <tcp_update_rcv_ann_wnd>
 800804c:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8008054:	d309      	bcc.n	800806a <tcp_recved+0x8e>
    tcp_ack_now(pcb);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	8b5b      	ldrh	r3, [r3, #26]
 800805a:	f043 0302 	orr.w	r3, r3, #2
 800805e:	b29a      	uxth	r2, r3
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f004 fd95 	bl	800cb94 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
 800806a:	8879      	ldrh	r1, [r7, #2]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008070:	461a      	mov	r2, r3
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008076:	f5c3 6306 	rsb	r3, r3, #2144	@ 0x860
 800807a:	b29b      	uxth	r3, r3
 800807c:	4807      	ldr	r0, [pc, #28]	@ (800809c <tcp_recved+0xc0>)
 800807e:	f008 fcbd 	bl	80109fc <iprintf>
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8008082:	3710      	adds	r7, #16
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	08012478 	.word	0x08012478
 800808c:	08012748 	.word	0x08012748
 8008090:	080124bc 	.word	0x080124bc
 8008094:	08012760 	.word	0x08012760
 8008098:	08012788 	.word	0x08012788
 800809c:	080127c4 	.word	0x080127c4

080080a0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80080a6:	2300      	movs	r3, #0
 80080a8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80080aa:	4b1e      	ldr	r3, [pc, #120]	@ (8008124 <tcp_new_port+0x84>)
 80080ac:	881b      	ldrh	r3, [r3, #0]
 80080ae:	3301      	adds	r3, #1
 80080b0:	b29a      	uxth	r2, r3
 80080b2:	4b1c      	ldr	r3, [pc, #112]	@ (8008124 <tcp_new_port+0x84>)
 80080b4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80080b6:	4b1b      	ldr	r3, [pc, #108]	@ (8008124 <tcp_new_port+0x84>)
 80080b8:	881b      	ldrh	r3, [r3, #0]
 80080ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80080be:	4293      	cmp	r3, r2
 80080c0:	d103      	bne.n	80080ca <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80080c2:	4b18      	ldr	r3, [pc, #96]	@ (8008124 <tcp_new_port+0x84>)
 80080c4:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80080c8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80080ca:	2300      	movs	r3, #0
 80080cc:	71fb      	strb	r3, [r7, #7]
 80080ce:	e01e      	b.n	800810e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80080d0:	79fb      	ldrb	r3, [r7, #7]
 80080d2:	4a15      	ldr	r2, [pc, #84]	@ (8008128 <tcp_new_port+0x88>)
 80080d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	603b      	str	r3, [r7, #0]
 80080dc:	e011      	b.n	8008102 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	8ada      	ldrh	r2, [r3, #22]
 80080e2:	4b10      	ldr	r3, [pc, #64]	@ (8008124 <tcp_new_port+0x84>)
 80080e4:	881b      	ldrh	r3, [r3, #0]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d108      	bne.n	80080fc <tcp_new_port+0x5c>
        n++;
 80080ea:	88bb      	ldrh	r3, [r7, #4]
 80080ec:	3301      	adds	r3, #1
 80080ee:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80080f0:	88bb      	ldrh	r3, [r7, #4]
 80080f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80080f6:	d3d8      	bcc.n	80080aa <tcp_new_port+0xa>
          return 0;
 80080f8:	2300      	movs	r3, #0
 80080fa:	e00d      	b.n	8008118 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	603b      	str	r3, [r7, #0]
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d1ea      	bne.n	80080de <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008108:	79fb      	ldrb	r3, [r7, #7]
 800810a:	3301      	adds	r3, #1
 800810c:	71fb      	strb	r3, [r7, #7]
 800810e:	79fb      	ldrb	r3, [r7, #7]
 8008110:	2b03      	cmp	r3, #3
 8008112:	d9dd      	bls.n	80080d0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8008114:	4b03      	ldr	r3, [pc, #12]	@ (8008124 <tcp_new_port+0x84>)
 8008116:	881b      	ldrh	r3, [r3, #0]
}
 8008118:	4618      	mov	r0, r3
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr
 8008124:	20000020 	.word	0x20000020
 8008128:	08015028 	.word	0x08015028

0800812c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800812c:	b5b0      	push	{r4, r5, r7, lr}
 800812e:	b092      	sub	sp, #72	@ 0x48
 8008130:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8008132:	2300      	movs	r3, #0
 8008134:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

  ++tcp_ticks;
 8008138:	4b9e      	ldr	r3, [pc, #632]	@ (80083b4 <tcp_slowtmr+0x288>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	3301      	adds	r3, #1
 800813e:	4a9d      	ldr	r2, [pc, #628]	@ (80083b4 <tcp_slowtmr+0x288>)
 8008140:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8008142:	4b9d      	ldr	r3, [pc, #628]	@ (80083b8 <tcp_slowtmr+0x28c>)
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	3301      	adds	r3, #1
 8008148:	b2da      	uxtb	r2, r3
 800814a:	4b9b      	ldr	r3, [pc, #620]	@ (80083b8 <tcp_slowtmr+0x28c>)
 800814c:	701a      	strb	r2, [r3, #0]
 800814e:	e000      	b.n	8008152 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8008150:	bf00      	nop
  prev = NULL;
 8008152:	2300      	movs	r3, #0
 8008154:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pcb = tcp_active_pcbs;
 8008156:	4b99      	ldr	r3, [pc, #612]	@ (80083bc <tcp_slowtmr+0x290>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (pcb == NULL) {
 800815c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800815e:	2b00      	cmp	r3, #0
 8008160:	f040 82fc 	bne.w	800875c <tcp_slowtmr+0x630>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
 8008164:	4896      	ldr	r0, [pc, #600]	@ (80083c0 <tcp_slowtmr+0x294>)
 8008166:	f008 fcb9 	bl	8010adc <puts>
  while (pcb != NULL) {
 800816a:	e2f7      	b.n	800875c <tcp_slowtmr+0x630>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
 800816c:	4895      	ldr	r0, [pc, #596]	@ (80083c4 <tcp_slowtmr+0x298>)
 800816e:	f008 fcb5 	bl	8010adc <puts>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008174:	7d1b      	ldrb	r3, [r3, #20]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d106      	bne.n	8008188 <tcp_slowtmr+0x5c>
 800817a:	4b93      	ldr	r3, [pc, #588]	@ (80083c8 <tcp_slowtmr+0x29c>)
 800817c:	f240 42be 	movw	r2, #1214	@ 0x4be
 8008180:	4992      	ldr	r1, [pc, #584]	@ (80083cc <tcp_slowtmr+0x2a0>)
 8008182:	4893      	ldr	r0, [pc, #588]	@ (80083d0 <tcp_slowtmr+0x2a4>)
 8008184:	f008 fc3a 	bl	80109fc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8008188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800818a:	7d1b      	ldrb	r3, [r3, #20]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d106      	bne.n	800819e <tcp_slowtmr+0x72>
 8008190:	4b8d      	ldr	r3, [pc, #564]	@ (80083c8 <tcp_slowtmr+0x29c>)
 8008192:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8008196:	498f      	ldr	r1, [pc, #572]	@ (80083d4 <tcp_slowtmr+0x2a8>)
 8008198:	488d      	ldr	r0, [pc, #564]	@ (80083d0 <tcp_slowtmr+0x2a4>)
 800819a:	f008 fc2f 	bl	80109fc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800819e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081a0:	7d1b      	ldrb	r3, [r3, #20]
 80081a2:	2b0a      	cmp	r3, #10
 80081a4:	d106      	bne.n	80081b4 <tcp_slowtmr+0x88>
 80081a6:	4b88      	ldr	r3, [pc, #544]	@ (80083c8 <tcp_slowtmr+0x29c>)
 80081a8:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 80081ac:	498a      	ldr	r1, [pc, #552]	@ (80083d8 <tcp_slowtmr+0x2ac>)
 80081ae:	4888      	ldr	r0, [pc, #544]	@ (80083d0 <tcp_slowtmr+0x2a4>)
 80081b0:	f008 fc24 	bl	80109fc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80081b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081b6:	7f9a      	ldrb	r2, [r3, #30]
 80081b8:	4b7f      	ldr	r3, [pc, #508]	@ (80083b8 <tcp_slowtmr+0x28c>)
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	429a      	cmp	r2, r3
 80081be:	d105      	bne.n	80081cc <tcp_slowtmr+0xa0>
      prev = pcb;
 80081c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pcb = pcb->next;
 80081c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	633b      	str	r3, [r7, #48]	@ 0x30
      continue;
 80081ca:	e2c7      	b.n	800875c <tcp_slowtmr+0x630>
    pcb->last_timer = tcp_timer_ctr;
 80081cc:	4b7a      	ldr	r3, [pc, #488]	@ (80083b8 <tcp_slowtmr+0x28c>)
 80081ce:	781a      	ldrb	r2, [r3, #0]
 80081d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d2:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 80081d4:	2300      	movs	r3, #0
 80081d6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    pcb_reset = 0;
 80081da:	2300      	movs	r3, #0
 80081dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80081e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081e2:	7d1b      	ldrb	r3, [r3, #20]
 80081e4:	2b02      	cmp	r3, #2
 80081e6:	d10d      	bne.n	8008204 <tcp_slowtmr+0xd8>
 80081e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80081ee:	2b05      	cmp	r3, #5
 80081f0:	d908      	bls.n	8008204 <tcp_slowtmr+0xd8>
      ++pcb_remove;
 80081f2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80081f6:	3301      	adds	r3, #1
 80081f8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 80081fc:	4877      	ldr	r0, [pc, #476]	@ (80083dc <tcp_slowtmr+0x2b0>)
 80081fe:	f008 fc6d 	bl	8010adc <puts>
 8008202:	e12b      	b.n	800845c <tcp_slowtmr+0x330>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8008204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008206:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800820a:	2b0b      	cmp	r3, #11
 800820c:	d908      	bls.n	8008220 <tcp_slowtmr+0xf4>
      ++pcb_remove;
 800820e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008212:	3301      	adds	r3, #1
 8008214:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
 8008218:	4871      	ldr	r0, [pc, #452]	@ (80083e0 <tcp_slowtmr+0x2b4>)
 800821a:	f008 fc5f 	bl	8010adc <puts>
 800821e:	e11d      	b.n	800845c <tcp_slowtmr+0x330>
      if (pcb->persist_backoff > 0) {
 8008220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008222:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8008226:	2b00      	cmp	r3, #0
 8008228:	d075      	beq.n	8008316 <tcp_slowtmr+0x1ea>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800822a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800822c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800822e:	2b00      	cmp	r3, #0
 8008230:	d006      	beq.n	8008240 <tcp_slowtmr+0x114>
 8008232:	4b65      	ldr	r3, [pc, #404]	@ (80083c8 <tcp_slowtmr+0x29c>)
 8008234:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8008238:	496a      	ldr	r1, [pc, #424]	@ (80083e4 <tcp_slowtmr+0x2b8>)
 800823a:	4865      	ldr	r0, [pc, #404]	@ (80083d0 <tcp_slowtmr+0x2a4>)
 800823c:	f008 fbde 	bl	80109fc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8008240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008242:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008244:	2b00      	cmp	r3, #0
 8008246:	d106      	bne.n	8008256 <tcp_slowtmr+0x12a>
 8008248:	4b5f      	ldr	r3, [pc, #380]	@ (80083c8 <tcp_slowtmr+0x29c>)
 800824a:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800824e:	4966      	ldr	r1, [pc, #408]	@ (80083e8 <tcp_slowtmr+0x2bc>)
 8008250:	485f      	ldr	r0, [pc, #380]	@ (80083d0 <tcp_slowtmr+0x2a4>)
 8008252:	f008 fbd3 	bl	80109fc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8008256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008258:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800825c:	2b0b      	cmp	r3, #11
 800825e:	d905      	bls.n	800826c <tcp_slowtmr+0x140>
          ++pcb_remove; /* max probes reached */
 8008260:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008264:	3301      	adds	r3, #1
 8008266:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800826a:	e0f7      	b.n	800845c <tcp_slowtmr+0x330>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800826c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800826e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8008272:	3b01      	subs	r3, #1
 8008274:	4a5d      	ldr	r2, [pc, #372]	@ (80083ec <tcp_slowtmr+0x2c0>)
 8008276:	5cd3      	ldrb	r3, [r2, r3]
 8008278:	757b      	strb	r3, [r7, #21]
          if (pcb->persist_cnt < backoff_cnt) {
 800827a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800827c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008280:	7d7a      	ldrb	r2, [r7, #21]
 8008282:	429a      	cmp	r2, r3
 8008284:	d907      	bls.n	8008296 <tcp_slowtmr+0x16a>
            pcb->persist_cnt++;
 8008286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008288:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800828c:	3301      	adds	r3, #1
 800828e:	b2da      	uxtb	r2, r3
 8008290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008292:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8008296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008298:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800829c:	7d7a      	ldrb	r2, [r7, #21]
 800829e:	429a      	cmp	r2, r3
 80082a0:	f200 80dc 	bhi.w	800845c <tcp_slowtmr+0x330>
            int next_slot = 1; /* increment timer to next slot */
 80082a4:	2301      	movs	r3, #1
 80082a6:	627b      	str	r3, [r7, #36]	@ 0x24
            if (pcb->snd_wnd == 0) {
 80082a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d108      	bne.n	80082c4 <tcp_slowtmr+0x198>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80082b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082b4:	f005 fb66 	bl	800d984 <tcp_zero_window_probe>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d014      	beq.n	80082e8 <tcp_slowtmr+0x1bc>
                next_slot = 0; /* try probe again with current slot */
 80082be:	2300      	movs	r3, #0
 80082c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80082c2:	e011      	b.n	80082e8 <tcp_slowtmr+0x1bc>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80082c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80082ca:	4619      	mov	r1, r3
 80082cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082ce:	f004 f9d7 	bl	800c680 <tcp_split_unsent_seg>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d107      	bne.n	80082e8 <tcp_slowtmr+0x1bc>
                if (tcp_output(pcb) == ERR_OK) {
 80082d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082da:	f004 fc5b 	bl	800cb94 <tcp_output>
 80082de:	4603      	mov	r3, r0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d101      	bne.n	80082e8 <tcp_slowtmr+0x1bc>
                  next_slot = 0;
 80082e4:	2300      	movs	r3, #0
 80082e6:	627b      	str	r3, [r7, #36]	@ 0x24
            if (next_slot) {
 80082e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	f000 80b6 	beq.w	800845c <tcp_slowtmr+0x330>
              pcb->persist_cnt = 0;
 80082f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f2:	2200      	movs	r2, #0
 80082f4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80082f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082fa:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80082fe:	2b06      	cmp	r3, #6
 8008300:	f200 80ac 	bhi.w	800845c <tcp_slowtmr+0x330>
                pcb->persist_backoff++;
 8008304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008306:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800830a:	3301      	adds	r3, #1
 800830c:	b2da      	uxtb	r2, r3
 800830e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008310:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8008314:	e0a2      	b.n	800845c <tcp_slowtmr+0x330>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8008316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008318:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800831c:	2b00      	cmp	r3, #0
 800831e:	db0f      	blt.n	8008340 <tcp_slowtmr+0x214>
 8008320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008322:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8008326:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800832a:	4293      	cmp	r3, r2
 800832c:	d008      	beq.n	8008340 <tcp_slowtmr+0x214>
          ++pcb->rtime;
 800832e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008330:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8008334:	b29b      	uxth	r3, r3
 8008336:	3301      	adds	r3, #1
 8008338:	b29b      	uxth	r3, r3
 800833a:	b21a      	sxth	r2, r3
 800833c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800833e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8008340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008342:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8008346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008348:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800834c:	429a      	cmp	r2, r3
 800834e:	f2c0 8085 	blt.w	800845c <tcp_slowtmr+0x330>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8008352:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008354:	f004 ff14 	bl	800d180 <tcp_rexmit_rto_prepare>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d007      	beq.n	800836e <tcp_slowtmr+0x242>
 800835e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008362:	2b00      	cmp	r3, #0
 8008364:	d17a      	bne.n	800845c <tcp_slowtmr+0x330>
 8008366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008368:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800836a:	2b00      	cmp	r3, #0
 800836c:	d076      	beq.n	800845c <tcp_slowtmr+0x330>
            if (pcb->state != SYN_SENT) {
 800836e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008370:	7d1b      	ldrb	r3, [r3, #20]
 8008372:	2b02      	cmp	r3, #2
 8008374:	d043      	beq.n	80083fe <tcp_slowtmr+0x2d2>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8008376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008378:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800837c:	2b0c      	cmp	r3, #12
 800837e:	bf28      	it	cs
 8008380:	230c      	movcs	r3, #12
 8008382:	77fb      	strb	r3, [r7, #31]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008386:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800838a:	10db      	asrs	r3, r3, #3
 800838c:	b21b      	sxth	r3, r3
 800838e:	461a      	mov	r2, r3
 8008390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008392:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008396:	4413      	add	r3, r2
 8008398:	7ffa      	ldrb	r2, [r7, #31]
 800839a:	4915      	ldr	r1, [pc, #84]	@ (80083f0 <tcp_slowtmr+0x2c4>)
 800839c:	5c8a      	ldrb	r2, [r1, r2]
 800839e:	4093      	lsls	r3, r2
 80083a0:	61bb      	str	r3, [r7, #24]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80083a8:	4293      	cmp	r3, r2
 80083aa:	dc23      	bgt.n	80083f4 <tcp_slowtmr+0x2c8>
 80083ac:	69bb      	ldr	r3, [r7, #24]
 80083ae:	b21a      	sxth	r2, r3
 80083b0:	e022      	b.n	80083f8 <tcp_slowtmr+0x2cc>
 80083b2:	bf00      	nop
 80083b4:	200087e8 	.word	0x200087e8
 80083b8:	200087fe 	.word	0x200087fe
 80083bc:	200087f4 	.word	0x200087f4
 80083c0:	08012878 	.word	0x08012878
 80083c4:	08012894 	.word	0x08012894
 80083c8:	08012478 	.word	0x08012478
 80083cc:	080128b8 	.word	0x080128b8
 80083d0:	080124bc 	.word	0x080124bc
 80083d4:	080128e4 	.word	0x080128e4
 80083d8:	08012910 	.word	0x08012910
 80083dc:	08012940 	.word	0x08012940
 80083e0:	08012968 	.word	0x08012968
 80083e4:	08012990 	.word	0x08012990
 80083e8:	080129c4 	.word	0x080129c4
 80083ec:	08015020 	.word	0x08015020
 80083f0:	08015010 	.word	0x08015010
 80083f4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80083f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 80083fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008400:	2200      	movs	r2, #0
 8008402:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008406:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800840a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800840c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008410:	4293      	cmp	r3, r2
 8008412:	bf28      	it	cs
 8008414:	4613      	movcs	r3, r2
 8008416:	82fb      	strh	r3, [r7, #22]
            pcb->ssthresh = eff_wnd >> 1;
 8008418:	8afb      	ldrh	r3, [r7, #22]
 800841a:	085b      	lsrs	r3, r3, #1
 800841c:	b29a      	uxth	r2, r3
 800841e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008420:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008426:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800842a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800842c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800842e:	005b      	lsls	r3, r3, #1
 8008430:	b29b      	uxth	r3, r3
 8008432:	429a      	cmp	r2, r3
 8008434:	d206      	bcs.n	8008444 <tcp_slowtmr+0x318>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8008436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008438:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800843a:	005b      	lsls	r3, r3, #1
 800843c:	b29a      	uxth	r2, r3
 800843e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008440:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8008444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008446:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8008448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800844a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800844e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008450:	2200      	movs	r2, #0
 8008452:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8008456:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008458:	f004 ff0c 	bl	800d274 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800845c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800845e:	7d1b      	ldrb	r3, [r3, #20]
 8008460:	2b06      	cmp	r3, #6
 8008462:	d114      	bne.n	800848e <tcp_slowtmr+0x362>
      if (pcb->flags & TF_RXCLOSED) {
 8008464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008466:	8b5b      	ldrh	r3, [r3, #26]
 8008468:	f003 0310 	and.w	r3, r3, #16
 800846c:	2b00      	cmp	r3, #0
 800846e:	d00e      	beq.n	800848e <tcp_slowtmr+0x362>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008470:	4b8e      	ldr	r3, [pc, #568]	@ (80086ac <tcp_slowtmr+0x580>)
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008476:	6a1b      	ldr	r3, [r3, #32]
 8008478:	1ad3      	subs	r3, r2, r3
 800847a:	2b28      	cmp	r3, #40	@ 0x28
 800847c:	d907      	bls.n	800848e <tcp_slowtmr+0x362>
          ++pcb_remove;
 800847e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008482:	3301      	adds	r3, #1
 8008484:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in FIN-WAIT-2\n"));
 8008488:	4889      	ldr	r0, [pc, #548]	@ (80086b0 <tcp_slowtmr+0x584>)
 800848a:	f008 fb27 	bl	8010adc <puts>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800848e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008490:	7a5b      	ldrb	r3, [r3, #9]
 8008492:	f003 0308 	and.w	r3, r3, #8
 8008496:	2b00      	cmp	r3, #0
 8008498:	d067      	beq.n	800856a <tcp_slowtmr+0x43e>
        ((pcb->state == ESTABLISHED) ||
 800849a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800849c:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800849e:	2b04      	cmp	r3, #4
 80084a0:	d003      	beq.n	80084aa <tcp_slowtmr+0x37e>
         (pcb->state == CLOSE_WAIT))) {
 80084a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a4:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80084a6:	2b07      	cmp	r3, #7
 80084a8:	d15f      	bne.n	800856a <tcp_slowtmr+0x43e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80084aa:	4b80      	ldr	r3, [pc, #512]	@ (80086ac <tcp_slowtmr+0x580>)
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b0:	6a1b      	ldr	r3, [r3, #32]
 80084b2:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80084b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b6:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80084ba:	4b7e      	ldr	r3, [pc, #504]	@ (80086b4 <tcp_slowtmr+0x588>)
 80084bc:	440b      	add	r3, r1
 80084be:	497e      	ldr	r1, [pc, #504]	@ (80086b8 <tcp_slowtmr+0x58c>)
 80084c0:	fba1 1303 	umull	r1, r3, r1, r3
 80084c4:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d927      	bls.n	800851a <tcp_slowtmr+0x3ee>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
 80084ca:	487c      	ldr	r0, [pc, #496]	@ (80086bc <tcp_slowtmr+0x590>)
 80084cc:	f008 fa96 	bl	80109fc <iprintf>
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
 80084d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	4619      	mov	r1, r3
 80084d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	0a1b      	lsrs	r3, r3, #8
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	461a      	mov	r2, r3
 80084e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	0c1b      	lsrs	r3, r3, #16
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	4618      	mov	r0, r3
 80084ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	0e1b      	lsrs	r3, r3, #24
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	9300      	str	r3, [sp, #0]
 80084f6:	4603      	mov	r3, r0
 80084f8:	4871      	ldr	r0, [pc, #452]	@ (80086c0 <tcp_slowtmr+0x594>)
 80084fa:	f008 fa7f 	bl	80109fc <iprintf>
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));
 80084fe:	200a      	movs	r0, #10
 8008500:	f008 fa8e 	bl	8010a20 <putchar>
        ++pcb_remove;
 8008504:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008508:	3301      	adds	r3, #1
 800850a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        ++pcb_reset;
 800850e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008512:	3301      	adds	r3, #1
 8008514:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008518:	e027      	b.n	800856a <tcp_slowtmr+0x43e>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800851a:	4b64      	ldr	r3, [pc, #400]	@ (80086ac <tcp_slowtmr+0x580>)
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008520:	6a1b      	ldr	r3, [r3, #32]
 8008522:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8008524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008526:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800852a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800852c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8008530:	4618      	mov	r0, r3
 8008532:	4b64      	ldr	r3, [pc, #400]	@ (80086c4 <tcp_slowtmr+0x598>)
 8008534:	fb00 f303 	mul.w	r3, r0, r3
 8008538:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800853a:	495f      	ldr	r1, [pc, #380]	@ (80086b8 <tcp_slowtmr+0x58c>)
 800853c:	fba1 1303 	umull	r1, r3, r1, r3
 8008540:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008542:	429a      	cmp	r2, r3
 8008544:	d911      	bls.n	800856a <tcp_slowtmr+0x43e>
        err = tcp_keepalive(pcb);
 8008546:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008548:	f005 f99c 	bl	800d884 <tcp_keepalive>
 800854c:	4603      	mov	r3, r0
 800854e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        if (err == ERR_OK) {
 8008552:	f997 302a 	ldrsb.w	r3, [r7, #42]	@ 0x2a
 8008556:	2b00      	cmp	r3, #0
 8008558:	d107      	bne.n	800856a <tcp_slowtmr+0x43e>
          pcb->keep_cnt_sent++;
 800855a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800855c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8008560:	3301      	adds	r3, #1
 8008562:	b2da      	uxtb	r2, r3
 8008564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008566:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800856a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800856c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800856e:	2b00      	cmp	r3, #0
 8008570:	d011      	beq.n	8008596 <tcp_slowtmr+0x46a>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8008572:	4b4e      	ldr	r3, [pc, #312]	@ (80086ac <tcp_slowtmr+0x580>)
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008578:	6a1b      	ldr	r3, [r3, #32]
 800857a:	1ad2      	subs	r2, r2, r3
 800857c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800857e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8008582:	4619      	mov	r1, r3
 8008584:	460b      	mov	r3, r1
 8008586:	005b      	lsls	r3, r3, #1
 8008588:	440b      	add	r3, r1
 800858a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800858c:	429a      	cmp	r2, r3
 800858e:	d302      	bcc.n	8008596 <tcp_slowtmr+0x46a>
      tcp_free_ooseq(pcb);
 8008590:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008592:	f000 fee7 	bl	8009364 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8008596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008598:	7d1b      	ldrb	r3, [r3, #20]
 800859a:	2b03      	cmp	r3, #3
 800859c:	d10e      	bne.n	80085bc <tcp_slowtmr+0x490>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800859e:	4b43      	ldr	r3, [pc, #268]	@ (80086ac <tcp_slowtmr+0x580>)
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a4:	6a1b      	ldr	r3, [r3, #32]
 80085a6:	1ad3      	subs	r3, r2, r3
 80085a8:	2b28      	cmp	r3, #40	@ 0x28
 80085aa:	d907      	bls.n	80085bc <tcp_slowtmr+0x490>
        ++pcb_remove;
 80085ac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80085b0:	3301      	adds	r3, #1
 80085b2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
 80085b6:	4844      	ldr	r0, [pc, #272]	@ (80086c8 <tcp_slowtmr+0x59c>)
 80085b8:	f008 fa90 	bl	8010adc <puts>
    if (pcb->state == LAST_ACK) {
 80085bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085be:	7d1b      	ldrb	r3, [r3, #20]
 80085c0:	2b09      	cmp	r3, #9
 80085c2:	d10e      	bne.n	80085e2 <tcp_slowtmr+0x4b6>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80085c4:	4b39      	ldr	r3, [pc, #228]	@ (80086ac <tcp_slowtmr+0x580>)
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ca:	6a1b      	ldr	r3, [r3, #32]
 80085cc:	1ad3      	subs	r3, r2, r3
 80085ce:	2bf0      	cmp	r3, #240	@ 0xf0
 80085d0:	d907      	bls.n	80085e2 <tcp_slowtmr+0x4b6>
        ++pcb_remove;
 80085d2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80085d6:	3301      	adds	r3, #1
 80085d8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
 80085dc:	483b      	ldr	r0, [pc, #236]	@ (80086cc <tcp_slowtmr+0x5a0>)
 80085de:	f008 fa7d 	bl	8010adc <puts>
    if (pcb_remove) {
 80085e2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d07e      	beq.n	80086e8 <tcp_slowtmr+0x5bc>
      tcp_err_fn err_fn = pcb->errf;
 80085ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085f0:	613b      	str	r3, [r7, #16]
      tcp_pcb_purge(pcb);
 80085f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80085f4:	f000 fcd2 	bl	8008f9c <tcp_pcb_purge>
      if (prev != NULL) {
 80085f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d010      	beq.n	8008620 <tcp_slowtmr+0x4f4>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80085fe:	4b34      	ldr	r3, [pc, #208]	@ (80086d0 <tcp_slowtmr+0x5a4>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008604:	429a      	cmp	r2, r3
 8008606:	d106      	bne.n	8008616 <tcp_slowtmr+0x4ea>
 8008608:	4b32      	ldr	r3, [pc, #200]	@ (80086d4 <tcp_slowtmr+0x5a8>)
 800860a:	f240 526d 	movw	r2, #1389	@ 0x56d
 800860e:	4932      	ldr	r1, [pc, #200]	@ (80086d8 <tcp_slowtmr+0x5ac>)
 8008610:	4832      	ldr	r0, [pc, #200]	@ (80086dc <tcp_slowtmr+0x5b0>)
 8008612:	f008 f9f3 	bl	80109fc <iprintf>
        prev->next = pcb->next;
 8008616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008618:	68da      	ldr	r2, [r3, #12]
 800861a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800861c:	60da      	str	r2, [r3, #12]
 800861e:	e00f      	b.n	8008640 <tcp_slowtmr+0x514>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8008620:	4b2b      	ldr	r3, [pc, #172]	@ (80086d0 <tcp_slowtmr+0x5a4>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008626:	429a      	cmp	r2, r3
 8008628:	d006      	beq.n	8008638 <tcp_slowtmr+0x50c>
 800862a:	4b2a      	ldr	r3, [pc, #168]	@ (80086d4 <tcp_slowtmr+0x5a8>)
 800862c:	f240 5271 	movw	r2, #1393	@ 0x571
 8008630:	492b      	ldr	r1, [pc, #172]	@ (80086e0 <tcp_slowtmr+0x5b4>)
 8008632:	482a      	ldr	r0, [pc, #168]	@ (80086dc <tcp_slowtmr+0x5b0>)
 8008634:	f008 f9e2 	bl	80109fc <iprintf>
        tcp_active_pcbs = pcb->next;
 8008638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	4a24      	ldr	r2, [pc, #144]	@ (80086d0 <tcp_slowtmr+0x5a4>)
 800863e:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8008640:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008644:	2b00      	cmp	r3, #0
 8008646:	d013      	beq.n	8008670 <tcp_slowtmr+0x544>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800864a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800864c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800864e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8008650:	6b3d      	ldr	r5, [r7, #48]	@ 0x30
 8008652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008654:	3304      	adds	r3, #4
 8008656:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008658:	8ad2      	ldrh	r2, [r2, #22]
 800865a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800865c:	8b09      	ldrh	r1, [r1, #24]
 800865e:	9102      	str	r1, [sp, #8]
 8008660:	9201      	str	r2, [sp, #4]
 8008662:	9300      	str	r3, [sp, #0]
 8008664:	462b      	mov	r3, r5
 8008666:	4622      	mov	r2, r4
 8008668:	4601      	mov	r1, r0
 800866a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800866c:	f005 f852 	bl	800d714 <tcp_rst>
      err_arg = pcb->callback_arg;
 8008670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008672:	691b      	ldr	r3, [r3, #16]
 8008674:	60fb      	str	r3, [r7, #12]
      last_state = pcb->state;
 8008676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008678:	7d1b      	ldrb	r3, [r3, #20]
 800867a:	72fb      	strb	r3, [r7, #11]
      pcb2 = pcb;
 800867c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800867e:	607b      	str	r3, [r7, #4]
      pcb = pcb->next;
 8008680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	633b      	str	r3, [r7, #48]	@ 0x30
      tcp_free(pcb2);
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f7fe ffd4 	bl	8007634 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800868c:	4b15      	ldr	r3, [pc, #84]	@ (80086e4 <tcp_slowtmr+0x5b8>)
 800868e:	2200      	movs	r2, #0
 8008690:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d004      	beq.n	80086a2 <tcp_slowtmr+0x576>
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	f06f 010c 	mvn.w	r1, #12
 800869e:	68f8      	ldr	r0, [r7, #12]
 80086a0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80086a2:	4b10      	ldr	r3, [pc, #64]	@ (80086e4 <tcp_slowtmr+0x5b8>)
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d058      	beq.n	800875c <tcp_slowtmr+0x630>
        goto tcp_slowtmr_start;
 80086aa:	e552      	b.n	8008152 <tcp_slowtmr+0x26>
 80086ac:	200087e8 	.word	0x200087e8
 80086b0:	080129fc 	.word	0x080129fc
 80086b4:	000a4cb8 	.word	0x000a4cb8
 80086b8:	10624dd3 	.word	0x10624dd3
 80086bc:	08012a2c 	.word	0x08012a2c
 80086c0:	08012a64 	.word	0x08012a64
 80086c4:	000124f8 	.word	0x000124f8
 80086c8:	08012a74 	.word	0x08012a74
 80086cc:	08012aa0 	.word	0x08012aa0
 80086d0:	200087f4 	.word	0x200087f4
 80086d4:	08012478 	.word	0x08012478
 80086d8:	08012acc 	.word	0x08012acc
 80086dc:	080124bc 	.word	0x080124bc
 80086e0:	08012af8 	.word	0x08012af8
 80086e4:	200087fc 	.word	0x200087fc
      prev = pcb;
 80086e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pcb = pcb->next;
 80086ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	633b      	str	r3, [r7, #48]	@ 0x30
      ++prev->polltmr;
 80086f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086f4:	7f1b      	ldrb	r3, [r3, #28]
 80086f6:	3301      	adds	r3, #1
 80086f8:	b2da      	uxtb	r2, r3
 80086fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086fc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80086fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008700:	7f1a      	ldrb	r2, [r3, #28]
 8008702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008704:	7f5b      	ldrb	r3, [r3, #29]
 8008706:	429a      	cmp	r2, r3
 8008708:	d328      	bcc.n	800875c <tcp_slowtmr+0x630>
        prev->polltmr = 0;
 800870a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800870c:	2200      	movs	r2, #0
 800870e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
 8008710:	4845      	ldr	r0, [pc, #276]	@ (8008828 <tcp_slowtmr+0x6fc>)
 8008712:	f008 f9e3 	bl	8010adc <puts>
        tcp_active_pcbs_changed = 0;
 8008716:	4b45      	ldr	r3, [pc, #276]	@ (800882c <tcp_slowtmr+0x700>)
 8008718:	2200      	movs	r2, #0
 800871a:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800871c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800871e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008722:	2b00      	cmp	r3, #0
 8008724:	d00b      	beq.n	800873e <tcp_slowtmr+0x612>
 8008726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008728:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800872c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800872e:	6912      	ldr	r2, [r2, #16]
 8008730:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008732:	4610      	mov	r0, r2
 8008734:	4798      	blx	r3
 8008736:	4603      	mov	r3, r0
 8008738:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800873c:	e002      	b.n	8008744 <tcp_slowtmr+0x618>
 800873e:	2300      	movs	r3, #0
 8008740:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        if (tcp_active_pcbs_changed) {
 8008744:	4b39      	ldr	r3, [pc, #228]	@ (800882c <tcp_slowtmr+0x700>)
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	2b00      	cmp	r3, #0
 800874a:	f47f ad01 	bne.w	8008150 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800874e:	f997 302a 	ldrsb.w	r3, [r7, #42]	@ 0x2a
 8008752:	2b00      	cmp	r3, #0
 8008754:	d102      	bne.n	800875c <tcp_slowtmr+0x630>
          tcp_output(prev);
 8008756:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008758:	f004 fa1c 	bl	800cb94 <tcp_output>
  while (pcb != NULL) {
 800875c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800875e:	2b00      	cmp	r3, #0
 8008760:	f47f ad04 	bne.w	800816c <tcp_slowtmr+0x40>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8008764:	2300      	movs	r3, #0
 8008766:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pcb = tcp_tw_pcbs;
 8008768:	4b31      	ldr	r3, [pc, #196]	@ (8008830 <tcp_slowtmr+0x704>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	633b      	str	r3, [r7, #48]	@ 0x30
  while (pcb != NULL) {
 800876e:	e052      	b.n	8008816 <tcp_slowtmr+0x6ea>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008772:	7d1b      	ldrb	r3, [r3, #20]
 8008774:	2b0a      	cmp	r3, #10
 8008776:	d006      	beq.n	8008786 <tcp_slowtmr+0x65a>
 8008778:	4b2e      	ldr	r3, [pc, #184]	@ (8008834 <tcp_slowtmr+0x708>)
 800877a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800877e:	492e      	ldr	r1, [pc, #184]	@ (8008838 <tcp_slowtmr+0x70c>)
 8008780:	482e      	ldr	r0, [pc, #184]	@ (800883c <tcp_slowtmr+0x710>)
 8008782:	f008 f93b 	bl	80109fc <iprintf>
    pcb_remove = 0;
 8008786:	2300      	movs	r3, #0
 8008788:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800878c:	4b2c      	ldr	r3, [pc, #176]	@ (8008840 <tcp_slowtmr+0x714>)
 800878e:	681a      	ldr	r2, [r3, #0]
 8008790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008792:	6a1b      	ldr	r3, [r3, #32]
 8008794:	1ad3      	subs	r3, r2, r3
 8008796:	2bf0      	cmp	r3, #240	@ 0xf0
 8008798:	d904      	bls.n	80087a4 <tcp_slowtmr+0x678>
      ++pcb_remove;
 800879a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800879e:	3301      	adds	r3, #1
 80087a0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80087a4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d02f      	beq.n	800880c <tcp_slowtmr+0x6e0>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80087ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80087ae:	f000 fbf5 	bl	8008f9c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80087b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d010      	beq.n	80087da <tcp_slowtmr+0x6ae>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80087b8:	4b1d      	ldr	r3, [pc, #116]	@ (8008830 <tcp_slowtmr+0x704>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087be:	429a      	cmp	r2, r3
 80087c0:	d106      	bne.n	80087d0 <tcp_slowtmr+0x6a4>
 80087c2:	4b1c      	ldr	r3, [pc, #112]	@ (8008834 <tcp_slowtmr+0x708>)
 80087c4:	f240 52af 	movw	r2, #1455	@ 0x5af
 80087c8:	491e      	ldr	r1, [pc, #120]	@ (8008844 <tcp_slowtmr+0x718>)
 80087ca:	481c      	ldr	r0, [pc, #112]	@ (800883c <tcp_slowtmr+0x710>)
 80087cc:	f008 f916 	bl	80109fc <iprintf>
        prev->next = pcb->next;
 80087d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d2:	68da      	ldr	r2, [r3, #12]
 80087d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087d6:	60da      	str	r2, [r3, #12]
 80087d8:	e00f      	b.n	80087fa <tcp_slowtmr+0x6ce>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80087da:	4b15      	ldr	r3, [pc, #84]	@ (8008830 <tcp_slowtmr+0x704>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d006      	beq.n	80087f2 <tcp_slowtmr+0x6c6>
 80087e4:	4b13      	ldr	r3, [pc, #76]	@ (8008834 <tcp_slowtmr+0x708>)
 80087e6:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 80087ea:	4917      	ldr	r1, [pc, #92]	@ (8008848 <tcp_slowtmr+0x71c>)
 80087ec:	4813      	ldr	r0, [pc, #76]	@ (800883c <tcp_slowtmr+0x710>)
 80087ee:	f008 f905 	bl	80109fc <iprintf>
        tcp_tw_pcbs = pcb->next;
 80087f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f4:	68db      	ldr	r3, [r3, #12]
 80087f6:	4a0e      	ldr	r2, [pc, #56]	@ (8008830 <tcp_slowtmr+0x704>)
 80087f8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80087fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087fc:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 80087fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	633b      	str	r3, [r7, #48]	@ 0x30
      tcp_free(pcb2);
 8008804:	6a38      	ldr	r0, [r7, #32]
 8008806:	f7fe ff15 	bl	8007634 <tcp_free>
 800880a:	e004      	b.n	8008816 <tcp_slowtmr+0x6ea>
    } else {
      prev = pcb;
 800880c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800880e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pcb = pcb->next;
 8008810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	633b      	str	r3, [r7, #48]	@ 0x30
  while (pcb != NULL) {
 8008816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008818:	2b00      	cmp	r3, #0
 800881a:	d1a9      	bne.n	8008770 <tcp_slowtmr+0x644>
    }
  }
}
 800881c:	bf00      	nop
 800881e:	bf00      	nop
 8008820:	3738      	adds	r7, #56	@ 0x38
 8008822:	46bd      	mov	sp, r7
 8008824:	bdb0      	pop	{r4, r5, r7, pc}
 8008826:	bf00      	nop
 8008828:	08012b24 	.word	0x08012b24
 800882c:	200087fc 	.word	0x200087fc
 8008830:	200087f8 	.word	0x200087f8
 8008834:	08012478 	.word	0x08012478
 8008838:	08012b48 	.word	0x08012b48
 800883c:	080124bc 	.word	0x080124bc
 8008840:	200087e8 	.word	0x200087e8
 8008844:	08012b78 	.word	0x08012b78
 8008848:	08012ba0 	.word	0x08012ba0

0800884c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8008852:	4b30      	ldr	r3, [pc, #192]	@ (8008914 <tcp_fasttmr+0xc8>)
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	3301      	adds	r3, #1
 8008858:	b2da      	uxtb	r2, r3
 800885a:	4b2e      	ldr	r3, [pc, #184]	@ (8008914 <tcp_fasttmr+0xc8>)
 800885c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800885e:	4b2e      	ldr	r3, [pc, #184]	@ (8008918 <tcp_fasttmr+0xcc>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008864:	e04e      	b.n	8008904 <tcp_fasttmr+0xb8>
    if (pcb->last_timer != tcp_timer_ctr) {
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	7f9a      	ldrb	r2, [r3, #30]
 800886a:	4b2a      	ldr	r3, [pc, #168]	@ (8008914 <tcp_fasttmr+0xc8>)
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	429a      	cmp	r2, r3
 8008870:	d045      	beq.n	80088fe <tcp_fasttmr+0xb2>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8008872:	4b28      	ldr	r3, [pc, #160]	@ (8008914 <tcp_fasttmr+0xc8>)
 8008874:	781a      	ldrb	r2, [r3, #0]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	8b5b      	ldrh	r3, [r3, #26]
 800887e:	f003 0301 	and.w	r3, r3, #1
 8008882:	2b00      	cmp	r3, #0
 8008884:	d013      	beq.n	80088ae <tcp_fasttmr+0x62>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
 8008886:	4825      	ldr	r0, [pc, #148]	@ (800891c <tcp_fasttmr+0xd0>)
 8008888:	f008 f928 	bl	8010adc <puts>
        tcp_ack_now(pcb);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	8b5b      	ldrh	r3, [r3, #26]
 8008890:	f043 0302 	orr.w	r3, r3, #2
 8008894:	b29a      	uxth	r2, r3
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f004 f97a 	bl	800cb94 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	8b5b      	ldrh	r3, [r3, #26]
 80088a4:	f023 0303 	bic.w	r3, r3, #3
 80088a8:	b29a      	uxth	r2, r3
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	8b5b      	ldrh	r3, [r3, #26]
 80088b2:	f003 0308 	and.w	r3, r3, #8
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d00c      	beq.n	80088d4 <tcp_fasttmr+0x88>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
 80088ba:	4819      	ldr	r0, [pc, #100]	@ (8008920 <tcp_fasttmr+0xd4>)
 80088bc:	f008 f90e 	bl	8010adc <puts>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	8b5b      	ldrh	r3, [r3, #26]
 80088c4:	f023 0308 	bic.w	r3, r3, #8
 80088c8:	b29a      	uxth	r2, r3
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f7ff f844 	bl	800795c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d00a      	beq.n	80088f8 <tcp_fasttmr+0xac>
        tcp_active_pcbs_changed = 0;
 80088e2:	4b10      	ldr	r3, [pc, #64]	@ (8008924 <tcp_fasttmr+0xd8>)
 80088e4:	2200      	movs	r2, #0
 80088e6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 f81d 	bl	8008928 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80088ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008924 <tcp_fasttmr+0xd8>)
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d000      	beq.n	80088f8 <tcp_fasttmr+0xac>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80088f6:	e7b2      	b.n	800885e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	607b      	str	r3, [r7, #4]
 80088fc:	e002      	b.n	8008904 <tcp_fasttmr+0xb8>
    } else {
      pcb = pcb->next;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d1ad      	bne.n	8008866 <tcp_fasttmr+0x1a>
    }
  }
}
 800890a:	bf00      	nop
 800890c:	bf00      	nop
 800890e:	3708      	adds	r7, #8
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}
 8008914:	200087fe 	.word	0x200087fe
 8008918:	200087f4 	.word	0x200087f4
 800891c:	08012bc8 	.word	0x08012bc8
 8008920:	08012be4 	.word	0x08012be4
 8008924:	200087fc 	.word	0x200087fc

08008928 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8008928:	b590      	push	{r4, r7, lr}
 800892a:	b085      	sub	sp, #20
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d109      	bne.n	800894a <tcp_process_refused_data+0x22>
 8008936:	4b37      	ldr	r3, [pc, #220]	@ (8008a14 <tcp_process_refused_data+0xec>)
 8008938:	f240 6209 	movw	r2, #1545	@ 0x609
 800893c:	4936      	ldr	r1, [pc, #216]	@ (8008a18 <tcp_process_refused_data+0xf0>)
 800893e:	4837      	ldr	r0, [pc, #220]	@ (8008a1c <tcp_process_refused_data+0xf4>)
 8008940:	f008 f85c 	bl	80109fc <iprintf>
 8008944:	f06f 030f 	mvn.w	r3, #15
 8008948:	e060      	b.n	8008a0c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800894e:	7b5b      	ldrb	r3, [r3, #13]
 8008950:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008956:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008964:	2b00      	cmp	r3, #0
 8008966:	d00b      	beq.n	8008980 <tcp_process_refused_data+0x58>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6918      	ldr	r0, [r3, #16]
 8008972:	2300      	movs	r3, #0
 8008974:	68ba      	ldr	r2, [r7, #8]
 8008976:	6879      	ldr	r1, [r7, #4]
 8008978:	47a0      	blx	r4
 800897a:	4603      	mov	r3, r0
 800897c:	73fb      	strb	r3, [r7, #15]
 800897e:	e007      	b.n	8008990 <tcp_process_refused_data+0x68>
 8008980:	2300      	movs	r3, #0
 8008982:	68ba      	ldr	r2, [r7, #8]
 8008984:	6879      	ldr	r1, [r7, #4]
 8008986:	2000      	movs	r0, #0
 8008988:	f000 f8a6 	bl	8008ad8 <tcp_recv_null>
 800898c:	4603      	mov	r3, r0
 800898e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008990:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d12a      	bne.n	80089ee <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008998:	7bbb      	ldrb	r3, [r7, #14]
 800899a:	f003 0320 	and.w	r3, r3, #32
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d033      	beq.n	8008a0a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089a6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80089aa:	d005      	beq.n	80089b8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089b0:	3301      	adds	r3, #1
 80089b2:	b29a      	uxth	r2, r3
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d00b      	beq.n	80089da <tcp_process_refused_data+0xb2>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6918      	ldr	r0, [r3, #16]
 80089cc:	2300      	movs	r3, #0
 80089ce:	2200      	movs	r2, #0
 80089d0:	6879      	ldr	r1, [r7, #4]
 80089d2:	47a0      	blx	r4
 80089d4:	4603      	mov	r3, r0
 80089d6:	73fb      	strb	r3, [r7, #15]
 80089d8:	e001      	b.n	80089de <tcp_process_refused_data+0xb6>
 80089da:	2300      	movs	r3, #0
 80089dc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80089de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089e2:	f113 0f0d 	cmn.w	r3, #13
 80089e6:	d110      	bne.n	8008a0a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80089e8:	f06f 030c 	mvn.w	r3, #12
 80089ec:	e00e      	b.n	8008a0c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80089ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089f2:	f113 0f0d 	cmn.w	r3, #13
 80089f6:	d102      	bne.n	80089fe <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80089f8:	f06f 030c 	mvn.w	r3, #12
 80089fc:	e006      	b.n	8008a0c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	68ba      	ldr	r2, [r7, #8]
 8008a02:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8008a04:	f06f 0304 	mvn.w	r3, #4
 8008a08:	e000      	b.n	8008a0c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8008a0a:	2300      	movs	r3, #0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3714      	adds	r7, #20
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd90      	pop	{r4, r7, pc}
 8008a14:	08012478 	.word	0x08012478
 8008a18:	08012c00 	.word	0x08012c00
 8008a1c:	080124bc 	.word	0x080124bc

08008a20 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8008a28:	e007      	b.n	8008a3a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 f80a 	bl	8008a4a <tcp_seg_free>
    seg = next;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d1f4      	bne.n	8008a2a <tcp_segs_free+0xa>
  }
}
 8008a40:	bf00      	nop
 8008a42:	bf00      	nop
 8008a44:	3710      	adds	r7, #16
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b082      	sub	sp, #8
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d00f      	beq.n	8008a78 <tcp_seg_free+0x2e>
    if (seg->p != NULL) {
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d007      	beq.n	8008a70 <tcp_seg_free+0x26>
      pbuf_free(seg->p);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	4618      	mov	r0, r3
 8008a66:	f7fe fb45 	bl	80070f4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	605a      	str	r2, [r3, #4]
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8008a70:	6879      	ldr	r1, [r7, #4]
 8008a72:	2003      	movs	r0, #3
 8008a74:	f7fd fcc8 	bl	8006408 <memp_free>
  }
}
 8008a78:	bf00      	nop
 8008a7a:	3708      	adds	r7, #8
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d106      	bne.n	8008a9c <tcp_seg_copy+0x1c>
 8008a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8008acc <tcp_seg_copy+0x4c>)
 8008a90:	f240 6282 	movw	r2, #1666	@ 0x682
 8008a94:	490e      	ldr	r1, [pc, #56]	@ (8008ad0 <tcp_seg_copy+0x50>)
 8008a96:	480f      	ldr	r0, [pc, #60]	@ (8008ad4 <tcp_seg_copy+0x54>)
 8008a98:	f007 ffb0 	bl	80109fc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8008a9c:	2003      	movs	r0, #3
 8008a9e:	f7fd fc43 	bl	8006328 <memp_malloc>
 8008aa2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d101      	bne.n	8008aae <tcp_seg_copy+0x2e>
    return NULL;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	e00a      	b.n	8008ac4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8008aae:	2214      	movs	r2, #20
 8008ab0:	6879      	ldr	r1, [r7, #4]
 8008ab2:	68f8      	ldr	r0, [r7, #12]
 8008ab4:	f008 f977 	bl	8010da6 <memcpy>
  pbuf_ref(cseg->p);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	4618      	mov	r0, r3
 8008abe:	f7fe fbb9 	bl	8007234 <pbuf_ref>
  return cseg;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3710      	adds	r7, #16
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	08012478 	.word	0x08012478
 8008ad0:	08012c44 	.word	0x08012c44
 8008ad4:	080124bc 	.word	0x080124bc

08008ad8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	60f8      	str	r0, [r7, #12]
 8008ae0:	60b9      	str	r1, [r7, #8]
 8008ae2:	607a      	str	r2, [r7, #4]
 8008ae4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d109      	bne.n	8008b00 <tcp_recv_null+0x28>
 8008aec:	4b12      	ldr	r3, [pc, #72]	@ (8008b38 <tcp_recv_null+0x60>)
 8008aee:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8008af2:	4912      	ldr	r1, [pc, #72]	@ (8008b3c <tcp_recv_null+0x64>)
 8008af4:	4812      	ldr	r0, [pc, #72]	@ (8008b40 <tcp_recv_null+0x68>)
 8008af6:	f007 ff81 	bl	80109fc <iprintf>
 8008afa:	f06f 030f 	mvn.w	r3, #15
 8008afe:	e016      	b.n	8008b2e <tcp_recv_null+0x56>

  if (p != NULL) {
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d009      	beq.n	8008b1a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	891b      	ldrh	r3, [r3, #8]
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	68b8      	ldr	r0, [r7, #8]
 8008b0e:	f7ff fa65 	bl	8007fdc <tcp_recved>
    pbuf_free(p);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f7fe faee 	bl	80070f4 <pbuf_free>
 8008b18:	e008      	b.n	8008b2c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8008b1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d104      	bne.n	8008b2c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8008b22:	68b8      	ldr	r0, [r7, #8]
 8008b24:	f7fe ff84 	bl	8007a30 <tcp_close>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	e000      	b.n	8008b2e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3710      	adds	r7, #16
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	08012478 	.word	0x08012478
 8008b3c:	08012c60 	.word	0x08012c60
 8008b40:	080124bc 	.word	0x080124bc

08008b44 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b086      	sub	sp, #24
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	db01      	blt.n	8008b5a <tcp_kill_prio+0x16>
 8008b56:	79fb      	ldrb	r3, [r7, #7]
 8008b58:	e000      	b.n	8008b5c <tcp_kill_prio+0x18>
 8008b5a:	237f      	movs	r3, #127	@ 0x7f
 8008b5c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8008b5e:	7afb      	ldrb	r3, [r7, #11]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d039      	beq.n	8008bd8 <tcp_kill_prio+0x94>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8008b64:	7afb      	ldrb	r3, [r7, #11]
 8008b66:	3b01      	subs	r3, #1
 8008b68:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008b72:	4b1b      	ldr	r3, [pc, #108]	@ (8008be0 <tcp_kill_prio+0x9c>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	617b      	str	r3, [r7, #20]
 8008b78:	e01f      	b.n	8008bba <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	7d5b      	ldrb	r3, [r3, #21]
 8008b7e:	7afa      	ldrb	r2, [r7, #11]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d80c      	bhi.n	8008b9e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8008b88:	7afa      	ldrb	r2, [r7, #11]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d112      	bne.n	8008bb4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008b8e:	4b15      	ldr	r3, [pc, #84]	@ (8008be4 <tcp_kill_prio+0xa0>)
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	6a1b      	ldr	r3, [r3, #32]
 8008b96:	1ad3      	subs	r3, r2, r3
 8008b98:	68fa      	ldr	r2, [r7, #12]
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d80a      	bhi.n	8008bb4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8008b9e:	4b11      	ldr	r3, [pc, #68]	@ (8008be4 <tcp_kill_prio+0xa0>)
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	6a1b      	ldr	r3, [r3, #32]
 8008ba6:	1ad3      	subs	r3, r2, r3
 8008ba8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	7d5b      	ldrb	r3, [r3, #21]
 8008bb2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	617b      	str	r3, [r7, #20]
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d1dc      	bne.n	8008b7a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d009      	beq.n	8008bda <tcp_kill_prio+0x96>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
 8008bc6:	68fa      	ldr	r2, [r7, #12]
 8008bc8:	6939      	ldr	r1, [r7, #16]
 8008bca:	4807      	ldr	r0, [pc, #28]	@ (8008be8 <tcp_kill_prio+0xa4>)
 8008bcc:	f007 ff16 	bl	80109fc <iprintf>
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008bd0:	6938      	ldr	r0, [r7, #16]
 8008bd2:	f7ff f821 	bl	8007c18 <tcp_abort>
 8008bd6:	e000      	b.n	8008bda <tcp_kill_prio+0x96>
    return;
 8008bd8:	bf00      	nop
  }
}
 8008bda:	3718      	adds	r7, #24
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	200087f4 	.word	0x200087f4
 8008be4:	200087e8 	.word	0x200087e8
 8008be8:	08012c7c 	.word	0x08012c7c

08008bec <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b086      	sub	sp, #24
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8008bf6:	79fb      	ldrb	r3, [r7, #7]
 8008bf8:	2b08      	cmp	r3, #8
 8008bfa:	d009      	beq.n	8008c10 <tcp_kill_state+0x24>
 8008bfc:	79fb      	ldrb	r3, [r7, #7]
 8008bfe:	2b09      	cmp	r3, #9
 8008c00:	d006      	beq.n	8008c10 <tcp_kill_state+0x24>
 8008c02:	4b1f      	ldr	r3, [pc, #124]	@ (8008c80 <tcp_kill_state+0x94>)
 8008c04:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8008c08:	491e      	ldr	r1, [pc, #120]	@ (8008c84 <tcp_kill_state+0x98>)
 8008c0a:	481f      	ldr	r0, [pc, #124]	@ (8008c88 <tcp_kill_state+0x9c>)
 8008c0c:	f007 fef6 	bl	80109fc <iprintf>

  inactivity = 0;
 8008c10:	2300      	movs	r3, #0
 8008c12:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008c14:	2300      	movs	r3, #0
 8008c16:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008c18:	4b1c      	ldr	r3, [pc, #112]	@ (8008c8c <tcp_kill_state+0xa0>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	617b      	str	r3, [r7, #20]
 8008c1e:	e017      	b.n	8008c50 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	7d1b      	ldrb	r3, [r3, #20]
 8008c24:	79fa      	ldrb	r2, [r7, #7]
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d10f      	bne.n	8008c4a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008c2a:	4b19      	ldr	r3, [pc, #100]	@ (8008c90 <tcp_kill_state+0xa4>)
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	6a1b      	ldr	r3, [r3, #32]
 8008c32:	1ad3      	subs	r3, r2, r3
 8008c34:	68fa      	ldr	r2, [r7, #12]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d807      	bhi.n	8008c4a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8008c3a:	4b15      	ldr	r3, [pc, #84]	@ (8008c90 <tcp_kill_state+0xa4>)
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	6a1b      	ldr	r3, [r3, #32]
 8008c42:	1ad3      	subs	r3, r2, r3
 8008c44:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	68db      	ldr	r3, [r3, #12]
 8008c4e:	617b      	str	r3, [r7, #20]
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d1e4      	bne.n	8008c20 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d00c      	beq.n	8008c76 <tcp_kill_state+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
 8008c5c:	79fb      	ldrb	r3, [r7, #7]
 8008c5e:	4a0d      	ldr	r2, [pc, #52]	@ (8008c94 <tcp_kill_state+0xa8>)
 8008c60:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	693a      	ldr	r2, [r7, #16]
 8008c68:	480b      	ldr	r0, [pc, #44]	@ (8008c98 <tcp_kill_state+0xac>)
 8008c6a:	f007 fec7 	bl	80109fc <iprintf>
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8008c6e:	2100      	movs	r1, #0
 8008c70:	6938      	ldr	r0, [r7, #16]
 8008c72:	f7fe ff13 	bl	8007a9c <tcp_abandon>
  }
}
 8008c76:	bf00      	nop
 8008c78:	3718      	adds	r7, #24
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	08012478 	.word	0x08012478
 8008c84:	08012ca8 	.word	0x08012ca8
 8008c88:	080124bc 	.word	0x080124bc
 8008c8c:	200087f4 	.word	0x200087f4
 8008c90:	200087e8 	.word	0x200087e8
 8008c94:	08014fe4 	.word	0x08014fe4
 8008c98:	08012cb8 	.word	0x08012cb8

08008c9c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008caa:	4b14      	ldr	r3, [pc, #80]	@ (8008cfc <tcp_kill_timewait+0x60>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	60fb      	str	r3, [r7, #12]
 8008cb0:	e012      	b.n	8008cd8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008cb2:	4b13      	ldr	r3, [pc, #76]	@ (8008d00 <tcp_kill_timewait+0x64>)
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	6a1b      	ldr	r3, [r3, #32]
 8008cba:	1ad3      	subs	r3, r2, r3
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d807      	bhi.n	8008cd2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8008cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8008d00 <tcp_kill_timewait+0x64>)
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6a1b      	ldr	r3, [r3, #32]
 8008cca:	1ad3      	subs	r3, r2, r3
 8008ccc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	60fb      	str	r3, [r7, #12]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d1e9      	bne.n	8008cb2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d007      	beq.n	8008cf4 <tcp_kill_timewait+0x58>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	68b9      	ldr	r1, [r7, #8]
 8008ce8:	4806      	ldr	r0, [pc, #24]	@ (8008d04 <tcp_kill_timewait+0x68>)
 8008cea:	f007 fe87 	bl	80109fc <iprintf>
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008cee:	68b8      	ldr	r0, [r7, #8]
 8008cf0:	f7fe ff92 	bl	8007c18 <tcp_abort>
  }
}
 8008cf4:	bf00      	nop
 8008cf6:	3710      	adds	r7, #16
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}
 8008cfc:	200087f8 	.word	0x200087f8
 8008d00:	200087e8 	.word	0x200087e8
 8008d04:	08012cec 	.word	0x08012cec

08008d08 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8008d0e:	4b12      	ldr	r3, [pc, #72]	@ (8008d58 <tcp_handle_closepend+0x50>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008d14:	e017      	b.n	8008d46 <tcp_handle_closepend+0x3e>
    struct tcp_pcb *next = pcb->next;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	68db      	ldr	r3, [r3, #12]
 8008d1a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	8b5b      	ldrh	r3, [r3, #26]
 8008d20:	f003 0308 	and.w	r3, r3, #8
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d00c      	beq.n	8008d42 <tcp_handle_closepend+0x3a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
 8008d28:	480c      	ldr	r0, [pc, #48]	@ (8008d5c <tcp_handle_closepend+0x54>)
 8008d2a:	f007 fed7 	bl	8010adc <puts>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	8b5b      	ldrh	r3, [r3, #26]
 8008d32:	f023 0308 	bic.w	r3, r3, #8
 8008d36:	b29a      	uxth	r2, r3
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f7fe fe0d 	bl	800795c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d1e4      	bne.n	8008d16 <tcp_handle_closepend+0xe>
  }
}
 8008d4c:	bf00      	nop
 8008d4e:	bf00      	nop
 8008d50:	3708      	adds	r7, #8
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	200087f4 	.word	0x200087f4
 8008d5c:	08012d28 	.word	0x08012d28

08008d60 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	4603      	mov	r3, r0
 8008d68:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008d6a:	2001      	movs	r0, #1
 8008d6c:	f7fd fadc 	bl	8006328 <memp_malloc>
 8008d70:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d134      	bne.n	8008de2 <tcp_alloc+0x82>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8008d78:	f7ff ffc6 	bl	8008d08 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
 8008d7c:	483d      	ldr	r0, [pc, #244]	@ (8008e74 <tcp_alloc+0x114>)
 8008d7e:	f007 fead 	bl	8010adc <puts>
    tcp_kill_timewait();
 8008d82:	f7ff ff8b 	bl	8008c9c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008d86:	2001      	movs	r0, #1
 8008d88:	f7fd face 	bl	8006328 <memp_malloc>
 8008d8c:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d126      	bne.n	8008de2 <tcp_alloc+0x82>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
 8008d94:	4838      	ldr	r0, [pc, #224]	@ (8008e78 <tcp_alloc+0x118>)
 8008d96:	f007 fea1 	bl	8010adc <puts>
      tcp_kill_state(LAST_ACK);
 8008d9a:	2009      	movs	r0, #9
 8008d9c:	f7ff ff26 	bl	8008bec <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008da0:	2001      	movs	r0, #1
 8008da2:	f7fd fac1 	bl	8006328 <memp_malloc>
 8008da6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d119      	bne.n	8008de2 <tcp_alloc+0x82>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
 8008dae:	4833      	ldr	r0, [pc, #204]	@ (8008e7c <tcp_alloc+0x11c>)
 8008db0:	f007 fe94 	bl	8010adc <puts>
        tcp_kill_state(CLOSING);
 8008db4:	2008      	movs	r0, #8
 8008db6:	f7ff ff19 	bl	8008bec <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008dba:	2001      	movs	r0, #1
 8008dbc:	f7fd fab4 	bl	8006328 <memp_malloc>
 8008dc0:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d10c      	bne.n	8008de2 <tcp_alloc+0x82>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
 8008dc8:	79fb      	ldrb	r3, [r7, #7]
 8008dca:	4619      	mov	r1, r3
 8008dcc:	482c      	ldr	r0, [pc, #176]	@ (8008e80 <tcp_alloc+0x120>)
 8008dce:	f007 fe15 	bl	80109fc <iprintf>
          tcp_kill_prio(prio);
 8008dd2:	79fb      	ldrb	r3, [r7, #7]
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f7ff feb5 	bl	8008b44 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008dda:	2001      	movs	r0, #1
 8008ddc:	f7fd faa4 	bl	8006328 <memp_malloc>
 8008de0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d03f      	beq.n	8008e68 <tcp_alloc+0x108>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008de8:	229c      	movs	r2, #156	@ 0x9c
 8008dea:	2100      	movs	r1, #0
 8008dec:	68f8      	ldr	r0, [r7, #12]
 8008dee:	f007 ff65 	bl	8010cbc <memset>
    pcb->prio = prio;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	79fa      	ldrb	r2, [r7, #7]
 8008df6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8008dfe:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8008e08:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	22ff      	movs	r2, #255	@ 0xff
 8008e16:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8008e1e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2206      	movs	r2, #6
 8008e24:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2206      	movs	r2, #6
 8008e2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008e34:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2201      	movs	r2, #1
 8008e3a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8008e3e:	4b11      	ldr	r3, [pc, #68]	@ (8008e84 <tcp_alloc+0x124>)
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8008e46:	4b10      	ldr	r3, [pc, #64]	@ (8008e88 <tcp_alloc+0x128>)
 8008e48:	781a      	ldrb	r2, [r3, #0]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8008e54:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	4a0c      	ldr	r2, [pc, #48]	@ (8008e8c <tcp_alloc+0x12c>)
 8008e5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	4a0b      	ldr	r2, [pc, #44]	@ (8008e90 <tcp_alloc+0x130>)
 8008e64:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8008e68:	68fb      	ldr	r3, [r7, #12]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	08012d4c 	.word	0x08012d4c
 8008e78:	08012d80 	.word	0x08012d80
 8008e7c:	08012db4 	.word	0x08012db4
 8008e80:	08012de8 	.word	0x08012de8
 8008e84:	200087e8 	.word	0x200087e8
 8008e88:	200087fe 	.word	0x200087fe
 8008e8c:	08008ad9 	.word	0x08008ad9
 8008e90:	006ddd00 	.word	0x006ddd00

08008e94 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8008e98:	2040      	movs	r0, #64	@ 0x40
 8008e9a:	f7ff ff61 	bl	8008d60 <tcp_alloc>
 8008e9e:	4603      	mov	r3, r0
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d002      	beq.n	8008eba <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	683a      	ldr	r2, [r7, #0]
 8008eb8:	611a      	str	r2, [r3, #16]
  }
}
 8008eba:	bf00      	nop
 8008ebc:	370c      	adds	r7, #12
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr
	...

08008ec8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d00e      	beq.n	8008ef6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	7d1b      	ldrb	r3, [r3, #20]
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d106      	bne.n	8008eee <tcp_recv+0x26>
 8008ee0:	4b07      	ldr	r3, [pc, #28]	@ (8008f00 <tcp_recv+0x38>)
 8008ee2:	f240 72df 	movw	r2, #2015	@ 0x7df
 8008ee6:	4907      	ldr	r1, [pc, #28]	@ (8008f04 <tcp_recv+0x3c>)
 8008ee8:	4807      	ldr	r0, [pc, #28]	@ (8008f08 <tcp_recv+0x40>)
 8008eea:	f007 fd87 	bl	80109fc <iprintf>
    pcb->recv = recv;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	683a      	ldr	r2, [r7, #0]
 8008ef2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 8008ef6:	bf00      	nop
 8008ef8:	3708      	adds	r7, #8
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	08012478 	.word	0x08012478
 8008f04:	08012e28 	.word	0x08012e28
 8008f08:	080124bc 	.word	0x080124bc

08008f0c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b085      	sub	sp, #20
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d008      	beq.n	8008f2e <tcp_accept+0x22>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	7d1b      	ldrb	r3, [r3, #20]
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d104      	bne.n	8008f2e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	683a      	ldr	r2, [r7, #0]
 8008f2c:	619a      	str	r2, [r3, #24]
  }
}
 8008f2e:	bf00      	nop
 8008f30:	3714      	adds	r7, #20
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr
	...

08008f3c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	60f8      	str	r0, [r7, #12]
 8008f44:	60b9      	str	r1, [r7, #8]
 8008f46:	4613      	mov	r3, r2
 8008f48:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d107      	bne.n	8008f60 <tcp_poll+0x24>
 8008f50:	4b0e      	ldr	r3, [pc, #56]	@ (8008f8c <tcp_poll+0x50>)
 8008f52:	f640 023d 	movw	r2, #2109	@ 0x83d
 8008f56:	490e      	ldr	r1, [pc, #56]	@ (8008f90 <tcp_poll+0x54>)
 8008f58:	480e      	ldr	r0, [pc, #56]	@ (8008f94 <tcp_poll+0x58>)
 8008f5a:	f007 fd4f 	bl	80109fc <iprintf>
 8008f5e:	e011      	b.n	8008f84 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	7d1b      	ldrb	r3, [r3, #20]
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d106      	bne.n	8008f76 <tcp_poll+0x3a>
 8008f68:	4b08      	ldr	r3, [pc, #32]	@ (8008f8c <tcp_poll+0x50>)
 8008f6a:	f640 023e 	movw	r2, #2110	@ 0x83e
 8008f6e:	490a      	ldr	r1, [pc, #40]	@ (8008f98 <tcp_poll+0x5c>)
 8008f70:	4808      	ldr	r0, [pc, #32]	@ (8008f94 <tcp_poll+0x58>)
 8008f72:	f007 fd43 	bl	80109fc <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	68ba      	ldr	r2, [r7, #8]
 8008f7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	79fa      	ldrb	r2, [r7, #7]
 8008f82:	775a      	strb	r2, [r3, #29]
}
 8008f84:	3710      	adds	r7, #16
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	08012478 	.word	0x08012478
 8008f90:	08012ea0 	.word	0x08012ea0
 8008f94:	080124bc 	.word	0x080124bc
 8008f98:	08012eb8 	.word	0x08012eb8

08008f9c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d107      	bne.n	8008fba <tcp_pcb_purge+0x1e>
 8008faa:	4b2d      	ldr	r3, [pc, #180]	@ (8009060 <tcp_pcb_purge+0xc4>)
 8008fac:	f640 0251 	movw	r2, #2129	@ 0x851
 8008fb0:	492c      	ldr	r1, [pc, #176]	@ (8009064 <tcp_pcb_purge+0xc8>)
 8008fb2:	482d      	ldr	r0, [pc, #180]	@ (8009068 <tcp_pcb_purge+0xcc>)
 8008fb4:	f007 fd22 	bl	80109fc <iprintf>
 8008fb8:	e04e      	b.n	8009058 <tcp_pcb_purge+0xbc>

  if (pcb->state != CLOSED &&
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	7d1b      	ldrb	r3, [r3, #20]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d04a      	beq.n	8009058 <tcp_pcb_purge+0xbc>
      pcb->state != TIME_WAIT &&
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8008fc6:	2b0a      	cmp	r3, #10
 8008fc8:	d046      	beq.n	8009058 <tcp_pcb_purge+0xbc>
      pcb->state != LISTEN) {
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d042      	beq.n	8009058 <tcp_pcb_purge+0xbc>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));
 8008fd2:	4826      	ldr	r0, [pc, #152]	@ (800906c <tcp_pcb_purge+0xd0>)
 8008fd4:	f007 fd82 	bl	8010adc <puts>

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00a      	beq.n	8008ff6 <tcp_pcb_purge+0x5a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
 8008fe0:	4823      	ldr	r0, [pc, #140]	@ (8009070 <tcp_pcb_purge+0xd4>)
 8008fe2:	f007 fd7b 	bl	8010adc <puts>
      pbuf_free(pcb->refused_data);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7fe f882 	bl	80070f4 <pbuf_free>
      pcb->refused_data = NULL;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unsent != NULL) {
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d002      	beq.n	8009004 <tcp_pcb_purge+0x68>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: not all data sent\n"));
 8008ffe:	481d      	ldr	r0, [pc, #116]	@ (8009074 <tcp_pcb_purge+0xd8>)
 8009000:	f007 fd6c 	bl	8010adc <puts>
    }
    if (pcb->unacked != NULL) {
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009008:	2b00      	cmp	r3, #0
 800900a:	d002      	beq.n	8009012 <tcp_pcb_purge+0x76>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
 800900c:	481a      	ldr	r0, [pc, #104]	@ (8009078 <tcp_pcb_purge+0xdc>)
 800900e:	f007 fd65 	bl	8010adc <puts>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009016:	2b00      	cmp	r3, #0
 8009018:	d005      	beq.n	8009026 <tcp_pcb_purge+0x8a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
 800901a:	4818      	ldr	r0, [pc, #96]	@ (800907c <tcp_pcb_purge+0xe0>)
 800901c:	f007 fd5e 	bl	8010adc <puts>
      tcp_free_ooseq(pcb);
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 f99f 	bl	8009364 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800902c:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009032:	4618      	mov	r0, r3
 8009034:	f7ff fcf4 	bl	8008a20 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800903c:	4618      	mov	r0, r3
 800903e:	f7ff fcef 	bl	8008a20 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2200      	movs	r2, #0
 8009046:	66da      	str	r2, [r3, #108]	@ 0x6c
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8009058:	3708      	adds	r7, #8
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	08012478 	.word	0x08012478
 8009064:	08012ed8 	.word	0x08012ed8
 8009068:	080124bc 	.word	0x080124bc
 800906c:	08012ef4 	.word	0x08012ef4
 8009070:	08012f04 	.word	0x08012f04
 8009074:	08012f30 	.word	0x08012f30
 8009078:	08012f54 	.word	0x08012f54
 800907c:	08012f7c 	.word	0x08012f7c

08009080 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d106      	bne.n	800909e <tcp_pcb_remove+0x1e>
 8009090:	4b44      	ldr	r3, [pc, #272]	@ (80091a4 <tcp_pcb_remove+0x124>)
 8009092:	f640 0283 	movw	r2, #2179	@ 0x883
 8009096:	4944      	ldr	r1, [pc, #272]	@ (80091a8 <tcp_pcb_remove+0x128>)
 8009098:	4844      	ldr	r0, [pc, #272]	@ (80091ac <tcp_pcb_remove+0x12c>)
 800909a:	f007 fcaf 	bl	80109fc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d106      	bne.n	80090b2 <tcp_pcb_remove+0x32>
 80090a4:	4b3f      	ldr	r3, [pc, #252]	@ (80091a4 <tcp_pcb_remove+0x124>)
 80090a6:	f640 0284 	movw	r2, #2180	@ 0x884
 80090aa:	4941      	ldr	r1, [pc, #260]	@ (80091b0 <tcp_pcb_remove+0x130>)
 80090ac:	483f      	ldr	r0, [pc, #252]	@ (80091ac <tcp_pcb_remove+0x12c>)
 80090ae:	f007 fca5 	bl	80109fc <iprintf>

  TCP_RMV(pcblist, pcb);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	683a      	ldr	r2, [r7, #0]
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d105      	bne.n	80090c8 <tcp_pcb_remove+0x48>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	68da      	ldr	r2, [r3, #12]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	601a      	str	r2, [r3, #0]
 80090c6:	e013      	b.n	80090f0 <tcp_pcb_remove+0x70>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	60fb      	str	r3, [r7, #12]
 80090ce:	e00c      	b.n	80090ea <tcp_pcb_remove+0x6a>
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	683a      	ldr	r2, [r7, #0]
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d104      	bne.n	80090e4 <tcp_pcb_remove+0x64>
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	68da      	ldr	r2, [r3, #12]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	60da      	str	r2, [r3, #12]
 80090e2:	e005      	b.n	80090f0 <tcp_pcb_remove+0x70>
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	68db      	ldr	r3, [r3, #12]
 80090e8:	60fb      	str	r3, [r7, #12]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d1ef      	bne.n	80090d0 <tcp_pcb_remove+0x50>
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	2200      	movs	r2, #0
 80090f4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80090f6:	6838      	ldr	r0, [r7, #0]
 80090f8:	f7ff ff50 	bl	8008f9c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	7d1b      	ldrb	r3, [r3, #20]
 8009100:	2b0a      	cmp	r3, #10
 8009102:	d013      	beq.n	800912c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8009108:	2b01      	cmp	r3, #1
 800910a:	d00f      	beq.n	800912c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	8b5b      	ldrh	r3, [r3, #26]
 8009110:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8009114:	2b00      	cmp	r3, #0
 8009116:	d009      	beq.n	800912c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	8b5b      	ldrh	r3, [r3, #26]
 800911c:	f043 0302 	orr.w	r3, r3, #2
 8009120:	b29a      	uxth	r2, r3
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009126:	6838      	ldr	r0, [r7, #0]
 8009128:	f003 fd34 	bl	800cb94 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	7d1b      	ldrb	r3, [r3, #20]
 8009130:	2b01      	cmp	r3, #1
 8009132:	d020      	beq.n	8009176 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009138:	2b00      	cmp	r3, #0
 800913a:	d006      	beq.n	800914a <tcp_pcb_remove+0xca>
 800913c:	4b19      	ldr	r3, [pc, #100]	@ (80091a4 <tcp_pcb_remove+0x124>)
 800913e:	f640 0293 	movw	r2, #2195	@ 0x893
 8009142:	491c      	ldr	r1, [pc, #112]	@ (80091b4 <tcp_pcb_remove+0x134>)
 8009144:	4819      	ldr	r0, [pc, #100]	@ (80091ac <tcp_pcb_remove+0x12c>)
 8009146:	f007 fc59 	bl	80109fc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800914e:	2b00      	cmp	r3, #0
 8009150:	d006      	beq.n	8009160 <tcp_pcb_remove+0xe0>
 8009152:	4b14      	ldr	r3, [pc, #80]	@ (80091a4 <tcp_pcb_remove+0x124>)
 8009154:	f640 0294 	movw	r2, #2196	@ 0x894
 8009158:	4917      	ldr	r1, [pc, #92]	@ (80091b8 <tcp_pcb_remove+0x138>)
 800915a:	4814      	ldr	r0, [pc, #80]	@ (80091ac <tcp_pcb_remove+0x12c>)
 800915c:	f007 fc4e 	bl	80109fc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009164:	2b00      	cmp	r3, #0
 8009166:	d006      	beq.n	8009176 <tcp_pcb_remove+0xf6>
 8009168:	4b0e      	ldr	r3, [pc, #56]	@ (80091a4 <tcp_pcb_remove+0x124>)
 800916a:	f640 0296 	movw	r2, #2198	@ 0x896
 800916e:	4913      	ldr	r1, [pc, #76]	@ (80091bc <tcp_pcb_remove+0x13c>)
 8009170:	480e      	ldr	r0, [pc, #56]	@ (80091ac <tcp_pcb_remove+0x12c>)
 8009172:	f007 fc43 	bl	80109fc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	2200      	movs	r2, #0
 800917a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	2200      	movs	r2, #0
 8009180:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
 8009182:	f000 f919 	bl	80093b8 <tcp_pcbs_sane>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d106      	bne.n	800919a <tcp_pcb_remove+0x11a>
 800918c:	4b05      	ldr	r3, [pc, #20]	@ (80091a4 <tcp_pcb_remove+0x124>)
 800918e:	f640 029e 	movw	r2, #2206	@ 0x89e
 8009192:	490b      	ldr	r1, [pc, #44]	@ (80091c0 <tcp_pcb_remove+0x140>)
 8009194:	4805      	ldr	r0, [pc, #20]	@ (80091ac <tcp_pcb_remove+0x12c>)
 8009196:	f007 fc31 	bl	80109fc <iprintf>
}
 800919a:	bf00      	nop
 800919c:	3710      	adds	r7, #16
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	08012478 	.word	0x08012478
 80091a8:	08012fa0 	.word	0x08012fa0
 80091ac:	080124bc 	.word	0x080124bc
 80091b0:	08012fbc 	.word	0x08012fbc
 80091b4:	08012fdc 	.word	0x08012fdc
 80091b8:	08012ff4 	.word	0x08012ff4
 80091bc:	08013010 	.word	0x08013010
 80091c0:	08013028 	.word	0x08013028

080091c4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b082      	sub	sp, #8
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d106      	bne.n	80091e0 <tcp_next_iss+0x1c>
 80091d2:	4b0a      	ldr	r3, [pc, #40]	@ (80091fc <tcp_next_iss+0x38>)
 80091d4:	f640 02af 	movw	r2, #2223	@ 0x8af
 80091d8:	4909      	ldr	r1, [pc, #36]	@ (8009200 <tcp_next_iss+0x3c>)
 80091da:	480a      	ldr	r0, [pc, #40]	@ (8009204 <tcp_next_iss+0x40>)
 80091dc:	f007 fc0e 	bl	80109fc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80091e0:	4b09      	ldr	r3, [pc, #36]	@ (8009208 <tcp_next_iss+0x44>)
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	4b09      	ldr	r3, [pc, #36]	@ (800920c <tcp_next_iss+0x48>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4413      	add	r3, r2
 80091ea:	4a07      	ldr	r2, [pc, #28]	@ (8009208 <tcp_next_iss+0x44>)
 80091ec:	6013      	str	r3, [r2, #0]
  return iss;
 80091ee:	4b06      	ldr	r3, [pc, #24]	@ (8009208 <tcp_next_iss+0x44>)
 80091f0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3708      	adds	r7, #8
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
 80091fa:	bf00      	nop
 80091fc:	08012478 	.word	0x08012478
 8009200:	08013048 	.word	0x08013048
 8009204:	080124bc 	.word	0x080124bc
 8009208:	20000024 	.word	0x20000024
 800920c:	200087e8 	.word	0x200087e8

08009210 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b086      	sub	sp, #24
 8009214:	af00      	add	r7, sp, #0
 8009216:	4603      	mov	r3, r0
 8009218:	60b9      	str	r1, [r7, #8]
 800921a:	607a      	str	r2, [r7, #4]
 800921c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d106      	bne.n	8009232 <tcp_eff_send_mss_netif+0x22>
 8009224:	4b14      	ldr	r3, [pc, #80]	@ (8009278 <tcp_eff_send_mss_netif+0x68>)
 8009226:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800922a:	4914      	ldr	r1, [pc, #80]	@ (800927c <tcp_eff_send_mss_netif+0x6c>)
 800922c:	4814      	ldr	r0, [pc, #80]	@ (8009280 <tcp_eff_send_mss_netif+0x70>)
 800922e:	f007 fbe5 	bl	80109fc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d101      	bne.n	800923c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8009238:	89fb      	ldrh	r3, [r7, #14]
 800923a:	e019      	b.n	8009270 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009240:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8009242:	8afb      	ldrh	r3, [r7, #22]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d012      	beq.n	800926e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8009248:	2328      	movs	r3, #40	@ 0x28
 800924a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800924c:	8afa      	ldrh	r2, [r7, #22]
 800924e:	8abb      	ldrh	r3, [r7, #20]
 8009250:	429a      	cmp	r2, r3
 8009252:	d904      	bls.n	800925e <tcp_eff_send_mss_netif+0x4e>
 8009254:	8afa      	ldrh	r2, [r7, #22]
 8009256:	8abb      	ldrh	r3, [r7, #20]
 8009258:	1ad3      	subs	r3, r2, r3
 800925a:	b29b      	uxth	r3, r3
 800925c:	e000      	b.n	8009260 <tcp_eff_send_mss_netif+0x50>
 800925e:	2300      	movs	r3, #0
 8009260:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8009262:	8a7a      	ldrh	r2, [r7, #18]
 8009264:	89fb      	ldrh	r3, [r7, #14]
 8009266:	4293      	cmp	r3, r2
 8009268:	bf28      	it	cs
 800926a:	4613      	movcs	r3, r2
 800926c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800926e:	89fb      	ldrh	r3, [r7, #14]
}
 8009270:	4618      	mov	r0, r3
 8009272:	3718      	adds	r7, #24
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}
 8009278:	08012478 	.word	0x08012478
 800927c:	08013064 	.word	0x08013064
 8009280:	080124bc 	.word	0x080124bc

08009284 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d119      	bne.n	80092cc <tcp_netif_ip_addr_changed_pcblist+0x48>
 8009298:	4b10      	ldr	r3, [pc, #64]	@ (80092dc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800929a:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800929e:	4910      	ldr	r1, [pc, #64]	@ (80092e0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80092a0:	4810      	ldr	r0, [pc, #64]	@ (80092e4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80092a2:	f007 fbab 	bl	80109fc <iprintf>

  while (pcb != NULL) {
 80092a6:	e011      	b.n	80092cc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681a      	ldr	r2, [r3, #0]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d108      	bne.n	80092c6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80092ba:	68f8      	ldr	r0, [r7, #12]
 80092bc:	f7fe fcac 	bl	8007c18 <tcp_abort>
      pcb = next;
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	60fb      	str	r3, [r7, #12]
 80092c4:	e002      	b.n	80092cc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d1ea      	bne.n	80092a8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80092d2:	bf00      	nop
 80092d4:	bf00      	nop
 80092d6:	3710      	adds	r7, #16
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}
 80092dc:	08012478 	.word	0x08012478
 80092e0:	0801308c 	.word	0x0801308c
 80092e4:	080124bc 	.word	0x080124bc

080092e8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b084      	sub	sp, #16
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d02a      	beq.n	800934e <tcp_netif_ip_addr_changed+0x66>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d026      	beq.n	800934e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009300:	4b15      	ldr	r3, [pc, #84]	@ (8009358 <tcp_netif_ip_addr_changed+0x70>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4619      	mov	r1, r3
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f7ff ffbc 	bl	8009284 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800930c:	4b13      	ldr	r3, [pc, #76]	@ (800935c <tcp_netif_ip_addr_changed+0x74>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4619      	mov	r1, r3
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f7ff ffb6 	bl	8009284 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d017      	beq.n	800934e <tcp_netif_ip_addr_changed+0x66>
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d013      	beq.n	800934e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009326:	4b0e      	ldr	r3, [pc, #56]	@ (8009360 <tcp_netif_ip_addr_changed+0x78>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	60fb      	str	r3, [r7, #12]
 800932c:	e00c      	b.n	8009348 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681a      	ldr	r2, [r3, #0]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	429a      	cmp	r2, r3
 8009338:	d103      	bne.n	8009342 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	60fb      	str	r3, [r7, #12]
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d1ef      	bne.n	800932e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800934e:	bf00      	nop
 8009350:	3710      	adds	r7, #16
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	200087f4 	.word	0x200087f4
 800935c:	200087ec 	.word	0x200087ec
 8009360:	200087f0 	.word	0x200087f0

08009364 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009370:	2b00      	cmp	r3, #0
 8009372:	d007      	beq.n	8009384 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009378:	4618      	mov	r0, r3
 800937a:	f7ff fb51 	bl	8008a20 <tcp_segs_free>
    pcb->ooseq = NULL;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2200      	movs	r2, #0
 8009382:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8009384:	bf00      	nop
 8009386:	3708      	adds	r7, #8
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <tcp_debug_print_state>:
 *
 * @param s enum tcp_state to print
 */
void
tcp_debug_print_state(enum tcp_state s)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b082      	sub	sp, #8
 8009390:	af00      	add	r7, sp, #0
 8009392:	4603      	mov	r3, r0
 8009394:	71fb      	strb	r3, [r7, #7]
  LWIP_DEBUGF(TCP_DEBUG, ("State: %s\n", tcp_state_str[s]));
 8009396:	79fb      	ldrb	r3, [r7, #7]
 8009398:	4a05      	ldr	r2, [pc, #20]	@ (80093b0 <tcp_debug_print_state+0x24>)
 800939a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800939e:	4619      	mov	r1, r3
 80093a0:	4804      	ldr	r0, [pc, #16]	@ (80093b4 <tcp_debug_print_state+0x28>)
 80093a2:	f007 fb2b 	bl	80109fc <iprintf>
}
 80093a6:	bf00      	nop
 80093a8:	3708      	adds	r7, #8
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	08014fe4 	.word	0x08014fe4
 80093b4:	080131f4 	.word	0x080131f4

080093b8 <tcp_pcbs_sane>:
/**
 * Check state consistency of the tcp_pcb lists.
 */
s16_t
tcp_pcbs_sane(void)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80093be:	4b22      	ldr	r3, [pc, #136]	@ (8009448 <tcp_pcbs_sane+0x90>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	607b      	str	r3, [r7, #4]
 80093c4:	e023      	b.n	800940e <tcp_pcbs_sane+0x56>
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != CLOSED", pcb->state != CLOSED);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	7d1b      	ldrb	r3, [r3, #20]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d106      	bne.n	80093dc <tcp_pcbs_sane+0x24>
 80093ce:	4b1f      	ldr	r3, [pc, #124]	@ (800944c <tcp_pcbs_sane+0x94>)
 80093d0:	f640 12d9 	movw	r2, #2521	@ 0x9d9
 80093d4:	491e      	ldr	r1, [pc, #120]	@ (8009450 <tcp_pcbs_sane+0x98>)
 80093d6:	481f      	ldr	r0, [pc, #124]	@ (8009454 <tcp_pcbs_sane+0x9c>)
 80093d8:	f007 fb10 	bl	80109fc <iprintf>
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != LISTEN", pcb->state != LISTEN);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	7d1b      	ldrb	r3, [r3, #20]
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d106      	bne.n	80093f2 <tcp_pcbs_sane+0x3a>
 80093e4:	4b19      	ldr	r3, [pc, #100]	@ (800944c <tcp_pcbs_sane+0x94>)
 80093e6:	f640 12da 	movw	r2, #2522	@ 0x9da
 80093ea:	491b      	ldr	r1, [pc, #108]	@ (8009458 <tcp_pcbs_sane+0xa0>)
 80093ec:	4819      	ldr	r0, [pc, #100]	@ (8009454 <tcp_pcbs_sane+0x9c>)
 80093ee:	f007 fb05 	bl	80109fc <iprintf>
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	7d1b      	ldrb	r3, [r3, #20]
 80093f6:	2b0a      	cmp	r3, #10
 80093f8:	d106      	bne.n	8009408 <tcp_pcbs_sane+0x50>
 80093fa:	4b14      	ldr	r3, [pc, #80]	@ (800944c <tcp_pcbs_sane+0x94>)
 80093fc:	f640 12db 	movw	r2, #2523	@ 0x9db
 8009400:	4916      	ldr	r1, [pc, #88]	@ (800945c <tcp_pcbs_sane+0xa4>)
 8009402:	4814      	ldr	r0, [pc, #80]	@ (8009454 <tcp_pcbs_sane+0x9c>)
 8009404:	f007 fafa 	bl	80109fc <iprintf>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	68db      	ldr	r3, [r3, #12]
 800940c:	607b      	str	r3, [r7, #4]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d1d8      	bne.n	80093c6 <tcp_pcbs_sane+0xe>
  }
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009414:	4b12      	ldr	r3, [pc, #72]	@ (8009460 <tcp_pcbs_sane+0xa8>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	607b      	str	r3, [r7, #4]
 800941a:	e00d      	b.n	8009438 <tcp_pcbs_sane+0x80>
    LWIP_ASSERT("tcp_pcbs_sane: tw pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	7d1b      	ldrb	r3, [r3, #20]
 8009420:	2b0a      	cmp	r3, #10
 8009422:	d006      	beq.n	8009432 <tcp_pcbs_sane+0x7a>
 8009424:	4b09      	ldr	r3, [pc, #36]	@ (800944c <tcp_pcbs_sane+0x94>)
 8009426:	f640 12de 	movw	r2, #2526	@ 0x9de
 800942a:	490e      	ldr	r1, [pc, #56]	@ (8009464 <tcp_pcbs_sane+0xac>)
 800942c:	4809      	ldr	r0, [pc, #36]	@ (8009454 <tcp_pcbs_sane+0x9c>)
 800942e:	f007 fae5 	bl	80109fc <iprintf>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	607b      	str	r3, [r7, #4]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d1ee      	bne.n	800941c <tcp_pcbs_sane+0x64>
  }
  return 1;
 800943e:	2301      	movs	r3, #1
}
 8009440:	4618      	mov	r0, r3
 8009442:	3708      	adds	r7, #8
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}
 8009448:	200087f4 	.word	0x200087f4
 800944c:	08012478 	.word	0x08012478
 8009450:	080132cc 	.word	0x080132cc
 8009454:	080124bc 	.word	0x080124bc
 8009458:	080132f8 	.word	0x080132f8
 800945c:	08013324 	.word	0x08013324
 8009460:	200087f8 	.word	0x200087f8
 8009464:	08013354 	.word	0x08013354

08009468 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8009468:	b590      	push	{r4, r7, lr}
 800946a:	b08d      	sub	sp, #52	@ 0x34
 800946c:	af04      	add	r7, sp, #16
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d105      	bne.n	8009484 <tcp_input+0x1c>
 8009478:	4b9b      	ldr	r3, [pc, #620]	@ (80096e8 <tcp_input+0x280>)
 800947a:	2283      	movs	r2, #131	@ 0x83
 800947c:	499b      	ldr	r1, [pc, #620]	@ (80096ec <tcp_input+0x284>)
 800947e:	489c      	ldr	r0, [pc, #624]	@ (80096f0 <tcp_input+0x288>)
 8009480:	f007 fabc 	bl	80109fc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	4a9a      	ldr	r2, [pc, #616]	@ (80096f4 <tcp_input+0x28c>)
 800948a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	895b      	ldrh	r3, [r3, #10]
 8009490:	2b13      	cmp	r3, #19
 8009492:	f240 83dd 	bls.w	8009c50 <tcp_input+0x7e8>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009496:	4b98      	ldr	r3, [pc, #608]	@ (80096f8 <tcp_input+0x290>)
 8009498:	695b      	ldr	r3, [r3, #20]
 800949a:	4a97      	ldr	r2, [pc, #604]	@ (80096f8 <tcp_input+0x290>)
 800949c:	6812      	ldr	r2, [r2, #0]
 800949e:	4611      	mov	r1, r2
 80094a0:	4618      	mov	r0, r3
 80094a2:	f006 fa25 	bl	800f8f0 <ip4_addr_isbroadcast_u32>
 80094a6:	4603      	mov	r3, r0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	f040 83d3 	bne.w	8009c54 <tcp_input+0x7ec>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80094ae:	4b92      	ldr	r3, [pc, #584]	@ (80096f8 <tcp_input+0x290>)
 80094b0:	695b      	ldr	r3, [r3, #20]
 80094b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80094b6:	2be0      	cmp	r3, #224	@ 0xe0
 80094b8:	f000 83cc 	beq.w	8009c54 <tcp_input+0x7ec>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80094bc:	4b8d      	ldr	r3, [pc, #564]	@ (80096f4 <tcp_input+0x28c>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	899b      	ldrh	r3, [r3, #12]
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	4618      	mov	r0, r3
 80094c6:	f7fc fab7 	bl	8005a38 <lwip_htons>
 80094ca:	4603      	mov	r3, r0
 80094cc:	0b1b      	lsrs	r3, r3, #12
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80094d6:	7cbb      	ldrb	r3, [r7, #18]
 80094d8:	2b13      	cmp	r3, #19
 80094da:	f240 83bd 	bls.w	8009c58 <tcp_input+0x7f0>
 80094de:	7cbb      	ldrb	r3, [r7, #18]
 80094e0:	b29a      	uxth	r2, r3
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	891b      	ldrh	r3, [r3, #8]
 80094e6:	429a      	cmp	r2, r3
 80094e8:	f200 83b6 	bhi.w	8009c58 <tcp_input+0x7f0>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80094ec:	7cbb      	ldrb	r3, [r7, #18]
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	3b14      	subs	r3, #20
 80094f2:	b29a      	uxth	r2, r3
 80094f4:	4b81      	ldr	r3, [pc, #516]	@ (80096fc <tcp_input+0x294>)
 80094f6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80094f8:	4b81      	ldr	r3, [pc, #516]	@ (8009700 <tcp_input+0x298>)
 80094fa:	2200      	movs	r2, #0
 80094fc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	895a      	ldrh	r2, [r3, #10]
 8009502:	7cbb      	ldrb	r3, [r7, #18]
 8009504:	b29b      	uxth	r3, r3
 8009506:	429a      	cmp	r2, r3
 8009508:	d309      	bcc.n	800951e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800950a:	4b7c      	ldr	r3, [pc, #496]	@ (80096fc <tcp_input+0x294>)
 800950c:	881a      	ldrh	r2, [r3, #0]
 800950e:	4b7d      	ldr	r3, [pc, #500]	@ (8009704 <tcp_input+0x29c>)
 8009510:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8009512:	7cbb      	ldrb	r3, [r7, #18]
 8009514:	4619      	mov	r1, r3
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f7fd fd66 	bl	8006fe8 <pbuf_remove_header>
 800951c:	e04e      	b.n	80095bc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d105      	bne.n	8009532 <tcp_input+0xca>
 8009526:	4b70      	ldr	r3, [pc, #448]	@ (80096e8 <tcp_input+0x280>)
 8009528:	22c2      	movs	r2, #194	@ 0xc2
 800952a:	4977      	ldr	r1, [pc, #476]	@ (8009708 <tcp_input+0x2a0>)
 800952c:	4870      	ldr	r0, [pc, #448]	@ (80096f0 <tcp_input+0x288>)
 800952e:	f007 fa65 	bl	80109fc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8009532:	2114      	movs	r1, #20
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f7fd fd57 	bl	8006fe8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	895a      	ldrh	r2, [r3, #10]
 800953e:	4b71      	ldr	r3, [pc, #452]	@ (8009704 <tcp_input+0x29c>)
 8009540:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8009542:	4b6e      	ldr	r3, [pc, #440]	@ (80096fc <tcp_input+0x294>)
 8009544:	881a      	ldrh	r2, [r3, #0]
 8009546:	4b6f      	ldr	r3, [pc, #444]	@ (8009704 <tcp_input+0x29c>)
 8009548:	881b      	ldrh	r3, [r3, #0]
 800954a:	1ad3      	subs	r3, r2, r3
 800954c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800954e:	4b6d      	ldr	r3, [pc, #436]	@ (8009704 <tcp_input+0x29c>)
 8009550:	881b      	ldrh	r3, [r3, #0]
 8009552:	4619      	mov	r1, r3
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f7fd fd47 	bl	8006fe8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	895b      	ldrh	r3, [r3, #10]
 8009560:	8a3a      	ldrh	r2, [r7, #16]
 8009562:	429a      	cmp	r2, r3
 8009564:	f200 837a 	bhi.w	8009c5c <tcp_input+0x7f4>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	4a64      	ldr	r2, [pc, #400]	@ (8009700 <tcp_input+0x298>)
 8009570:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	8a3a      	ldrh	r2, [r7, #16]
 8009578:	4611      	mov	r1, r2
 800957a:	4618      	mov	r0, r3
 800957c:	f7fd fd34 	bl	8006fe8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	891a      	ldrh	r2, [r3, #8]
 8009584:	8a3b      	ldrh	r3, [r7, #16]
 8009586:	1ad3      	subs	r3, r2, r3
 8009588:	b29a      	uxth	r2, r3
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	895b      	ldrh	r3, [r3, #10]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d005      	beq.n	80095a2 <tcp_input+0x13a>
 8009596:	4b54      	ldr	r3, [pc, #336]	@ (80096e8 <tcp_input+0x280>)
 8009598:	22df      	movs	r2, #223	@ 0xdf
 800959a:	495c      	ldr	r1, [pc, #368]	@ (800970c <tcp_input+0x2a4>)
 800959c:	4854      	ldr	r0, [pc, #336]	@ (80096f0 <tcp_input+0x288>)
 800959e:	f007 fa2d 	bl	80109fc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	891a      	ldrh	r2, [r3, #8]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	891b      	ldrh	r3, [r3, #8]
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d005      	beq.n	80095bc <tcp_input+0x154>
 80095b0:	4b4d      	ldr	r3, [pc, #308]	@ (80096e8 <tcp_input+0x280>)
 80095b2:	22e0      	movs	r2, #224	@ 0xe0
 80095b4:	4956      	ldr	r1, [pc, #344]	@ (8009710 <tcp_input+0x2a8>)
 80095b6:	484e      	ldr	r0, [pc, #312]	@ (80096f0 <tcp_input+0x288>)
 80095b8:	f007 fa20 	bl	80109fc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80095bc:	4b4d      	ldr	r3, [pc, #308]	@ (80096f4 <tcp_input+0x28c>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	881b      	ldrh	r3, [r3, #0]
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	4a4b      	ldr	r2, [pc, #300]	@ (80096f4 <tcp_input+0x28c>)
 80095c6:	6814      	ldr	r4, [r2, #0]
 80095c8:	4618      	mov	r0, r3
 80095ca:	f7fc fa35 	bl	8005a38 <lwip_htons>
 80095ce:	4603      	mov	r3, r0
 80095d0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80095d2:	4b48      	ldr	r3, [pc, #288]	@ (80096f4 <tcp_input+0x28c>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	885b      	ldrh	r3, [r3, #2]
 80095d8:	b29b      	uxth	r3, r3
 80095da:	4a46      	ldr	r2, [pc, #280]	@ (80096f4 <tcp_input+0x28c>)
 80095dc:	6814      	ldr	r4, [r2, #0]
 80095de:	4618      	mov	r0, r3
 80095e0:	f7fc fa2a 	bl	8005a38 <lwip_htons>
 80095e4:	4603      	mov	r3, r0
 80095e6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80095e8:	4b42      	ldr	r3, [pc, #264]	@ (80096f4 <tcp_input+0x28c>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	4a41      	ldr	r2, [pc, #260]	@ (80096f4 <tcp_input+0x28c>)
 80095f0:	6814      	ldr	r4, [r2, #0]
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7fc fa35 	bl	8005a62 <lwip_htonl>
 80095f8:	4603      	mov	r3, r0
 80095fa:	6063      	str	r3, [r4, #4]
 80095fc:	6863      	ldr	r3, [r4, #4]
 80095fe:	4a45      	ldr	r2, [pc, #276]	@ (8009714 <tcp_input+0x2ac>)
 8009600:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009602:	4b3c      	ldr	r3, [pc, #240]	@ (80096f4 <tcp_input+0x28c>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	4a3a      	ldr	r2, [pc, #232]	@ (80096f4 <tcp_input+0x28c>)
 800960a:	6814      	ldr	r4, [r2, #0]
 800960c:	4618      	mov	r0, r3
 800960e:	f7fc fa28 	bl	8005a62 <lwip_htonl>
 8009612:	4603      	mov	r3, r0
 8009614:	60a3      	str	r3, [r4, #8]
 8009616:	68a3      	ldr	r3, [r4, #8]
 8009618:	4a3f      	ldr	r2, [pc, #252]	@ (8009718 <tcp_input+0x2b0>)
 800961a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800961c:	4b35      	ldr	r3, [pc, #212]	@ (80096f4 <tcp_input+0x28c>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	89db      	ldrh	r3, [r3, #14]
 8009622:	b29b      	uxth	r3, r3
 8009624:	4a33      	ldr	r2, [pc, #204]	@ (80096f4 <tcp_input+0x28c>)
 8009626:	6814      	ldr	r4, [r2, #0]
 8009628:	4618      	mov	r0, r3
 800962a:	f7fc fa05 	bl	8005a38 <lwip_htons>
 800962e:	4603      	mov	r3, r0
 8009630:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8009632:	4b30      	ldr	r3, [pc, #192]	@ (80096f4 <tcp_input+0x28c>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	899b      	ldrh	r3, [r3, #12]
 8009638:	b29b      	uxth	r3, r3
 800963a:	4618      	mov	r0, r3
 800963c:	f7fc f9fc 	bl	8005a38 <lwip_htons>
 8009640:	4603      	mov	r3, r0
 8009642:	b2db      	uxtb	r3, r3
 8009644:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009648:	b2da      	uxtb	r2, r3
 800964a:	4b34      	ldr	r3, [pc, #208]	@ (800971c <tcp_input+0x2b4>)
 800964c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	891a      	ldrh	r2, [r3, #8]
 8009652:	4b33      	ldr	r3, [pc, #204]	@ (8009720 <tcp_input+0x2b8>)
 8009654:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8009656:	4b31      	ldr	r3, [pc, #196]	@ (800971c <tcp_input+0x2b4>)
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	f003 0303 	and.w	r3, r3, #3
 800965e:	2b00      	cmp	r3, #0
 8009660:	d00c      	beq.n	800967c <tcp_input+0x214>
    tcplen++;
 8009662:	4b2f      	ldr	r3, [pc, #188]	@ (8009720 <tcp_input+0x2b8>)
 8009664:	881b      	ldrh	r3, [r3, #0]
 8009666:	3301      	adds	r3, #1
 8009668:	b29a      	uxth	r2, r3
 800966a:	4b2d      	ldr	r3, [pc, #180]	@ (8009720 <tcp_input+0x2b8>)
 800966c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	891a      	ldrh	r2, [r3, #8]
 8009672:	4b2b      	ldr	r3, [pc, #172]	@ (8009720 <tcp_input+0x2b8>)
 8009674:	881b      	ldrh	r3, [r3, #0]
 8009676:	429a      	cmp	r2, r3
 8009678:	f200 82f2 	bhi.w	8009c60 <tcp_input+0x7f8>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800967c:	2300      	movs	r3, #0
 800967e:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009680:	4b28      	ldr	r3, [pc, #160]	@ (8009724 <tcp_input+0x2bc>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	61bb      	str	r3, [r7, #24]
 8009686:	e09d      	b.n	80097c4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009688:	69bb      	ldr	r3, [r7, #24]
 800968a:	7d1b      	ldrb	r3, [r3, #20]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d105      	bne.n	800969c <tcp_input+0x234>
 8009690:	4b15      	ldr	r3, [pc, #84]	@ (80096e8 <tcp_input+0x280>)
 8009692:	22fb      	movs	r2, #251	@ 0xfb
 8009694:	4924      	ldr	r1, [pc, #144]	@ (8009728 <tcp_input+0x2c0>)
 8009696:	4816      	ldr	r0, [pc, #88]	@ (80096f0 <tcp_input+0x288>)
 8009698:	f007 f9b0 	bl	80109fc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800969c:	69bb      	ldr	r3, [r7, #24]
 800969e:	7d1b      	ldrb	r3, [r3, #20]
 80096a0:	2b0a      	cmp	r3, #10
 80096a2:	d105      	bne.n	80096b0 <tcp_input+0x248>
 80096a4:	4b10      	ldr	r3, [pc, #64]	@ (80096e8 <tcp_input+0x280>)
 80096a6:	22fc      	movs	r2, #252	@ 0xfc
 80096a8:	4920      	ldr	r1, [pc, #128]	@ (800972c <tcp_input+0x2c4>)
 80096aa:	4811      	ldr	r0, [pc, #68]	@ (80096f0 <tcp_input+0x288>)
 80096ac:	f007 f9a6 	bl	80109fc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80096b0:	69bb      	ldr	r3, [r7, #24]
 80096b2:	7d1b      	ldrb	r3, [r3, #20]
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d105      	bne.n	80096c4 <tcp_input+0x25c>
 80096b8:	4b0b      	ldr	r3, [pc, #44]	@ (80096e8 <tcp_input+0x280>)
 80096ba:	22fd      	movs	r2, #253	@ 0xfd
 80096bc:	491c      	ldr	r1, [pc, #112]	@ (8009730 <tcp_input+0x2c8>)
 80096be:	480c      	ldr	r0, [pc, #48]	@ (80096f0 <tcp_input+0x288>)
 80096c0:	f007 f99c 	bl	80109fc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80096c4:	69bb      	ldr	r3, [r7, #24]
 80096c6:	7a1b      	ldrb	r3, [r3, #8]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d033      	beq.n	8009734 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80096cc:	69bb      	ldr	r3, [r7, #24]
 80096ce:	7a1a      	ldrb	r2, [r3, #8]
 80096d0:	4b09      	ldr	r3, [pc, #36]	@ (80096f8 <tcp_input+0x290>)
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80096d8:	3301      	adds	r3, #1
 80096da:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80096dc:	429a      	cmp	r2, r3
 80096de:	d029      	beq.n	8009734 <tcp_input+0x2cc>
      prev = pcb;
 80096e0:	69bb      	ldr	r3, [r7, #24]
 80096e2:	61fb      	str	r3, [r7, #28]
      continue;
 80096e4:	e06b      	b.n	80097be <tcp_input+0x356>
 80096e6:	bf00      	nop
 80096e8:	08013380 	.word	0x08013380
 80096ec:	080133b4 	.word	0x080133b4
 80096f0:	080133cc 	.word	0x080133cc
 80096f4:	20008814 	.word	0x20008814
 80096f8:	20005238 	.word	0x20005238
 80096fc:	20008818 	.word	0x20008818
 8009700:	2000881c 	.word	0x2000881c
 8009704:	2000881a 	.word	0x2000881a
 8009708:	080133f4 	.word	0x080133f4
 800970c:	08013404 	.word	0x08013404
 8009710:	08013410 	.word	0x08013410
 8009714:	20008824 	.word	0x20008824
 8009718:	20008828 	.word	0x20008828
 800971c:	20008830 	.word	0x20008830
 8009720:	2000882e 	.word	0x2000882e
 8009724:	200087f4 	.word	0x200087f4
 8009728:	08013430 	.word	0x08013430
 800972c:	08013458 	.word	0x08013458
 8009730:	08013484 	.word	0x08013484
    }

    if (pcb->remote_port == tcphdr->src &&
 8009734:	69bb      	ldr	r3, [r7, #24]
 8009736:	8b1a      	ldrh	r2, [r3, #24]
 8009738:	4b72      	ldr	r3, [pc, #456]	@ (8009904 <tcp_input+0x49c>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	881b      	ldrh	r3, [r3, #0]
 800973e:	b29b      	uxth	r3, r3
 8009740:	429a      	cmp	r2, r3
 8009742:	d13a      	bne.n	80097ba <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8009744:	69bb      	ldr	r3, [r7, #24]
 8009746:	8ada      	ldrh	r2, [r3, #22]
 8009748:	4b6e      	ldr	r3, [pc, #440]	@ (8009904 <tcp_input+0x49c>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	885b      	ldrh	r3, [r3, #2]
 800974e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8009750:	429a      	cmp	r2, r3
 8009752:	d132      	bne.n	80097ba <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009754:	69bb      	ldr	r3, [r7, #24]
 8009756:	685a      	ldr	r2, [r3, #4]
 8009758:	4b6b      	ldr	r3, [pc, #428]	@ (8009908 <tcp_input+0x4a0>)
 800975a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800975c:	429a      	cmp	r2, r3
 800975e:	d12c      	bne.n	80097ba <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009760:	69bb      	ldr	r3, [r7, #24]
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	4b68      	ldr	r3, [pc, #416]	@ (8009908 <tcp_input+0x4a0>)
 8009766:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009768:	429a      	cmp	r2, r3
 800976a:	d126      	bne.n	80097ba <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800976c:	69bb      	ldr	r3, [r7, #24]
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	69ba      	ldr	r2, [r7, #24]
 8009772:	429a      	cmp	r2, r3
 8009774:	d106      	bne.n	8009784 <tcp_input+0x31c>
 8009776:	4b65      	ldr	r3, [pc, #404]	@ (800990c <tcp_input+0x4a4>)
 8009778:	f240 120d 	movw	r2, #269	@ 0x10d
 800977c:	4964      	ldr	r1, [pc, #400]	@ (8009910 <tcp_input+0x4a8>)
 800977e:	4865      	ldr	r0, [pc, #404]	@ (8009914 <tcp_input+0x4ac>)
 8009780:	f007 f93c 	bl	80109fc <iprintf>
      if (prev != NULL) {
 8009784:	69fb      	ldr	r3, [r7, #28]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d00a      	beq.n	80097a0 <tcp_input+0x338>
        prev->next = pcb->next;
 800978a:	69bb      	ldr	r3, [r7, #24]
 800978c:	68da      	ldr	r2, [r3, #12]
 800978e:	69fb      	ldr	r3, [r7, #28]
 8009790:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8009792:	4b61      	ldr	r3, [pc, #388]	@ (8009918 <tcp_input+0x4b0>)
 8009794:	681a      	ldr	r2, [r3, #0]
 8009796:	69bb      	ldr	r3, [r7, #24]
 8009798:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800979a:	4a5f      	ldr	r2, [pc, #380]	@ (8009918 <tcp_input+0x4b0>)
 800979c:	69bb      	ldr	r3, [r7, #24]
 800979e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80097a0:	69bb      	ldr	r3, [r7, #24]
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	69ba      	ldr	r2, [r7, #24]
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d111      	bne.n	80097ce <tcp_input+0x366>
 80097aa:	4b58      	ldr	r3, [pc, #352]	@ (800990c <tcp_input+0x4a4>)
 80097ac:	f240 1215 	movw	r2, #277	@ 0x115
 80097b0:	495a      	ldr	r1, [pc, #360]	@ (800991c <tcp_input+0x4b4>)
 80097b2:	4858      	ldr	r0, [pc, #352]	@ (8009914 <tcp_input+0x4ac>)
 80097b4:	f007 f922 	bl	80109fc <iprintf>
      break;
 80097b8:	e009      	b.n	80097ce <tcp_input+0x366>
    }
    prev = pcb;
 80097ba:	69bb      	ldr	r3, [r7, #24]
 80097bc:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80097be:	69bb      	ldr	r3, [r7, #24]
 80097c0:	68db      	ldr	r3, [r3, #12]
 80097c2:	61bb      	str	r3, [r7, #24]
 80097c4:	69bb      	ldr	r3, [r7, #24]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	f47f af5e 	bne.w	8009688 <tcp_input+0x220>
 80097cc:	e000      	b.n	80097d0 <tcp_input+0x368>
      break;
 80097ce:	bf00      	nop
  }

  if (pcb == NULL) {
 80097d0:	69bb      	ldr	r3, [r7, #24]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	f040 80aa 	bne.w	800992c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80097d8:	4b51      	ldr	r3, [pc, #324]	@ (8009920 <tcp_input+0x4b8>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	61bb      	str	r3, [r7, #24]
 80097de:	e03f      	b.n	8009860 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80097e0:	69bb      	ldr	r3, [r7, #24]
 80097e2:	7d1b      	ldrb	r3, [r3, #20]
 80097e4:	2b0a      	cmp	r3, #10
 80097e6:	d006      	beq.n	80097f6 <tcp_input+0x38e>
 80097e8:	4b48      	ldr	r3, [pc, #288]	@ (800990c <tcp_input+0x4a4>)
 80097ea:	f240 121f 	movw	r2, #287	@ 0x11f
 80097ee:	494d      	ldr	r1, [pc, #308]	@ (8009924 <tcp_input+0x4bc>)
 80097f0:	4848      	ldr	r0, [pc, #288]	@ (8009914 <tcp_input+0x4ac>)
 80097f2:	f007 f903 	bl	80109fc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	7a1b      	ldrb	r3, [r3, #8]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d009      	beq.n	8009812 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80097fe:	69bb      	ldr	r3, [r7, #24]
 8009800:	7a1a      	ldrb	r2, [r3, #8]
 8009802:	4b41      	ldr	r3, [pc, #260]	@ (8009908 <tcp_input+0x4a0>)
 8009804:	685b      	ldr	r3, [r3, #4]
 8009806:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800980a:	3301      	adds	r3, #1
 800980c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800980e:	429a      	cmp	r2, r3
 8009810:	d122      	bne.n	8009858 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8009812:	69bb      	ldr	r3, [r7, #24]
 8009814:	8b1a      	ldrh	r2, [r3, #24]
 8009816:	4b3b      	ldr	r3, [pc, #236]	@ (8009904 <tcp_input+0x49c>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	881b      	ldrh	r3, [r3, #0]
 800981c:	b29b      	uxth	r3, r3
 800981e:	429a      	cmp	r2, r3
 8009820:	d11b      	bne.n	800985a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	8ada      	ldrh	r2, [r3, #22]
 8009826:	4b37      	ldr	r3, [pc, #220]	@ (8009904 <tcp_input+0x49c>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	885b      	ldrh	r3, [r3, #2]
 800982c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800982e:	429a      	cmp	r2, r3
 8009830:	d113      	bne.n	800985a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009832:	69bb      	ldr	r3, [r7, #24]
 8009834:	685a      	ldr	r2, [r3, #4]
 8009836:	4b34      	ldr	r3, [pc, #208]	@ (8009908 <tcp_input+0x4a0>)
 8009838:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800983a:	429a      	cmp	r2, r3
 800983c:	d10d      	bne.n	800985a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800983e:	69bb      	ldr	r3, [r7, #24]
 8009840:	681a      	ldr	r2, [r3, #0]
 8009842:	4b31      	ldr	r3, [pc, #196]	@ (8009908 <tcp_input+0x4a0>)
 8009844:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009846:	429a      	cmp	r2, r3
 8009848:	d107      	bne.n	800985a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800984a:	69b8      	ldr	r0, [r7, #24]
 800984c:	f000 fb7c 	bl	8009f48 <tcp_timewait_input>
        }
        pbuf_free(p);
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f7fd fc4f 	bl	80070f4 <pbuf_free>
        return;
 8009856:	e209      	b.n	8009c6c <tcp_input+0x804>
        continue;
 8009858:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800985a:	69bb      	ldr	r3, [r7, #24]
 800985c:	68db      	ldr	r3, [r3, #12]
 800985e:	61bb      	str	r3, [r7, #24]
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d1bc      	bne.n	80097e0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8009866:	2300      	movs	r3, #0
 8009868:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800986a:	4b2f      	ldr	r3, [pc, #188]	@ (8009928 <tcp_input+0x4c0>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	617b      	str	r3, [r7, #20]
 8009870:	e02a      	b.n	80098c8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	7a1b      	ldrb	r3, [r3, #8]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00c      	beq.n	8009894 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	7a1a      	ldrb	r2, [r3, #8]
 800987e:	4b22      	ldr	r3, [pc, #136]	@ (8009908 <tcp_input+0x4a0>)
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009886:	3301      	adds	r3, #1
 8009888:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800988a:	429a      	cmp	r2, r3
 800988c:	d002      	beq.n	8009894 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	61fb      	str	r3, [r7, #28]
        continue;
 8009892:	e016      	b.n	80098c2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	8ada      	ldrh	r2, [r3, #22]
 8009898:	4b1a      	ldr	r3, [pc, #104]	@ (8009904 <tcp_input+0x49c>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	885b      	ldrh	r3, [r3, #2]
 800989e:	b29b      	uxth	r3, r3
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d10c      	bne.n	80098be <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	681a      	ldr	r2, [r3, #0]
 80098a8:	4b17      	ldr	r3, [pc, #92]	@ (8009908 <tcp_input+0x4a0>)
 80098aa:	695b      	ldr	r3, [r3, #20]
 80098ac:	429a      	cmp	r2, r3
 80098ae:	d00f      	beq.n	80098d0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d00d      	beq.n	80098d2 <tcp_input+0x46a>
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d009      	beq.n	80098d2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	68db      	ldr	r3, [r3, #12]
 80098c6:	617b      	str	r3, [r7, #20]
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d1d1      	bne.n	8009872 <tcp_input+0x40a>
 80098ce:	e000      	b.n	80098d2 <tcp_input+0x46a>
            break;
 80098d0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d029      	beq.n	800992c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80098d8:	69fb      	ldr	r3, [r7, #28]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d00a      	beq.n	80098f4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	68da      	ldr	r2, [r3, #12]
 80098e2:	69fb      	ldr	r3, [r7, #28]
 80098e4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80098e6:	4b10      	ldr	r3, [pc, #64]	@ (8009928 <tcp_input+0x4c0>)
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80098ee:	4a0e      	ldr	r2, [pc, #56]	@ (8009928 <tcp_input+0x4c0>)
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80098f4:	6978      	ldr	r0, [r7, #20]
 80098f6:	f000 fa15 	bl	8009d24 <tcp_listen_input>
      }
      pbuf_free(p);
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f7fd fbfa 	bl	80070f4 <pbuf_free>
      return;
 8009900:	e1b4      	b.n	8009c6c <tcp_input+0x804>
 8009902:	bf00      	nop
 8009904:	20008814 	.word	0x20008814
 8009908:	20005238 	.word	0x20005238
 800990c:	08013380 	.word	0x08013380
 8009910:	080134ac 	.word	0x080134ac
 8009914:	080133cc 	.word	0x080133cc
 8009918:	200087f4 	.word	0x200087f4
 800991c:	080134d8 	.word	0x080134d8
 8009920:	200087f8 	.word	0x200087f8
 8009924:	08013504 	.word	0x08013504
 8009928:	200087f0 	.word	0x200087f0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800992c:	69bb      	ldr	r3, [r7, #24]
 800992e:	2b00      	cmp	r3, #0
 8009930:	f000 8158 	beq.w	8009be4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8009934:	4b95      	ldr	r3, [pc, #596]	@ (8009b8c <tcp_input+0x724>)
 8009936:	2200      	movs	r2, #0
 8009938:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	891a      	ldrh	r2, [r3, #8]
 800993e:	4b93      	ldr	r3, [pc, #588]	@ (8009b8c <tcp_input+0x724>)
 8009940:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8009942:	4a92      	ldr	r2, [pc, #584]	@ (8009b8c <tcp_input+0x724>)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8009948:	4b91      	ldr	r3, [pc, #580]	@ (8009b90 <tcp_input+0x728>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a8f      	ldr	r2, [pc, #572]	@ (8009b8c <tcp_input+0x724>)
 800994e:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 8009950:	4b90      	ldr	r3, [pc, #576]	@ (8009b94 <tcp_input+0x72c>)
 8009952:	2200      	movs	r2, #0
 8009954:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8009956:	4b90      	ldr	r3, [pc, #576]	@ (8009b98 <tcp_input+0x730>)
 8009958:	2200      	movs	r2, #0
 800995a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800995c:	4b8f      	ldr	r3, [pc, #572]	@ (8009b9c <tcp_input+0x734>)
 800995e:	2200      	movs	r2, #0
 8009960:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8009962:	4b8f      	ldr	r3, [pc, #572]	@ (8009ba0 <tcp_input+0x738>)
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	f003 0308 	and.w	r3, r3, #8
 800996a:	2b00      	cmp	r3, #0
 800996c:	d006      	beq.n	800997c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	7b5b      	ldrb	r3, [r3, #13]
 8009972:	f043 0301 	orr.w	r3, r3, #1
 8009976:	b2da      	uxtb	r2, r3
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800997c:	69bb      	ldr	r3, [r7, #24]
 800997e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009980:	2b00      	cmp	r3, #0
 8009982:	d017      	beq.n	80099b4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009984:	69b8      	ldr	r0, [r7, #24]
 8009986:	f7fe ffcf 	bl	8008928 <tcp_process_refused_data>
 800998a:	4603      	mov	r3, r0
 800998c:	f113 0f0d 	cmn.w	r3, #13
 8009990:	d007      	beq.n	80099a2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009992:	69bb      	ldr	r3, [r7, #24]
 8009994:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009996:	2b00      	cmp	r3, #0
 8009998:	d00c      	beq.n	80099b4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800999a:	4b82      	ldr	r3, [pc, #520]	@ (8009ba4 <tcp_input+0x73c>)
 800999c:	881b      	ldrh	r3, [r3, #0]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d008      	beq.n	80099b4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80099a2:	69bb      	ldr	r3, [r7, #24]
 80099a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	f040 80e3 	bne.w	8009b72 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80099ac:	69b8      	ldr	r0, [r7, #24]
 80099ae:	f003 ff07 	bl	800d7c0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80099b2:	e0de      	b.n	8009b72 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80099b4:	4a7c      	ldr	r2, [pc, #496]	@ (8009ba8 <tcp_input+0x740>)
 80099b6:	69bb      	ldr	r3, [r7, #24]
 80099b8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80099ba:	69b8      	ldr	r0, [r7, #24]
 80099bc:	f000 fb3e 	bl	800a03c <tcp_process>
 80099c0:	4603      	mov	r3, r0
 80099c2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80099c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80099c8:	f113 0f0d 	cmn.w	r3, #13
 80099cc:	f000 80d3 	beq.w	8009b76 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80099d0:	4b71      	ldr	r3, [pc, #452]	@ (8009b98 <tcp_input+0x730>)
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	f003 0308 	and.w	r3, r3, #8
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d015      	beq.n	8009a08 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80099dc:	69bb      	ldr	r3, [r7, #24]
 80099de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d008      	beq.n	80099f8 <tcp_input+0x590>
 80099e6:	69bb      	ldr	r3, [r7, #24]
 80099e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099ec:	69ba      	ldr	r2, [r7, #24]
 80099ee:	6912      	ldr	r2, [r2, #16]
 80099f0:	f06f 010d 	mvn.w	r1, #13
 80099f4:	4610      	mov	r0, r2
 80099f6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80099f8:	69b9      	ldr	r1, [r7, #24]
 80099fa:	486c      	ldr	r0, [pc, #432]	@ (8009bac <tcp_input+0x744>)
 80099fc:	f7ff fb40 	bl	8009080 <tcp_pcb_remove>
        tcp_free(pcb);
 8009a00:	69b8      	ldr	r0, [r7, #24]
 8009a02:	f7fd fe17 	bl	8007634 <tcp_free>
 8009a06:	e0da      	b.n	8009bbe <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8009a0c:	4b63      	ldr	r3, [pc, #396]	@ (8009b9c <tcp_input+0x734>)
 8009a0e:	881b      	ldrh	r3, [r3, #0]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d01d      	beq.n	8009a50 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8009a14:	4b61      	ldr	r3, [pc, #388]	@ (8009b9c <tcp_input+0x734>)
 8009a16:	881b      	ldrh	r3, [r3, #0]
 8009a18:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009a1a:	69bb      	ldr	r3, [r7, #24]
 8009a1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d00a      	beq.n	8009a3a <tcp_input+0x5d2>
 8009a24:	69bb      	ldr	r3, [r7, #24]
 8009a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a2a:	69ba      	ldr	r2, [r7, #24]
 8009a2c:	6910      	ldr	r0, [r2, #16]
 8009a2e:	89fa      	ldrh	r2, [r7, #14]
 8009a30:	69b9      	ldr	r1, [r7, #24]
 8009a32:	4798      	blx	r3
 8009a34:	4603      	mov	r3, r0
 8009a36:	74fb      	strb	r3, [r7, #19]
 8009a38:	e001      	b.n	8009a3e <tcp_input+0x5d6>
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009a3e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009a42:	f113 0f0d 	cmn.w	r3, #13
 8009a46:	f000 8098 	beq.w	8009b7a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8009a4a:	4b54      	ldr	r3, [pc, #336]	@ (8009b9c <tcp_input+0x734>)
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8009a50:	69b8      	ldr	r0, [r7, #24]
 8009a52:	f000 f927 	bl	8009ca4 <tcp_input_delayed_close>
 8009a56:	4603      	mov	r3, r0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	f040 8090 	bne.w	8009b7e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8009a5e:	4b4d      	ldr	r3, [pc, #308]	@ (8009b94 <tcp_input+0x72c>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d041      	beq.n	8009aea <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d006      	beq.n	8009a7c <tcp_input+0x614>
 8009a6e:	4b50      	ldr	r3, [pc, #320]	@ (8009bb0 <tcp_input+0x748>)
 8009a70:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8009a74:	494f      	ldr	r1, [pc, #316]	@ (8009bb4 <tcp_input+0x74c>)
 8009a76:	4850      	ldr	r0, [pc, #320]	@ (8009bb8 <tcp_input+0x750>)
 8009a78:	f006 ffc0 	bl	80109fc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8009a7c:	69bb      	ldr	r3, [r7, #24]
 8009a7e:	8b5b      	ldrh	r3, [r3, #26]
 8009a80:	f003 0310 	and.w	r3, r3, #16
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d008      	beq.n	8009a9a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8009a88:	4b42      	ldr	r3, [pc, #264]	@ (8009b94 <tcp_input+0x72c>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f7fd fb31 	bl	80070f4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8009a92:	69b8      	ldr	r0, [r7, #24]
 8009a94:	f7fe f8c0 	bl	8007c18 <tcp_abort>
            goto aborted;
 8009a98:	e091      	b.n	8009bbe <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009a9a:	69bb      	ldr	r3, [r7, #24]
 8009a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d00c      	beq.n	8009abe <tcp_input+0x656>
 8009aa4:	69bb      	ldr	r3, [r7, #24]
 8009aa6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009aaa:	69bb      	ldr	r3, [r7, #24]
 8009aac:	6918      	ldr	r0, [r3, #16]
 8009aae:	4b39      	ldr	r3, [pc, #228]	@ (8009b94 <tcp_input+0x72c>)
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	69b9      	ldr	r1, [r7, #24]
 8009ab6:	47a0      	blx	r4
 8009ab8:	4603      	mov	r3, r0
 8009aba:	74fb      	strb	r3, [r7, #19]
 8009abc:	e008      	b.n	8009ad0 <tcp_input+0x668>
 8009abe:	4b35      	ldr	r3, [pc, #212]	@ (8009b94 <tcp_input+0x72c>)
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	69b9      	ldr	r1, [r7, #24]
 8009ac6:	2000      	movs	r0, #0
 8009ac8:	f7ff f806 	bl	8008ad8 <tcp_recv_null>
 8009acc:	4603      	mov	r3, r0
 8009ace:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8009ad0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009ad4:	f113 0f0d 	cmn.w	r3, #13
 8009ad8:	d053      	beq.n	8009b82 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8009ada:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d003      	beq.n	8009aea <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8009ae2:	4b2c      	ldr	r3, [pc, #176]	@ (8009b94 <tcp_input+0x72c>)
 8009ae4:	681a      	ldr	r2, [r3, #0]
 8009ae6:	69bb      	ldr	r3, [r7, #24]
 8009ae8:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8009aea:	4b2b      	ldr	r3, [pc, #172]	@ (8009b98 <tcp_input+0x730>)
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	f003 0320 	and.w	r3, r3, #32
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d030      	beq.n	8009b58 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8009af6:	69bb      	ldr	r3, [r7, #24]
 8009af8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d009      	beq.n	8009b12 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8009afe:	69bb      	ldr	r3, [r7, #24]
 8009b00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b02:	7b5a      	ldrb	r2, [r3, #13]
 8009b04:	69bb      	ldr	r3, [r7, #24]
 8009b06:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b08:	f042 0220 	orr.w	r2, r2, #32
 8009b0c:	b2d2      	uxtb	r2, r2
 8009b0e:	735a      	strb	r2, [r3, #13]
 8009b10:	e022      	b.n	8009b58 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009b12:	69bb      	ldr	r3, [r7, #24]
 8009b14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b16:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8009b1a:	d005      	beq.n	8009b28 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8009b1c:	69bb      	ldr	r3, [r7, #24]
 8009b1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b20:	3301      	adds	r3, #1
 8009b22:	b29a      	uxth	r2, r3
 8009b24:	69bb      	ldr	r3, [r7, #24]
 8009b26:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8009b28:	69bb      	ldr	r3, [r7, #24]
 8009b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d00b      	beq.n	8009b4a <tcp_input+0x6e2>
 8009b32:	69bb      	ldr	r3, [r7, #24]
 8009b34:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009b38:	69bb      	ldr	r3, [r7, #24]
 8009b3a:	6918      	ldr	r0, [r3, #16]
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	2200      	movs	r2, #0
 8009b40:	69b9      	ldr	r1, [r7, #24]
 8009b42:	47a0      	blx	r4
 8009b44:	4603      	mov	r3, r0
 8009b46:	74fb      	strb	r3, [r7, #19]
 8009b48:	e001      	b.n	8009b4e <tcp_input+0x6e6>
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009b4e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009b52:	f113 0f0d 	cmn.w	r3, #13
 8009b56:	d016      	beq.n	8009b86 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8009b58:	4b13      	ldr	r3, [pc, #76]	@ (8009ba8 <tcp_input+0x740>)
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8009b5e:	69b8      	ldr	r0, [r7, #24]
 8009b60:	f000 f8a0 	bl	8009ca4 <tcp_input_delayed_close>
 8009b64:	4603      	mov	r3, r0
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d128      	bne.n	8009bbc <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8009b6a:	69b8      	ldr	r0, [r7, #24]
 8009b6c:	f003 f812 	bl	800cb94 <tcp_output>
 8009b70:	e025      	b.n	8009bbe <tcp_input+0x756>
        goto aborted;
 8009b72:	bf00      	nop
 8009b74:	e023      	b.n	8009bbe <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8009b76:	bf00      	nop
 8009b78:	e021      	b.n	8009bbe <tcp_input+0x756>
              goto aborted;
 8009b7a:	bf00      	nop
 8009b7c:	e01f      	b.n	8009bbe <tcp_input+0x756>
          goto aborted;
 8009b7e:	bf00      	nop
 8009b80:	e01d      	b.n	8009bbe <tcp_input+0x756>
            goto aborted;
 8009b82:	bf00      	nop
 8009b84:	e01b      	b.n	8009bbe <tcp_input+0x756>
              goto aborted;
 8009b86:	bf00      	nop
 8009b88:	e019      	b.n	8009bbe <tcp_input+0x756>
 8009b8a:	bf00      	nop
 8009b8c:	20008800 	.word	0x20008800
 8009b90:	20008814 	.word	0x20008814
 8009b94:	20008834 	.word	0x20008834
 8009b98:	20008831 	.word	0x20008831
 8009b9c:	2000882c 	.word	0x2000882c
 8009ba0:	20008830 	.word	0x20008830
 8009ba4:	2000882e 	.word	0x2000882e
 8009ba8:	20008838 	.word	0x20008838
 8009bac:	200087f4 	.word	0x200087f4
 8009bb0:	08013380 	.word	0x08013380
 8009bb4:	08013534 	.word	0x08013534
 8009bb8:	080133cc 	.word	0x080133cc
          goto aborted;
 8009bbc:	bf00      	nop
    tcp_input_pcb = NULL;
 8009bbe:	4b2d      	ldr	r3, [pc, #180]	@ (8009c74 <tcp_input+0x80c>)
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8009bc4:	4b2c      	ldr	r3, [pc, #176]	@ (8009c78 <tcp_input+0x810>)
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8009bca:	4b2c      	ldr	r3, [pc, #176]	@ (8009c7c <tcp_input+0x814>)
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d031      	beq.n	8009c36 <tcp_input+0x7ce>
      pbuf_free(inseg.p);
 8009bd2:	4b2a      	ldr	r3, [pc, #168]	@ (8009c7c <tcp_input+0x814>)
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f7fd fa8c 	bl	80070f4 <pbuf_free>
      inseg.p = NULL;
 8009bdc:	4b27      	ldr	r3, [pc, #156]	@ (8009c7c <tcp_input+0x814>)
 8009bde:	2200      	movs	r2, #0
 8009be0:	605a      	str	r2, [r3, #4]
 8009be2:	e028      	b.n	8009c36 <tcp_input+0x7ce>
    }
  } else {
    /* If no matching PCB was found, send a TCP RST (reset) to the
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8009be4:	4b26      	ldr	r3, [pc, #152]	@ (8009c80 <tcp_input+0x818>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	899b      	ldrh	r3, [r3, #12]
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	4618      	mov	r0, r3
 8009bee:	f7fb ff23 	bl	8005a38 <lwip_htons>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	b2db      	uxtb	r3, r3
 8009bf6:	f003 0304 	and.w	r3, r3, #4
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d118      	bne.n	8009c30 <tcp_input+0x7c8>
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009bfe:	4b21      	ldr	r3, [pc, #132]	@ (8009c84 <tcp_input+0x81c>)
 8009c00:	6819      	ldr	r1, [r3, #0]
 8009c02:	4b21      	ldr	r3, [pc, #132]	@ (8009c88 <tcp_input+0x820>)
 8009c04:	881b      	ldrh	r3, [r3, #0]
 8009c06:	461a      	mov	r2, r3
 8009c08:	4b20      	ldr	r3, [pc, #128]	@ (8009c8c <tcp_input+0x824>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009c0e:	4b1c      	ldr	r3, [pc, #112]	@ (8009c80 <tcp_input+0x818>)
 8009c10:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009c12:	885b      	ldrh	r3, [r3, #2]
 8009c14:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009c16:	4a1a      	ldr	r2, [pc, #104]	@ (8009c80 <tcp_input+0x818>)
 8009c18:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009c1a:	8812      	ldrh	r2, [r2, #0]
 8009c1c:	b292      	uxth	r2, r2
 8009c1e:	9202      	str	r2, [sp, #8]
 8009c20:	9301      	str	r3, [sp, #4]
 8009c22:	4b1b      	ldr	r3, [pc, #108]	@ (8009c90 <tcp_input+0x828>)
 8009c24:	9300      	str	r3, [sp, #0]
 8009c26:	4b1b      	ldr	r3, [pc, #108]	@ (8009c94 <tcp_input+0x82c>)
 8009c28:	4602      	mov	r2, r0
 8009c2a:	2000      	movs	r0, #0
 8009c2c:	f003 fd72 	bl	800d714 <tcp_rst>
    }
    pbuf_free(p);
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f7fd fa5f 	bl	80070f4 <pbuf_free>
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
 8009c36:	f7ff fbbf 	bl	80093b8 <tcp_pcbs_sane>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d114      	bne.n	8009c6a <tcp_input+0x802>
 8009c40:	4b15      	ldr	r3, [pc, #84]	@ (8009c98 <tcp_input+0x830>)
 8009c42:	f240 2249 	movw	r2, #585	@ 0x249
 8009c46:	4915      	ldr	r1, [pc, #84]	@ (8009c9c <tcp_input+0x834>)
 8009c48:	4815      	ldr	r0, [pc, #84]	@ (8009ca0 <tcp_input+0x838>)
 8009c4a:	f006 fed7 	bl	80109fc <iprintf>
  PERF_STOP("tcp_input");
  return;
 8009c4e:	e00c      	b.n	8009c6a <tcp_input+0x802>
    goto dropped;
 8009c50:	bf00      	nop
 8009c52:	e006      	b.n	8009c62 <tcp_input+0x7fa>
    goto dropped;
 8009c54:	bf00      	nop
 8009c56:	e004      	b.n	8009c62 <tcp_input+0x7fa>
    goto dropped;
 8009c58:	bf00      	nop
 8009c5a:	e002      	b.n	8009c62 <tcp_input+0x7fa>
      goto dropped;
 8009c5c:	bf00      	nop
 8009c5e:	e000      	b.n	8009c62 <tcp_input+0x7fa>
      goto dropped;
 8009c60:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f7fd fa46 	bl	80070f4 <pbuf_free>
 8009c68:	e000      	b.n	8009c6c <tcp_input+0x804>
  return;
 8009c6a:	bf00      	nop
}
 8009c6c:	3724      	adds	r7, #36	@ 0x24
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd90      	pop	{r4, r7, pc}
 8009c72:	bf00      	nop
 8009c74:	20008838 	.word	0x20008838
 8009c78:	20008834 	.word	0x20008834
 8009c7c:	20008800 	.word	0x20008800
 8009c80:	20008814 	.word	0x20008814
 8009c84:	20008828 	.word	0x20008828
 8009c88:	2000882e 	.word	0x2000882e
 8009c8c:	20008824 	.word	0x20008824
 8009c90:	20005248 	.word	0x20005248
 8009c94:	2000524c 	.word	0x2000524c
 8009c98:	08013380 	.word	0x08013380
 8009c9c:	08013550 	.word	0x08013550
 8009ca0:	080133cc 	.word	0x080133cc

08009ca4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b082      	sub	sp, #8
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d106      	bne.n	8009cc0 <tcp_input_delayed_close+0x1c>
 8009cb2:	4b17      	ldr	r3, [pc, #92]	@ (8009d10 <tcp_input_delayed_close+0x6c>)
 8009cb4:	f240 225a 	movw	r2, #602	@ 0x25a
 8009cb8:	4916      	ldr	r1, [pc, #88]	@ (8009d14 <tcp_input_delayed_close+0x70>)
 8009cba:	4817      	ldr	r0, [pc, #92]	@ (8009d18 <tcp_input_delayed_close+0x74>)
 8009cbc:	f006 fe9e 	bl	80109fc <iprintf>

  if (recv_flags & TF_CLOSED) {
 8009cc0:	4b16      	ldr	r3, [pc, #88]	@ (8009d1c <tcp_input_delayed_close+0x78>)
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	f003 0310 	and.w	r3, r3, #16
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d01c      	beq.n	8009d06 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	8b5b      	ldrh	r3, [r3, #26]
 8009cd0:	f003 0310 	and.w	r3, r3, #16
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d10d      	bne.n	8009cf4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d008      	beq.n	8009cf4 <tcp_input_delayed_close+0x50>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ce8:	687a      	ldr	r2, [r7, #4]
 8009cea:	6912      	ldr	r2, [r2, #16]
 8009cec:	f06f 010e 	mvn.w	r1, #14
 8009cf0:	4610      	mov	r0, r2
 8009cf2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009cf4:	6879      	ldr	r1, [r7, #4]
 8009cf6:	480a      	ldr	r0, [pc, #40]	@ (8009d20 <tcp_input_delayed_close+0x7c>)
 8009cf8:	f7ff f9c2 	bl	8009080 <tcp_pcb_remove>
    tcp_free(pcb);
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f7fd fc99 	bl	8007634 <tcp_free>
    return 1;
 8009d02:	2301      	movs	r3, #1
 8009d04:	e000      	b.n	8009d08 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8009d06:	2300      	movs	r3, #0
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3708      	adds	r7, #8
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}
 8009d10:	08013380 	.word	0x08013380
 8009d14:	0801356c 	.word	0x0801356c
 8009d18:	080133cc 	.word	0x080133cc
 8009d1c:	20008831 	.word	0x20008831
 8009d20:	200087f4 	.word	0x200087f4

08009d24 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8009d24:	b590      	push	{r4, r7, lr}
 8009d26:	b08b      	sub	sp, #44	@ 0x2c
 8009d28:	af04      	add	r7, sp, #16
 8009d2a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8009d2c:	4b77      	ldr	r3, [pc, #476]	@ (8009f0c <tcp_listen_input+0x1e8>)
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	f003 0304 	and.w	r3, r3, #4
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	f040 80e2 	bne.w	8009efe <tcp_listen_input+0x1da>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d106      	bne.n	8009d4e <tcp_listen_input+0x2a>
 8009d40:	4b73      	ldr	r3, [pc, #460]	@ (8009f10 <tcp_listen_input+0x1ec>)
 8009d42:	f240 2281 	movw	r2, #641	@ 0x281
 8009d46:	4973      	ldr	r1, [pc, #460]	@ (8009f14 <tcp_listen_input+0x1f0>)
 8009d48:	4873      	ldr	r0, [pc, #460]	@ (8009f18 <tcp_listen_input+0x1f4>)
 8009d4a:	f006 fe57 	bl	80109fc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8009d4e:	4b6f      	ldr	r3, [pc, #444]	@ (8009f0c <tcp_listen_input+0x1e8>)
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	f003 0310 	and.w	r3, r3, #16
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d019      	beq.n	8009d8e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009d5a:	4b70      	ldr	r3, [pc, #448]	@ (8009f1c <tcp_listen_input+0x1f8>)
 8009d5c:	6819      	ldr	r1, [r3, #0]
 8009d5e:	4b70      	ldr	r3, [pc, #448]	@ (8009f20 <tcp_listen_input+0x1fc>)
 8009d60:	881b      	ldrh	r3, [r3, #0]
 8009d62:	461a      	mov	r2, r3
 8009d64:	4b6f      	ldr	r3, [pc, #444]	@ (8009f24 <tcp_listen_input+0x200>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009d6a:	4b6f      	ldr	r3, [pc, #444]	@ (8009f28 <tcp_listen_input+0x204>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009d6e:	885b      	ldrh	r3, [r3, #2]
 8009d70:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009d72:	4a6d      	ldr	r2, [pc, #436]	@ (8009f28 <tcp_listen_input+0x204>)
 8009d74:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009d76:	8812      	ldrh	r2, [r2, #0]
 8009d78:	b292      	uxth	r2, r2
 8009d7a:	9202      	str	r2, [sp, #8]
 8009d7c:	9301      	str	r3, [sp, #4]
 8009d7e:	4b6b      	ldr	r3, [pc, #428]	@ (8009f2c <tcp_listen_input+0x208>)
 8009d80:	9300      	str	r3, [sp, #0]
 8009d82:	4b6b      	ldr	r3, [pc, #428]	@ (8009f30 <tcp_listen_input+0x20c>)
 8009d84:	4602      	mov	r2, r0
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f003 fcc4 	bl	800d714 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8009d8c:	e0b9      	b.n	8009f02 <tcp_listen_input+0x1de>
  } else if (flags & TCP_SYN) {
 8009d8e:	4b5f      	ldr	r3, [pc, #380]	@ (8009f0c <tcp_listen_input+0x1e8>)
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	f003 0302 	and.w	r3, r3, #2
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	f000 80b3 	beq.w	8009f02 <tcp_listen_input+0x1de>
    LWIP_DEBUGF(TCP_DEBUG, ("TCP connection request %"U16_F" -> %"U16_F".\n", tcphdr->src, tcphdr->dest));
 8009d9c:	4b62      	ldr	r3, [pc, #392]	@ (8009f28 <tcp_listen_input+0x204>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	881b      	ldrh	r3, [r3, #0]
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	4619      	mov	r1, r3
 8009da6:	4b60      	ldr	r3, [pc, #384]	@ (8009f28 <tcp_listen_input+0x204>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	885b      	ldrh	r3, [r3, #2]
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	461a      	mov	r2, r3
 8009db0:	4860      	ldr	r0, [pc, #384]	@ (8009f34 <tcp_listen_input+0x210>)
 8009db2:	f006 fe23 	bl	80109fc <iprintf>
    npcb = tcp_alloc(pcb->prio);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	7d5b      	ldrb	r3, [r3, #21]
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7fe ffd0 	bl	8008d60 <tcp_alloc>
 8009dc0:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d114      	bne.n	8009df2 <tcp_listen_input+0xce>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: could not allocate PCB\n"));
 8009dc8:	485b      	ldr	r0, [pc, #364]	@ (8009f38 <tcp_listen_input+0x214>)
 8009dca:	f006 fe87 	bl	8010adc <puts>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	699b      	ldr	r3, [r3, #24]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d00a      	beq.n	8009dec <tcp_listen_input+0xc8>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	699b      	ldr	r3, [r3, #24]
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	6910      	ldr	r0, [r2, #16]
 8009dde:	f04f 32ff 	mov.w	r2, #4294967295
 8009de2:	2100      	movs	r1, #0
 8009de4:	4798      	blx	r3
 8009de6:	4603      	mov	r3, r0
 8009de8:	73bb      	strb	r3, [r7, #14]
      return;
 8009dea:	e08b      	b.n	8009f04 <tcp_listen_input+0x1e0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009dec:	23f0      	movs	r3, #240	@ 0xf0
 8009dee:	73bb      	strb	r3, [r7, #14]
      return;
 8009df0:	e088      	b.n	8009f04 <tcp_listen_input+0x1e0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8009df2:	4b52      	ldr	r3, [pc, #328]	@ (8009f3c <tcp_listen_input+0x218>)
 8009df4:	695a      	ldr	r2, [r3, #20]
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8009dfa:	4b50      	ldr	r3, [pc, #320]	@ (8009f3c <tcp_listen_input+0x218>)
 8009dfc:	691a      	ldr	r2, [r3, #16]
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	8ada      	ldrh	r2, [r3, #22]
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8009e0a:	4b47      	ldr	r3, [pc, #284]	@ (8009f28 <tcp_listen_input+0x204>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	881b      	ldrh	r3, [r3, #0]
 8009e10:	b29a      	uxth	r2, r3
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	2203      	movs	r2, #3
 8009e1a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8009e1c:	4b41      	ldr	r3, [pc, #260]	@ (8009f24 <tcp_listen_input+0x200>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	1c5a      	adds	r2, r3, #1
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8009e2e:	6978      	ldr	r0, [r7, #20]
 8009e30:	f7ff f9c8 	bl	80091c4 <tcp_next_iss>
 8009e34:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	693a      	ldr	r2, [r7, #16]
 8009e3a:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	693a      	ldr	r2, [r7, #16]
 8009e40:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	693a      	ldr	r2, [r7, #16]
 8009e46:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	693a      	ldr	r2, [r7, #16]
 8009e4c:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009e4e:	4b35      	ldr	r3, [pc, #212]	@ (8009f24 <tcp_listen_input+0x200>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	1e5a      	subs	r2, r3, #1
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	691a      	ldr	r2, [r3, #16]
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	7a5b      	ldrb	r3, [r3, #9]
 8009e6a:	f003 030c 	and.w	r3, r3, #12
 8009e6e:	b2da      	uxtb	r2, r3
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	7a1a      	ldrb	r2, [r3, #8]
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8009e7c:	4b30      	ldr	r3, [pc, #192]	@ (8009f40 <tcp_listen_input+0x21c>)
 8009e7e:	681a      	ldr	r2, [r3, #0]
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	60da      	str	r2, [r3, #12]
 8009e84:	4a2e      	ldr	r2, [pc, #184]	@ (8009f40 <tcp_listen_input+0x21c>)
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	6013      	str	r3, [r2, #0]
 8009e8a:	f003 fe89 	bl	800dba0 <tcp_timer_needed>
 8009e8e:	4b2d      	ldr	r3, [pc, #180]	@ (8009f44 <tcp_listen_input+0x220>)
 8009e90:	2201      	movs	r2, #1
 8009e92:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8009e94:	6978      	ldr	r0, [r7, #20]
 8009e96:	f001 fdff 	bl	800ba98 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8009e9a:	4b23      	ldr	r3, [pc, #140]	@ (8009f28 <tcp_listen_input+0x204>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	89db      	ldrh	r3, [r3, #14]
 8009ea0:	b29a      	uxth	r2, r3
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	3304      	adds	r3, #4
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f005 fa81 	bl	800f3c4 <ip4_route>
 8009ec2:	4601      	mov	r1, r0
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	3304      	adds	r3, #4
 8009ec8:	461a      	mov	r2, r3
 8009eca:	4620      	mov	r0, r4
 8009ecc:	f7ff f9a0 	bl	8009210 <tcp_eff_send_mss_netif>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8009ed8:	2112      	movs	r1, #18
 8009eda:	6978      	ldr	r0, [r7, #20]
 8009edc:	f002 fd6c 	bl	800c9b8 <tcp_enqueue_flags>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8009ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d004      	beq.n	8009ef6 <tcp_listen_input+0x1d2>
      tcp_abandon(npcb, 0);
 8009eec:	2100      	movs	r1, #0
 8009eee:	6978      	ldr	r0, [r7, #20]
 8009ef0:	f7fd fdd4 	bl	8007a9c <tcp_abandon>
      return;
 8009ef4:	e006      	b.n	8009f04 <tcp_listen_input+0x1e0>
    tcp_output(npcb);
 8009ef6:	6978      	ldr	r0, [r7, #20]
 8009ef8:	f002 fe4c 	bl	800cb94 <tcp_output>
  return;
 8009efc:	e001      	b.n	8009f02 <tcp_listen_input+0x1de>
    return;
 8009efe:	bf00      	nop
 8009f00:	e000      	b.n	8009f04 <tcp_listen_input+0x1e0>
  return;
 8009f02:	bf00      	nop
}
 8009f04:	371c      	adds	r7, #28
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd90      	pop	{r4, r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	20008830 	.word	0x20008830
 8009f10:	08013380 	.word	0x08013380
 8009f14:	08013594 	.word	0x08013594
 8009f18:	080133cc 	.word	0x080133cc
 8009f1c:	20008828 	.word	0x20008828
 8009f20:	2000882e 	.word	0x2000882e
 8009f24:	20008824 	.word	0x20008824
 8009f28:	20008814 	.word	0x20008814
 8009f2c:	20005248 	.word	0x20005248
 8009f30:	2000524c 	.word	0x2000524c
 8009f34:	080135b4 	.word	0x080135b4
 8009f38:	080135d8 	.word	0x080135d8
 8009f3c:	20005238 	.word	0x20005238
 8009f40:	200087f4 	.word	0x200087f4
 8009f44:	200087fc 	.word	0x200087fc

08009f48 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b086      	sub	sp, #24
 8009f4c:	af04      	add	r7, sp, #16
 8009f4e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8009f50:	4b2f      	ldr	r3, [pc, #188]	@ (800a010 <tcp_timewait_input+0xc8>)
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	f003 0304 	and.w	r3, r3, #4
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d153      	bne.n	800a004 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d106      	bne.n	8009f70 <tcp_timewait_input+0x28>
 8009f62:	4b2c      	ldr	r3, [pc, #176]	@ (800a014 <tcp_timewait_input+0xcc>)
 8009f64:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8009f68:	492b      	ldr	r1, [pc, #172]	@ (800a018 <tcp_timewait_input+0xd0>)
 8009f6a:	482c      	ldr	r0, [pc, #176]	@ (800a01c <tcp_timewait_input+0xd4>)
 8009f6c:	f006 fd46 	bl	80109fc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8009f70:	4b27      	ldr	r3, [pc, #156]	@ (800a010 <tcp_timewait_input+0xc8>)
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	f003 0302 	and.w	r3, r3, #2
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d02a      	beq.n	8009fd2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8009f7c:	4b28      	ldr	r3, [pc, #160]	@ (800a020 <tcp_timewait_input+0xd8>)
 8009f7e:	681a      	ldr	r2, [r3, #0]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f84:	1ad3      	subs	r3, r2, r3
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	db2d      	blt.n	8009fe6 <tcp_timewait_input+0x9e>
 8009f8a:	4b25      	ldr	r3, [pc, #148]	@ (800a020 <tcp_timewait_input+0xd8>)
 8009f8c:	681a      	ldr	r2, [r3, #0]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f92:	6879      	ldr	r1, [r7, #4]
 8009f94:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009f96:	440b      	add	r3, r1
 8009f98:	1ad3      	subs	r3, r2, r3
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	dc23      	bgt.n	8009fe6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009f9e:	4b21      	ldr	r3, [pc, #132]	@ (800a024 <tcp_timewait_input+0xdc>)
 8009fa0:	6819      	ldr	r1, [r3, #0]
 8009fa2:	4b21      	ldr	r3, [pc, #132]	@ (800a028 <tcp_timewait_input+0xe0>)
 8009fa4:	881b      	ldrh	r3, [r3, #0]
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	4b1d      	ldr	r3, [pc, #116]	@ (800a020 <tcp_timewait_input+0xd8>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009fae:	4b1f      	ldr	r3, [pc, #124]	@ (800a02c <tcp_timewait_input+0xe4>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009fb2:	885b      	ldrh	r3, [r3, #2]
 8009fb4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009fb6:	4a1d      	ldr	r2, [pc, #116]	@ (800a02c <tcp_timewait_input+0xe4>)
 8009fb8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009fba:	8812      	ldrh	r2, [r2, #0]
 8009fbc:	b292      	uxth	r2, r2
 8009fbe:	9202      	str	r2, [sp, #8]
 8009fc0:	9301      	str	r3, [sp, #4]
 8009fc2:	4b1b      	ldr	r3, [pc, #108]	@ (800a030 <tcp_timewait_input+0xe8>)
 8009fc4:	9300      	str	r3, [sp, #0]
 8009fc6:	4b1b      	ldr	r3, [pc, #108]	@ (800a034 <tcp_timewait_input+0xec>)
 8009fc8:	4602      	mov	r2, r0
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f003 fba2 	bl	800d714 <tcp_rst>
      return;
 8009fd0:	e01b      	b.n	800a00a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8009fd2:	4b0f      	ldr	r3, [pc, #60]	@ (800a010 <tcp_timewait_input+0xc8>)
 8009fd4:	781b      	ldrb	r3, [r3, #0]
 8009fd6:	f003 0301 	and.w	r3, r3, #1
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d003      	beq.n	8009fe6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8009fde:	4b16      	ldr	r3, [pc, #88]	@ (800a038 <tcp_timewait_input+0xf0>)
 8009fe0:	681a      	ldr	r2, [r3, #0]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8009fe6:	4b10      	ldr	r3, [pc, #64]	@ (800a028 <tcp_timewait_input+0xe0>)
 8009fe8:	881b      	ldrh	r3, [r3, #0]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d00c      	beq.n	800a008 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	8b5b      	ldrh	r3, [r3, #26]
 8009ff2:	f043 0302 	orr.w	r3, r3, #2
 8009ff6:	b29a      	uxth	r2, r3
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f002 fdc9 	bl	800cb94 <tcp_output>
  }
  return;
 800a002:	e001      	b.n	800a008 <tcp_timewait_input+0xc0>
    return;
 800a004:	bf00      	nop
 800a006:	e000      	b.n	800a00a <tcp_timewait_input+0xc2>
  return;
 800a008:	bf00      	nop
}
 800a00a:	3708      	adds	r7, #8
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}
 800a010:	20008830 	.word	0x20008830
 800a014:	08013380 	.word	0x08013380
 800a018:	08013604 	.word	0x08013604
 800a01c:	080133cc 	.word	0x080133cc
 800a020:	20008824 	.word	0x20008824
 800a024:	20008828 	.word	0x20008828
 800a028:	2000882e 	.word	0x2000882e
 800a02c:	20008814 	.word	0x20008814
 800a030:	20005248 	.word	0x20005248
 800a034:	2000524c 	.word	0x2000524c
 800a038:	200087e8 	.word	0x200087e8

0800a03c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800a03c:	b590      	push	{r4, r7, lr}
 800a03e:	b08d      	sub	sp, #52	@ 0x34
 800a040:	af04      	add	r7, sp, #16
 800a042:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800a044:	2300      	movs	r3, #0
 800a046:	73fb      	strb	r3, [r7, #15]
  err_t err;

  err = ERR_OK;
 800a048:	2300      	movs	r3, #0
 800a04a:	73bb      	strb	r3, [r7, #14]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d106      	bne.n	800a060 <tcp_process+0x24>
 800a052:	4b88      	ldr	r3, [pc, #544]	@ (800a274 <tcp_process+0x238>)
 800a054:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800a058:	4987      	ldr	r1, [pc, #540]	@ (800a278 <tcp_process+0x23c>)
 800a05a:	4888      	ldr	r0, [pc, #544]	@ (800a27c <tcp_process+0x240>)
 800a05c:	f006 fcce 	bl	80109fc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800a060:	4b87      	ldr	r3, [pc, #540]	@ (800a280 <tcp_process+0x244>)
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	f003 0304 	and.w	r3, r3, #4
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d056      	beq.n	800a11a <tcp_process+0xde>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	7d1b      	ldrb	r3, [r3, #20]
 800a070:	2b02      	cmp	r3, #2
 800a072:	d108      	bne.n	800a086 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a078:	4b82      	ldr	r3, [pc, #520]	@ (800a284 <tcp_process+0x248>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d123      	bne.n	800a0c8 <tcp_process+0x8c>
        acceptable = 1;
 800a080:	2301      	movs	r3, #1
 800a082:	73fb      	strb	r3, [r7, #15]
 800a084:	e020      	b.n	800a0c8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a08a:	4b7f      	ldr	r3, [pc, #508]	@ (800a288 <tcp_process+0x24c>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	429a      	cmp	r2, r3
 800a090:	d102      	bne.n	800a098 <tcp_process+0x5c>
        acceptable = 1;
 800a092:	2301      	movs	r3, #1
 800a094:	73fb      	strb	r3, [r7, #15]
 800a096:	e017      	b.n	800a0c8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a098:	4b7b      	ldr	r3, [pc, #492]	@ (800a288 <tcp_process+0x24c>)
 800a09a:	681a      	ldr	r2, [r3, #0]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0a0:	1ad3      	subs	r3, r2, r3
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	db10      	blt.n	800a0c8 <tcp_process+0x8c>
 800a0a6:	4b78      	ldr	r3, [pc, #480]	@ (800a288 <tcp_process+0x24c>)
 800a0a8:	681a      	ldr	r2, [r3, #0]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0ae:	6879      	ldr	r1, [r7, #4]
 800a0b0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a0b2:	440b      	add	r3, r1
 800a0b4:	1ad3      	subs	r3, r2, r3
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	dc06      	bgt.n	800a0c8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	8b5b      	ldrh	r3, [r3, #26]
 800a0be:	f043 0302 	orr.w	r3, r3, #2
 800a0c2:	b29a      	uxth	r2, r3
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800a0c8:	7bfb      	ldrb	r3, [r7, #15]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d01b      	beq.n	800a106 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	7d1b      	ldrb	r3, [r3, #20]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d106      	bne.n	800a0e4 <tcp_process+0xa8>
 800a0d6:	4b67      	ldr	r3, [pc, #412]	@ (800a274 <tcp_process+0x238>)
 800a0d8:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800a0dc:	496b      	ldr	r1, [pc, #428]	@ (800a28c <tcp_process+0x250>)
 800a0de:	4867      	ldr	r0, [pc, #412]	@ (800a27c <tcp_process+0x240>)
 800a0e0:	f006 fc8c 	bl	80109fc <iprintf>
      recv_flags |= TF_RESET;
 800a0e4:	4b6a      	ldr	r3, [pc, #424]	@ (800a290 <tcp_process+0x254>)
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	f043 0308 	orr.w	r3, r3, #8
 800a0ec:	b2da      	uxtb	r2, r3
 800a0ee:	4b68      	ldr	r3, [pc, #416]	@ (800a290 <tcp_process+0x254>)
 800a0f0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	8b5b      	ldrh	r3, [r3, #26]
 800a0f6:	f023 0301 	bic.w	r3, r3, #1
 800a0fa:	b29a      	uxth	r2, r3
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800a100:	f06f 030d 	mvn.w	r3, #13
 800a104:	e3e3      	b.n	800a8ce <tcp_process+0x892>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
 800a106:	4b60      	ldr	r3, [pc, #384]	@ (800a288 <tcp_process+0x24c>)
 800a108:	6819      	ldr	r1, [r3, #0]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a10e:	461a      	mov	r2, r3
 800a110:	4860      	ldr	r0, [pc, #384]	@ (800a294 <tcp_process+0x258>)
 800a112:	f006 fc73 	bl	80109fc <iprintf>
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800a116:	2300      	movs	r3, #0
 800a118:	e3d9      	b.n	800a8ce <tcp_process+0x892>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a11a:	4b59      	ldr	r3, [pc, #356]	@ (800a280 <tcp_process+0x244>)
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	f003 0302 	and.w	r3, r3, #2
 800a122:	2b00      	cmp	r3, #0
 800a124:	d010      	beq.n	800a148 <tcp_process+0x10c>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	7d1b      	ldrb	r3, [r3, #20]
 800a12a:	2b02      	cmp	r3, #2
 800a12c:	d00c      	beq.n	800a148 <tcp_process+0x10c>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	7d1b      	ldrb	r3, [r3, #20]
 800a132:	2b03      	cmp	r3, #3
 800a134:	d008      	beq.n	800a148 <tcp_process+0x10c>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	8b5b      	ldrh	r3, [r3, #26]
 800a13a:	f043 0302 	orr.w	r3, r3, #2
 800a13e:	b29a      	uxth	r2, r3
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800a144:	2300      	movs	r3, #0
 800a146:	e3c2      	b.n	800a8ce <tcp_process+0x892>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	8b5b      	ldrh	r3, [r3, #26]
 800a14c:	f003 0310 	and.w	r3, r3, #16
 800a150:	2b00      	cmp	r3, #0
 800a152:	d103      	bne.n	800a15c <tcp_process+0x120>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800a154:	4b50      	ldr	r3, [pc, #320]	@ (800a298 <tcp_process+0x25c>)
 800a156:	681a      	ldr	r2, [r3, #0]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2200      	movs	r2, #0
 800a160:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2200      	movs	r2, #0
 800a168:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f001 fc93 	bl	800ba98 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	7d1b      	ldrb	r3, [r3, #20]
 800a176:	3b02      	subs	r3, #2
 800a178:	2b07      	cmp	r3, #7
 800a17a:	f200 8398 	bhi.w	800a8ae <tcp_process+0x872>
 800a17e:	a201      	add	r2, pc, #4	@ (adr r2, 800a184 <tcp_process+0x148>)
 800a180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a184:	0800a1a5 	.word	0x0800a1a5
 800a188:	0800a3cf 	.word	0x0800a3cf
 800a18c:	0800a5a5 	.word	0x0800a5a5
 800a190:	0800a5cf 	.word	0x0800a5cf
 800a194:	0800a6d7 	.word	0x0800a6d7
 800a198:	0800a5a5 	.word	0x0800a5a5
 800a19c:	0800a7b5 	.word	0x0800a7b5
 800a1a0:	0800a85f 	.word	0x0800a85f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800a1a4:	4b36      	ldr	r3, [pc, #216]	@ (800a280 <tcp_process+0x244>)
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	f003 0310 	and.w	r3, r3, #16
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	f000 80e1 	beq.w	800a374 <tcp_process+0x338>
 800a1b2:	4b33      	ldr	r3, [pc, #204]	@ (800a280 <tcp_process+0x244>)
 800a1b4:	781b      	ldrb	r3, [r3, #0]
 800a1b6:	f003 0302 	and.w	r3, r3, #2
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	f000 80da 	beq.w	800a374 <tcp_process+0x338>
          && (ackno == pcb->lastack + 1)) {
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1c4:	1c5a      	adds	r2, r3, #1
 800a1c6:	4b2f      	ldr	r3, [pc, #188]	@ (800a284 <tcp_process+0x248>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	f040 80d2 	bne.w	800a374 <tcp_process+0x338>
        pcb->rcv_nxt = seqno + 1;
 800a1d0:	4b2d      	ldr	r3, [pc, #180]	@ (800a288 <tcp_process+0x24c>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	1c5a      	adds	r2, r3, #1
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800a1e2:	4b28      	ldr	r3, [pc, #160]	@ (800a284 <tcp_process+0x248>)
 800a1e4:	681a      	ldr	r2, [r3, #0]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800a1ea:	4b2c      	ldr	r3, [pc, #176]	@ (800a29c <tcp_process+0x260>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	89db      	ldrh	r3, [r3, #14]
 800a1f0:	b29a      	uxth	r2, r3
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a204:	4b20      	ldr	r3, [pc, #128]	@ (800a288 <tcp_process+0x24c>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	1e5a      	subs	r2, r3, #1
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2204      	movs	r2, #4
 800a212:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	3304      	adds	r3, #4
 800a21c:	4618      	mov	r0, r3
 800a21e:	f005 f8d1 	bl	800f3c4 <ip4_route>
 800a222:	4601      	mov	r1, r0
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	3304      	adds	r3, #4
 800a228:	461a      	mov	r2, r3
 800a22a:	4620      	mov	r0, r4
 800a22c:	f7fe fff0 	bl	8009210 <tcp_eff_send_mss_netif>
 800a230:	4603      	mov	r3, r0
 800a232:	461a      	mov	r2, r3
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a23c:	009a      	lsls	r2, r3, #2
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a242:	005b      	lsls	r3, r3, #1
 800a244:	f241 111c 	movw	r1, #4380	@ 0x111c
 800a248:	428b      	cmp	r3, r1
 800a24a:	bf38      	it	cc
 800a24c:	460b      	movcc	r3, r1
 800a24e:	429a      	cmp	r2, r3
 800a250:	d204      	bcs.n	800a25c <tcp_process+0x220>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	b29b      	uxth	r3, r3
 800a25a:	e023      	b.n	800a2a4 <tcp_process+0x268>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a260:	005b      	lsls	r3, r3, #1
 800a262:	f241 121c 	movw	r2, #4380	@ 0x111c
 800a266:	4293      	cmp	r3, r2
 800a268:	d91a      	bls.n	800a2a0 <tcp_process+0x264>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a26e:	005b      	lsls	r3, r3, #1
 800a270:	b29b      	uxth	r3, r3
 800a272:	e017      	b.n	800a2a4 <tcp_process+0x268>
 800a274:	08013380 	.word	0x08013380
 800a278:	08013624 	.word	0x08013624
 800a27c:	080133cc 	.word	0x080133cc
 800a280:	20008830 	.word	0x20008830
 800a284:	20008828 	.word	0x20008828
 800a288:	20008824 	.word	0x20008824
 800a28c:	08013640 	.word	0x08013640
 800a290:	20008831 	.word	0x20008831
 800a294:	08013660 	.word	0x08013660
 800a298:	200087e8 	.word	0x200087e8
 800a29c:	20008814 	.word	0x20008814
 800a2a0:	f241 131c 	movw	r3, #4380	@ 0x111c
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d106      	bne.n	800a2c2 <tcp_process+0x286>
 800a2b4:	4b94      	ldr	r3, [pc, #592]	@ (800a508 <tcp_process+0x4cc>)
 800a2b6:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800a2ba:	4994      	ldr	r1, [pc, #592]	@ (800a50c <tcp_process+0x4d0>)
 800a2bc:	4894      	ldr	r0, [pc, #592]	@ (800a510 <tcp_process+0x4d4>)
 800a2be:	f006 fb9d 	bl	80109fc <iprintf>
        --pcb->snd_queuelen;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a2c8:	3b01      	subs	r3, #1
 800a2ca:	b29a      	uxth	r2, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2d6:	613b      	str	r3, [r7, #16]
        if (rseg == NULL) {
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d111      	bne.n	800a302 <tcp_process+0x2c6>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2e2:	613b      	str	r3, [r7, #16]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d106      	bne.n	800a2f8 <tcp_process+0x2bc>
 800a2ea:	4b87      	ldr	r3, [pc, #540]	@ (800a508 <tcp_process+0x4cc>)
 800a2ec:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800a2f0:	4988      	ldr	r1, [pc, #544]	@ (800a514 <tcp_process+0x4d8>)
 800a2f2:	4887      	ldr	r0, [pc, #540]	@ (800a510 <tcp_process+0x4d4>)
 800a2f4:	f006 fb82 	bl	80109fc <iprintf>
          pcb->unsent = rseg->next;
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	681a      	ldr	r2, [r3, #0]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a300:	e003      	b.n	800a30a <tcp_process+0x2ce>
        } else {
          pcb->unacked = rseg->next;
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	681a      	ldr	r2, [r3, #0]
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800a30a:	6938      	ldr	r0, [r7, #16]
 800a30c:	f7fe fb9d 	bl	8008a4a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a314:	2b00      	cmp	r3, #0
 800a316:	d104      	bne.n	800a322 <tcp_process+0x2e6>
          pcb->rtime = -1;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a31e:	861a      	strh	r2, [r3, #48]	@ 0x30
 800a320:	e006      	b.n	800a330 <tcp_process+0x2f4>
        } else {
          pcb->rtime = 0;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2200      	movs	r2, #0
 800a326:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2200      	movs	r2, #0
 800a32c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a336:	2b00      	cmp	r3, #0
 800a338:	d00a      	beq.n	800a350 <tcp_process+0x314>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a340:	687a      	ldr	r2, [r7, #4]
 800a342:	6910      	ldr	r0, [r2, #16]
 800a344:	2200      	movs	r2, #0
 800a346:	6879      	ldr	r1, [r7, #4]
 800a348:	4798      	blx	r3
 800a34a:	4603      	mov	r3, r0
 800a34c:	73bb      	strb	r3, [r7, #14]
 800a34e:	e001      	b.n	800a354 <tcp_process+0x318>
 800a350:	2300      	movs	r3, #0
 800a352:	73bb      	strb	r3, [r7, #14]
        if (err == ERR_ABRT) {
 800a354:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a358:	f113 0f0d 	cmn.w	r3, #13
 800a35c:	d102      	bne.n	800a364 <tcp_process+0x328>
          return ERR_ABRT;
 800a35e:	f06f 030c 	mvn.w	r3, #12
 800a362:	e2b4      	b.n	800a8ce <tcp_process+0x892>
        }
        tcp_ack_now(pcb);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	8b5b      	ldrh	r3, [r3, #26]
 800a368:	f043 0302 	orr.w	r3, r3, #2
 800a36c:	b29a      	uxth	r2, r3
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800a372:	e29e      	b.n	800a8b2 <tcp_process+0x876>
      else if (flags & TCP_ACK) {
 800a374:	4b68      	ldr	r3, [pc, #416]	@ (800a518 <tcp_process+0x4dc>)
 800a376:	781b      	ldrb	r3, [r3, #0]
 800a378:	f003 0310 	and.w	r3, r3, #16
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	f000 8298 	beq.w	800a8b2 <tcp_process+0x876>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a382:	4b66      	ldr	r3, [pc, #408]	@ (800a51c <tcp_process+0x4e0>)
 800a384:	6819      	ldr	r1, [r3, #0]
 800a386:	4b66      	ldr	r3, [pc, #408]	@ (800a520 <tcp_process+0x4e4>)
 800a388:	881b      	ldrh	r3, [r3, #0]
 800a38a:	461a      	mov	r2, r3
 800a38c:	4b65      	ldr	r3, [pc, #404]	@ (800a524 <tcp_process+0x4e8>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a392:	4b65      	ldr	r3, [pc, #404]	@ (800a528 <tcp_process+0x4ec>)
 800a394:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a396:	885b      	ldrh	r3, [r3, #2]
 800a398:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a39a:	4a63      	ldr	r2, [pc, #396]	@ (800a528 <tcp_process+0x4ec>)
 800a39c:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a39e:	8812      	ldrh	r2, [r2, #0]
 800a3a0:	b292      	uxth	r2, r2
 800a3a2:	9202      	str	r2, [sp, #8]
 800a3a4:	9301      	str	r3, [sp, #4]
 800a3a6:	4b61      	ldr	r3, [pc, #388]	@ (800a52c <tcp_process+0x4f0>)
 800a3a8:	9300      	str	r3, [sp, #0]
 800a3aa:	4b61      	ldr	r3, [pc, #388]	@ (800a530 <tcp_process+0x4f4>)
 800a3ac:	4602      	mov	r2, r0
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f003 f9b0 	bl	800d714 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a3ba:	2b05      	cmp	r3, #5
 800a3bc:	f200 8279 	bhi.w	800a8b2 <tcp_process+0x876>
          pcb->rtime = 0;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f002 ff7c 	bl	800d2c4 <tcp_rexmit_rto>
      break;
 800a3cc:	e271      	b.n	800a8b2 <tcp_process+0x876>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800a3ce:	4b52      	ldr	r3, [pc, #328]	@ (800a518 <tcp_process+0x4dc>)
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	f003 0310 	and.w	r3, r3, #16
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	f000 80d0 	beq.w	800a57c <tcp_process+0x540>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a3dc:	4b4f      	ldr	r3, [pc, #316]	@ (800a51c <tcp_process+0x4e0>)
 800a3de:	681a      	ldr	r2, [r3, #0]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3e4:	1ad3      	subs	r3, r2, r3
 800a3e6:	3b01      	subs	r3, #1
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	f2c0 80ad 	blt.w	800a548 <tcp_process+0x50c>
 800a3ee:	4b4b      	ldr	r3, [pc, #300]	@ (800a51c <tcp_process+0x4e0>)
 800a3f0:	681a      	ldr	r2, [r3, #0]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3f6:	1ad3      	subs	r3, r2, r3
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	f300 80a5 	bgt.w	800a548 <tcp_process+0x50c>
          pcb->state = ESTABLISHED;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2204      	movs	r2, #4
 800a402:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
 800a404:	4b4b      	ldr	r3, [pc, #300]	@ (800a534 <tcp_process+0x4f8>)
 800a406:	691b      	ldr	r3, [r3, #16]
 800a408:	881b      	ldrh	r3, [r3, #0]
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	4619      	mov	r1, r3
 800a40e:	4b49      	ldr	r3, [pc, #292]	@ (800a534 <tcp_process+0x4f8>)
 800a410:	691b      	ldr	r3, [r3, #16]
 800a412:	885b      	ldrh	r3, [r3, #2]
 800a414:	b29b      	uxth	r3, r3
 800a416:	461a      	mov	r2, r3
 800a418:	4847      	ldr	r0, [pc, #284]	@ (800a538 <tcp_process+0x4fc>)
 800a41a:	f006 faef 	bl	80109fc <iprintf>
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a422:	2b00      	cmp	r3, #0
 800a424:	d102      	bne.n	800a42c <tcp_process+0x3f0>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800a426:	23fa      	movs	r3, #250	@ 0xfa
 800a428:	73bb      	strb	r3, [r7, #14]
 800a42a:	e01d      	b.n	800a468 <tcp_process+0x42c>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a430:	699b      	ldr	r3, [r3, #24]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d106      	bne.n	800a444 <tcp_process+0x408>
 800a436:	4b34      	ldr	r3, [pc, #208]	@ (800a508 <tcp_process+0x4cc>)
 800a438:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800a43c:	493f      	ldr	r1, [pc, #252]	@ (800a53c <tcp_process+0x500>)
 800a43e:	4834      	ldr	r0, [pc, #208]	@ (800a510 <tcp_process+0x4d4>)
 800a440:	f006 fadc 	bl	80109fc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a448:	699b      	ldr	r3, [r3, #24]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d00a      	beq.n	800a464 <tcp_process+0x428>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a452:	699b      	ldr	r3, [r3, #24]
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	6910      	ldr	r0, [r2, #16]
 800a458:	2200      	movs	r2, #0
 800a45a:	6879      	ldr	r1, [r7, #4]
 800a45c:	4798      	blx	r3
 800a45e:	4603      	mov	r3, r0
 800a460:	73bb      	strb	r3, [r7, #14]
 800a462:	e001      	b.n	800a468 <tcp_process+0x42c>
 800a464:	23f0      	movs	r3, #240	@ 0xf0
 800a466:	73bb      	strb	r3, [r7, #14]
          }
          if (err != ERR_OK) {
 800a468:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d00a      	beq.n	800a486 <tcp_process+0x44a>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800a470:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a474:	f113 0f0d 	cmn.w	r3, #13
 800a478:	d002      	beq.n	800a480 <tcp_process+0x444>
              tcp_abort(pcb);
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f7fd fbcc 	bl	8007c18 <tcp_abort>
            }
            return ERR_ABRT;
 800a480:	f06f 030c 	mvn.w	r3, #12
 800a484:	e223      	b.n	800a8ce <tcp_process+0x892>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f000 fb3c 	bl	800ab04 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800a48c:	4b2c      	ldr	r3, [pc, #176]	@ (800a540 <tcp_process+0x504>)
 800a48e:	881b      	ldrh	r3, [r3, #0]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d005      	beq.n	800a4a0 <tcp_process+0x464>
            recv_acked--;
 800a494:	4b2a      	ldr	r3, [pc, #168]	@ (800a540 <tcp_process+0x504>)
 800a496:	881b      	ldrh	r3, [r3, #0]
 800a498:	3b01      	subs	r3, #1
 800a49a:	b29a      	uxth	r2, r3
 800a49c:	4b28      	ldr	r3, [pc, #160]	@ (800a540 <tcp_process+0x504>)
 800a49e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a4a4:	009a      	lsls	r2, r3, #2
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a4aa:	005b      	lsls	r3, r3, #1
 800a4ac:	f241 111c 	movw	r1, #4380	@ 0x111c
 800a4b0:	428b      	cmp	r3, r1
 800a4b2:	bf38      	it	cc
 800a4b4:	460b      	movcc	r3, r1
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d204      	bcs.n	800a4c4 <tcp_process+0x488>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a4be:	009b      	lsls	r3, r3, #2
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	e00d      	b.n	800a4e0 <tcp_process+0x4a4>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a4c8:	005b      	lsls	r3, r3, #1
 800a4ca:	f241 121c 	movw	r2, #4380	@ 0x111c
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d904      	bls.n	800a4dc <tcp_process+0x4a0>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a4d6:	005b      	lsls	r3, r3, #1
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	e001      	b.n	800a4e0 <tcp_process+0x4a4>
 800a4dc:	f241 131c 	movw	r3, #4380	@ 0x111c
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800a4e6:	4b17      	ldr	r3, [pc, #92]	@ (800a544 <tcp_process+0x508>)
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	f003 0320 	and.w	r3, r3, #32
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d057      	beq.n	800a5a2 <tcp_process+0x566>
            tcp_ack_now(pcb);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	8b5b      	ldrh	r3, [r3, #26]
 800a4f6:	f043 0302 	orr.w	r3, r3, #2
 800a4fa:	b29a      	uxth	r2, r3
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2207      	movs	r2, #7
 800a504:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800a506:	e04c      	b.n	800a5a2 <tcp_process+0x566>
 800a508:	08013380 	.word	0x08013380
 800a50c:	08013698 	.word	0x08013698
 800a510:	080133cc 	.word	0x080133cc
 800a514:	080136b0 	.word	0x080136b0
 800a518:	20008830 	.word	0x20008830
 800a51c:	20008828 	.word	0x20008828
 800a520:	2000882e 	.word	0x2000882e
 800a524:	20008824 	.word	0x20008824
 800a528:	20008814 	.word	0x20008814
 800a52c:	20005248 	.word	0x20005248
 800a530:	2000524c 	.word	0x2000524c
 800a534:	20008800 	.word	0x20008800
 800a538:	080136c4 	.word	0x080136c4
 800a53c:	080136ec 	.word	0x080136ec
 800a540:	2000882c 	.word	0x2000882c
 800a544:	20008831 	.word	0x20008831
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a548:	4b8c      	ldr	r3, [pc, #560]	@ (800a77c <tcp_process+0x740>)
 800a54a:	6819      	ldr	r1, [r3, #0]
 800a54c:	4b8c      	ldr	r3, [pc, #560]	@ (800a780 <tcp_process+0x744>)
 800a54e:	881b      	ldrh	r3, [r3, #0]
 800a550:	461a      	mov	r2, r3
 800a552:	4b8c      	ldr	r3, [pc, #560]	@ (800a784 <tcp_process+0x748>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a558:	4b8b      	ldr	r3, [pc, #556]	@ (800a788 <tcp_process+0x74c>)
 800a55a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a55c:	885b      	ldrh	r3, [r3, #2]
 800a55e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a560:	4a89      	ldr	r2, [pc, #548]	@ (800a788 <tcp_process+0x74c>)
 800a562:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a564:	8812      	ldrh	r2, [r2, #0]
 800a566:	b292      	uxth	r2, r2
 800a568:	9202      	str	r2, [sp, #8]
 800a56a:	9301      	str	r3, [sp, #4]
 800a56c:	4b87      	ldr	r3, [pc, #540]	@ (800a78c <tcp_process+0x750>)
 800a56e:	9300      	str	r3, [sp, #0]
 800a570:	4b87      	ldr	r3, [pc, #540]	@ (800a790 <tcp_process+0x754>)
 800a572:	4602      	mov	r2, r0
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f003 f8cd 	bl	800d714 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800a57a:	e19c      	b.n	800a8b6 <tcp_process+0x87a>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800a57c:	4b85      	ldr	r3, [pc, #532]	@ (800a794 <tcp_process+0x758>)
 800a57e:	781b      	ldrb	r3, [r3, #0]
 800a580:	f003 0302 	and.w	r3, r3, #2
 800a584:	2b00      	cmp	r3, #0
 800a586:	f000 8196 	beq.w	800a8b6 <tcp_process+0x87a>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a58e:	1e5a      	subs	r2, r3, #1
 800a590:	4b7c      	ldr	r3, [pc, #496]	@ (800a784 <tcp_process+0x748>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	429a      	cmp	r2, r3
 800a596:	f040 818e 	bne.w	800a8b6 <tcp_process+0x87a>
        tcp_rexmit(pcb);
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f002 feb4 	bl	800d308 <tcp_rexmit>
      break;
 800a5a0:	e189      	b.n	800a8b6 <tcp_process+0x87a>
 800a5a2:	e188      	b.n	800a8b6 <tcp_process+0x87a>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f000 faad 	bl	800ab04 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800a5aa:	4b7b      	ldr	r3, [pc, #492]	@ (800a798 <tcp_process+0x75c>)
 800a5ac:	781b      	ldrb	r3, [r3, #0]
 800a5ae:	f003 0320 	and.w	r3, r3, #32
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	f000 8181 	beq.w	800a8ba <tcp_process+0x87e>
        tcp_ack_now(pcb);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	8b5b      	ldrh	r3, [r3, #26]
 800a5bc:	f043 0302 	orr.w	r3, r3, #2
 800a5c0:	b29a      	uxth	r2, r3
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2207      	movs	r2, #7
 800a5ca:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a5cc:	e175      	b.n	800a8ba <tcp_process+0x87e>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f000 fa98 	bl	800ab04 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a5d4:	4b70      	ldr	r3, [pc, #448]	@ (800a798 <tcp_process+0x75c>)
 800a5d6:	781b      	ldrb	r3, [r3, #0]
 800a5d8:	f003 0320 	and.w	r3, r3, #32
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d063      	beq.n	800a6a8 <tcp_process+0x66c>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a5e0:	4b6c      	ldr	r3, [pc, #432]	@ (800a794 <tcp_process+0x758>)
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	f003 0310 	and.w	r3, r3, #16
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d052      	beq.n	800a692 <tcp_process+0x656>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a5f0:	4b62      	ldr	r3, [pc, #392]	@ (800a77c <tcp_process+0x740>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d14c      	bne.n	800a692 <tcp_process+0x656>
            pcb->unsent == NULL) {
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d148      	bne.n	800a692 <tcp_process+0x656>
          LWIP_DEBUGF(TCP_DEBUG,
 800a600:	4b66      	ldr	r3, [pc, #408]	@ (800a79c <tcp_process+0x760>)
 800a602:	691b      	ldr	r3, [r3, #16]
 800a604:	881b      	ldrh	r3, [r3, #0]
 800a606:	b29b      	uxth	r3, r3
 800a608:	4619      	mov	r1, r3
 800a60a:	4b64      	ldr	r3, [pc, #400]	@ (800a79c <tcp_process+0x760>)
 800a60c:	691b      	ldr	r3, [r3, #16]
 800a60e:	885b      	ldrh	r3, [r3, #2]
 800a610:	b29b      	uxth	r3, r3
 800a612:	461a      	mov	r2, r3
 800a614:	4862      	ldr	r0, [pc, #392]	@ (800a7a0 <tcp_process+0x764>)
 800a616:	f006 f9f1 	bl	80109fc <iprintf>
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	8b5b      	ldrh	r3, [r3, #26]
 800a61e:	f043 0302 	orr.w	r3, r3, #2
 800a622:	b29a      	uxth	r2, r3
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f7fe fcb7 	bl	8008f9c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800a62e:	4b5d      	ldr	r3, [pc, #372]	@ (800a7a4 <tcp_process+0x768>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	687a      	ldr	r2, [r7, #4]
 800a634:	429a      	cmp	r2, r3
 800a636:	d105      	bne.n	800a644 <tcp_process+0x608>
 800a638:	4b5a      	ldr	r3, [pc, #360]	@ (800a7a4 <tcp_process+0x768>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	68db      	ldr	r3, [r3, #12]
 800a63e:	4a59      	ldr	r2, [pc, #356]	@ (800a7a4 <tcp_process+0x768>)
 800a640:	6013      	str	r3, [r2, #0]
 800a642:	e013      	b.n	800a66c <tcp_process+0x630>
 800a644:	4b57      	ldr	r3, [pc, #348]	@ (800a7a4 <tcp_process+0x768>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	61bb      	str	r3, [r7, #24]
 800a64a:	e00c      	b.n	800a666 <tcp_process+0x62a>
 800a64c:	69bb      	ldr	r3, [r7, #24]
 800a64e:	68db      	ldr	r3, [r3, #12]
 800a650:	687a      	ldr	r2, [r7, #4]
 800a652:	429a      	cmp	r2, r3
 800a654:	d104      	bne.n	800a660 <tcp_process+0x624>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	68da      	ldr	r2, [r3, #12]
 800a65a:	69bb      	ldr	r3, [r7, #24]
 800a65c:	60da      	str	r2, [r3, #12]
 800a65e:	e005      	b.n	800a66c <tcp_process+0x630>
 800a660:	69bb      	ldr	r3, [r7, #24]
 800a662:	68db      	ldr	r3, [r3, #12]
 800a664:	61bb      	str	r3, [r7, #24]
 800a666:	69bb      	ldr	r3, [r7, #24]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d1ef      	bne.n	800a64c <tcp_process+0x610>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2200      	movs	r2, #0
 800a670:	60da      	str	r2, [r3, #12]
 800a672:	4b4d      	ldr	r3, [pc, #308]	@ (800a7a8 <tcp_process+0x76c>)
 800a674:	2201      	movs	r2, #1
 800a676:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	220a      	movs	r2, #10
 800a67c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800a67e:	4b4b      	ldr	r3, [pc, #300]	@ (800a7ac <tcp_process+0x770>)
 800a680:	681a      	ldr	r2, [r3, #0]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	60da      	str	r2, [r3, #12]
 800a686:	4a49      	ldr	r2, [pc, #292]	@ (800a7ac <tcp_process+0x770>)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6013      	str	r3, [r2, #0]
 800a68c:	f003 fa88 	bl	800dba0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800a690:	e115      	b.n	800a8be <tcp_process+0x882>
          tcp_ack_now(pcb);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	8b5b      	ldrh	r3, [r3, #26]
 800a696:	f043 0302 	orr.w	r3, r3, #2
 800a69a:	b29a      	uxth	r2, r3
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2208      	movs	r2, #8
 800a6a4:	751a      	strb	r2, [r3, #20]
      break;
 800a6a6:	e10a      	b.n	800a8be <tcp_process+0x882>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a6a8:	4b3a      	ldr	r3, [pc, #232]	@ (800a794 <tcp_process+0x758>)
 800a6aa:	781b      	ldrb	r3, [r3, #0]
 800a6ac:	f003 0310 	and.w	r3, r3, #16
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	f000 8104 	beq.w	800a8be <tcp_process+0x882>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a6ba:	4b30      	ldr	r3, [pc, #192]	@ (800a77c <tcp_process+0x740>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	f040 80fd 	bne.w	800a8be <tcp_process+0x882>
                 pcb->unsent == NULL) {
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	f040 80f8 	bne.w	800a8be <tcp_process+0x882>
        pcb->state = FIN_WAIT_2;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2206      	movs	r2, #6
 800a6d2:	751a      	strb	r2, [r3, #20]
      break;
 800a6d4:	e0f3      	b.n	800a8be <tcp_process+0x882>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 fa14 	bl	800ab04 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a6dc:	4b2e      	ldr	r3, [pc, #184]	@ (800a798 <tcp_process+0x75c>)
 800a6de:	781b      	ldrb	r3, [r3, #0]
 800a6e0:	f003 0320 	and.w	r3, r3, #32
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	f000 80ec 	beq.w	800a8c2 <tcp_process+0x886>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
 800a6ea:	4b2c      	ldr	r3, [pc, #176]	@ (800a79c <tcp_process+0x760>)
 800a6ec:	691b      	ldr	r3, [r3, #16]
 800a6ee:	881b      	ldrh	r3, [r3, #0]
 800a6f0:	b29b      	uxth	r3, r3
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	4b29      	ldr	r3, [pc, #164]	@ (800a79c <tcp_process+0x760>)
 800a6f6:	691b      	ldr	r3, [r3, #16]
 800a6f8:	885b      	ldrh	r3, [r3, #2]
 800a6fa:	b29b      	uxth	r3, r3
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	482c      	ldr	r0, [pc, #176]	@ (800a7b0 <tcp_process+0x774>)
 800a700:	f006 f97c 	bl	80109fc <iprintf>
        tcp_ack_now(pcb);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	8b5b      	ldrh	r3, [r3, #26]
 800a708:	f043 0302 	orr.w	r3, r3, #2
 800a70c:	b29a      	uxth	r2, r3
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f7fe fc42 	bl	8008f9c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a718:	4b22      	ldr	r3, [pc, #136]	@ (800a7a4 <tcp_process+0x768>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	687a      	ldr	r2, [r7, #4]
 800a71e:	429a      	cmp	r2, r3
 800a720:	d105      	bne.n	800a72e <tcp_process+0x6f2>
 800a722:	4b20      	ldr	r3, [pc, #128]	@ (800a7a4 <tcp_process+0x768>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	4a1e      	ldr	r2, [pc, #120]	@ (800a7a4 <tcp_process+0x768>)
 800a72a:	6013      	str	r3, [r2, #0]
 800a72c:	e013      	b.n	800a756 <tcp_process+0x71a>
 800a72e:	4b1d      	ldr	r3, [pc, #116]	@ (800a7a4 <tcp_process+0x768>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	617b      	str	r3, [r7, #20]
 800a734:	e00c      	b.n	800a750 <tcp_process+0x714>
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	68db      	ldr	r3, [r3, #12]
 800a73a:	687a      	ldr	r2, [r7, #4]
 800a73c:	429a      	cmp	r2, r3
 800a73e:	d104      	bne.n	800a74a <tcp_process+0x70e>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	68da      	ldr	r2, [r3, #12]
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	60da      	str	r2, [r3, #12]
 800a748:	e005      	b.n	800a756 <tcp_process+0x71a>
 800a74a:	697b      	ldr	r3, [r7, #20]
 800a74c:	68db      	ldr	r3, [r3, #12]
 800a74e:	617b      	str	r3, [r7, #20]
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d1ef      	bne.n	800a736 <tcp_process+0x6fa>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2200      	movs	r2, #0
 800a75a:	60da      	str	r2, [r3, #12]
 800a75c:	4b12      	ldr	r3, [pc, #72]	@ (800a7a8 <tcp_process+0x76c>)
 800a75e:	2201      	movs	r2, #1
 800a760:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	220a      	movs	r2, #10
 800a766:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a768:	4b10      	ldr	r3, [pc, #64]	@ (800a7ac <tcp_process+0x770>)
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	60da      	str	r2, [r3, #12]
 800a770:	4a0e      	ldr	r2, [pc, #56]	@ (800a7ac <tcp_process+0x770>)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6013      	str	r3, [r2, #0]
 800a776:	f003 fa13 	bl	800dba0 <tcp_timer_needed>
      }
      break;
 800a77a:	e0a2      	b.n	800a8c2 <tcp_process+0x886>
 800a77c:	20008828 	.word	0x20008828
 800a780:	2000882e 	.word	0x2000882e
 800a784:	20008824 	.word	0x20008824
 800a788:	20008814 	.word	0x20008814
 800a78c:	20005248 	.word	0x20005248
 800a790:	2000524c 	.word	0x2000524c
 800a794:	20008830 	.word	0x20008830
 800a798:	20008831 	.word	0x20008831
 800a79c:	20008800 	.word	0x20008800
 800a7a0:	0801370c 	.word	0x0801370c
 800a7a4:	200087f4 	.word	0x200087f4
 800a7a8:	200087fc 	.word	0x200087fc
 800a7ac:	200087f8 	.word	0x200087f8
 800a7b0:	0801373c 	.word	0x0801373c
    case CLOSING:
      tcp_receive(pcb);
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f000 f9a5 	bl	800ab04 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a7ba:	4b47      	ldr	r3, [pc, #284]	@ (800a8d8 <tcp_process+0x89c>)
 800a7bc:	781b      	ldrb	r3, [r3, #0]
 800a7be:	f003 0310 	and.w	r3, r3, #16
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d07f      	beq.n	800a8c6 <tcp_process+0x88a>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a7ca:	4b44      	ldr	r3, [pc, #272]	@ (800a8dc <tcp_process+0x8a0>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	429a      	cmp	r2, r3
 800a7d0:	d179      	bne.n	800a8c6 <tcp_process+0x88a>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d175      	bne.n	800a8c6 <tcp_process+0x88a>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
 800a7da:	4b41      	ldr	r3, [pc, #260]	@ (800a8e0 <tcp_process+0x8a4>)
 800a7dc:	691b      	ldr	r3, [r3, #16]
 800a7de:	881b      	ldrh	r3, [r3, #0]
 800a7e0:	b29b      	uxth	r3, r3
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	4b3e      	ldr	r3, [pc, #248]	@ (800a8e0 <tcp_process+0x8a4>)
 800a7e6:	691b      	ldr	r3, [r3, #16]
 800a7e8:	885b      	ldrh	r3, [r3, #2]
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	483d      	ldr	r0, [pc, #244]	@ (800a8e4 <tcp_process+0x8a8>)
 800a7f0:	f006 f904 	bl	80109fc <iprintf>
        tcp_pcb_purge(pcb);
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f7fe fbd1 	bl	8008f9c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a7fa:	4b3b      	ldr	r3, [pc, #236]	@ (800a8e8 <tcp_process+0x8ac>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	429a      	cmp	r2, r3
 800a802:	d105      	bne.n	800a810 <tcp_process+0x7d4>
 800a804:	4b38      	ldr	r3, [pc, #224]	@ (800a8e8 <tcp_process+0x8ac>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	68db      	ldr	r3, [r3, #12]
 800a80a:	4a37      	ldr	r2, [pc, #220]	@ (800a8e8 <tcp_process+0x8ac>)
 800a80c:	6013      	str	r3, [r2, #0]
 800a80e:	e013      	b.n	800a838 <tcp_process+0x7fc>
 800a810:	4b35      	ldr	r3, [pc, #212]	@ (800a8e8 <tcp_process+0x8ac>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	61fb      	str	r3, [r7, #28]
 800a816:	e00c      	b.n	800a832 <tcp_process+0x7f6>
 800a818:	69fb      	ldr	r3, [r7, #28]
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	429a      	cmp	r2, r3
 800a820:	d104      	bne.n	800a82c <tcp_process+0x7f0>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	68da      	ldr	r2, [r3, #12]
 800a826:	69fb      	ldr	r3, [r7, #28]
 800a828:	60da      	str	r2, [r3, #12]
 800a82a:	e005      	b.n	800a838 <tcp_process+0x7fc>
 800a82c:	69fb      	ldr	r3, [r7, #28]
 800a82e:	68db      	ldr	r3, [r3, #12]
 800a830:	61fb      	str	r3, [r7, #28]
 800a832:	69fb      	ldr	r3, [r7, #28]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d1ef      	bne.n	800a818 <tcp_process+0x7dc>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2200      	movs	r2, #0
 800a83c:	60da      	str	r2, [r3, #12]
 800a83e:	4b2b      	ldr	r3, [pc, #172]	@ (800a8ec <tcp_process+0x8b0>)
 800a840:	2201      	movs	r2, #1
 800a842:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	220a      	movs	r2, #10
 800a848:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a84a:	4b29      	ldr	r3, [pc, #164]	@ (800a8f0 <tcp_process+0x8b4>)
 800a84c:	681a      	ldr	r2, [r3, #0]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	60da      	str	r2, [r3, #12]
 800a852:	4a27      	ldr	r2, [pc, #156]	@ (800a8f0 <tcp_process+0x8b4>)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6013      	str	r3, [r2, #0]
 800a858:	f003 f9a2 	bl	800dba0 <tcp_timer_needed>
      }
      break;
 800a85c:	e033      	b.n	800a8c6 <tcp_process+0x88a>
    case LAST_ACK:
      tcp_receive(pcb);
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f000 f950 	bl	800ab04 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a864:	4b1c      	ldr	r3, [pc, #112]	@ (800a8d8 <tcp_process+0x89c>)
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	f003 0310 	and.w	r3, r3, #16
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d02c      	beq.n	800a8ca <tcp_process+0x88e>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a874:	4b19      	ldr	r3, [pc, #100]	@ (800a8dc <tcp_process+0x8a0>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	429a      	cmp	r2, r3
 800a87a:	d126      	bne.n	800a8ca <tcp_process+0x88e>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a880:	2b00      	cmp	r3, #0
 800a882:	d122      	bne.n	800a8ca <tcp_process+0x88e>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
 800a884:	4b16      	ldr	r3, [pc, #88]	@ (800a8e0 <tcp_process+0x8a4>)
 800a886:	691b      	ldr	r3, [r3, #16]
 800a888:	881b      	ldrh	r3, [r3, #0]
 800a88a:	b29b      	uxth	r3, r3
 800a88c:	4619      	mov	r1, r3
 800a88e:	4b14      	ldr	r3, [pc, #80]	@ (800a8e0 <tcp_process+0x8a4>)
 800a890:	691b      	ldr	r3, [r3, #16]
 800a892:	885b      	ldrh	r3, [r3, #2]
 800a894:	b29b      	uxth	r3, r3
 800a896:	461a      	mov	r2, r3
 800a898:	4816      	ldr	r0, [pc, #88]	@ (800a8f4 <tcp_process+0x8b8>)
 800a89a:	f006 f8af 	bl	80109fc <iprintf>
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800a89e:	4b16      	ldr	r3, [pc, #88]	@ (800a8f8 <tcp_process+0x8bc>)
 800a8a0:	781b      	ldrb	r3, [r3, #0]
 800a8a2:	f043 0310 	orr.w	r3, r3, #16
 800a8a6:	b2da      	uxtb	r2, r3
 800a8a8:	4b13      	ldr	r3, [pc, #76]	@ (800a8f8 <tcp_process+0x8bc>)
 800a8aa:	701a      	strb	r2, [r3, #0]
      }
      break;
 800a8ac:	e00d      	b.n	800a8ca <tcp_process+0x88e>
    default:
      break;
 800a8ae:	bf00      	nop
 800a8b0:	e00c      	b.n	800a8cc <tcp_process+0x890>
      break;
 800a8b2:	bf00      	nop
 800a8b4:	e00a      	b.n	800a8cc <tcp_process+0x890>
      break;
 800a8b6:	bf00      	nop
 800a8b8:	e008      	b.n	800a8cc <tcp_process+0x890>
      break;
 800a8ba:	bf00      	nop
 800a8bc:	e006      	b.n	800a8cc <tcp_process+0x890>
      break;
 800a8be:	bf00      	nop
 800a8c0:	e004      	b.n	800a8cc <tcp_process+0x890>
      break;
 800a8c2:	bf00      	nop
 800a8c4:	e002      	b.n	800a8cc <tcp_process+0x890>
      break;
 800a8c6:	bf00      	nop
 800a8c8:	e000      	b.n	800a8cc <tcp_process+0x890>
      break;
 800a8ca:	bf00      	nop
  }
  return ERR_OK;
 800a8cc:	2300      	movs	r3, #0
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3724      	adds	r7, #36	@ 0x24
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd90      	pop	{r4, r7, pc}
 800a8d6:	bf00      	nop
 800a8d8:	20008830 	.word	0x20008830
 800a8dc:	20008828 	.word	0x20008828
 800a8e0:	20008800 	.word	0x20008800
 800a8e4:	0801376c 	.word	0x0801376c
 800a8e8:	200087f4 	.word	0x200087f4
 800a8ec:	200087fc 	.word	0x200087fc
 800a8f0:	200087f8 	.word	0x200087f8
 800a8f4:	08013798 	.word	0x08013798
 800a8f8:	20008831 	.word	0x20008831

0800a8fc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800a8fc:	b590      	push	{r4, r7, lr}
 800a8fe:	b085      	sub	sp, #20
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d106      	bne.n	800a91a <tcp_oos_insert_segment+0x1e>
 800a90c:	4b3b      	ldr	r3, [pc, #236]	@ (800a9fc <tcp_oos_insert_segment+0x100>)
 800a90e:	f240 421f 	movw	r2, #1055	@ 0x41f
 800a912:	493b      	ldr	r1, [pc, #236]	@ (800aa00 <tcp_oos_insert_segment+0x104>)
 800a914:	483b      	ldr	r0, [pc, #236]	@ (800aa04 <tcp_oos_insert_segment+0x108>)
 800a916:	f006 f871 	bl	80109fc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	691b      	ldr	r3, [r3, #16]
 800a91e:	899b      	ldrh	r3, [r3, #12]
 800a920:	b29b      	uxth	r3, r3
 800a922:	4618      	mov	r0, r3
 800a924:	f7fb f888 	bl	8005a38 <lwip_htons>
 800a928:	4603      	mov	r3, r0
 800a92a:	b2db      	uxtb	r3, r3
 800a92c:	f003 0301 	and.w	r3, r3, #1
 800a930:	2b00      	cmp	r3, #0
 800a932:	d028      	beq.n	800a986 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800a934:	6838      	ldr	r0, [r7, #0]
 800a936:	f7fe f873 	bl	8008a20 <tcp_segs_free>
    next = NULL;
 800a93a:	2300      	movs	r3, #0
 800a93c:	603b      	str	r3, [r7, #0]
 800a93e:	e056      	b.n	800a9ee <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	691b      	ldr	r3, [r3, #16]
 800a944:	899b      	ldrh	r3, [r3, #12]
 800a946:	b29b      	uxth	r3, r3
 800a948:	4618      	mov	r0, r3
 800a94a:	f7fb f875 	bl	8005a38 <lwip_htons>
 800a94e:	4603      	mov	r3, r0
 800a950:	b2db      	uxtb	r3, r3
 800a952:	f003 0301 	and.w	r3, r3, #1
 800a956:	2b00      	cmp	r3, #0
 800a958:	d00d      	beq.n	800a976 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	691b      	ldr	r3, [r3, #16]
 800a95e:	899b      	ldrh	r3, [r3, #12]
 800a960:	b29c      	uxth	r4, r3
 800a962:	2001      	movs	r0, #1
 800a964:	f7fb f868 	bl	8005a38 <lwip_htons>
 800a968:	4603      	mov	r3, r0
 800a96a:	461a      	mov	r2, r3
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	691b      	ldr	r3, [r3, #16]
 800a970:	4322      	orrs	r2, r4
 800a972:	b292      	uxth	r2, r2
 800a974:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800a980:	68f8      	ldr	r0, [r7, #12]
 800a982:	f7fe f862 	bl	8008a4a <tcp_seg_free>
    while (next &&
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d00e      	beq.n	800a9aa <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	891b      	ldrh	r3, [r3, #8]
 800a990:	461a      	mov	r2, r3
 800a992:	4b1d      	ldr	r3, [pc, #116]	@ (800aa08 <tcp_oos_insert_segment+0x10c>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	441a      	add	r2, r3
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	691b      	ldr	r3, [r3, #16]
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	6839      	ldr	r1, [r7, #0]
 800a9a0:	8909      	ldrh	r1, [r1, #8]
 800a9a2:	440b      	add	r3, r1
 800a9a4:	1ad3      	subs	r3, r2, r3
    while (next &&
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	daca      	bge.n	800a940 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d01e      	beq.n	800a9ee <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	891b      	ldrh	r3, [r3, #8]
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	4b14      	ldr	r3, [pc, #80]	@ (800aa08 <tcp_oos_insert_segment+0x10c>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	441a      	add	r2, r3
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	691b      	ldr	r3, [r3, #16]
 800a9c0:	685b      	ldr	r3, [r3, #4]
 800a9c2:	1ad3      	subs	r3, r2, r3
    if (next &&
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	dd12      	ble.n	800a9ee <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	691b      	ldr	r3, [r3, #16]
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	b29a      	uxth	r2, r3
 800a9d0:	4b0d      	ldr	r3, [pc, #52]	@ (800aa08 <tcp_oos_insert_segment+0x10c>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	1ad3      	subs	r3, r2, r3
 800a9d8:	b29a      	uxth	r2, r3
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	685a      	ldr	r2, [r3, #4]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	891b      	ldrh	r3, [r3, #8]
 800a9e6:	4619      	mov	r1, r3
 800a9e8:	4610      	mov	r0, r2
 800a9ea:	f7fc f9fd 	bl	8006de8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	683a      	ldr	r2, [r7, #0]
 800a9f2:	601a      	str	r2, [r3, #0]
}
 800a9f4:	bf00      	nop
 800a9f6:	3714      	adds	r7, #20
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd90      	pop	{r4, r7, pc}
 800a9fc:	08013380 	.word	0x08013380
 800aa00:	080137c8 	.word	0x080137c8
 800aa04:	080133cc 	.word	0x080133cc
 800aa08:	20008824 	.word	0x20008824

0800aa0c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800aa0c:	b5b0      	push	{r4, r5, r7, lr}
 800aa0e:	b086      	sub	sp, #24
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	60f8      	str	r0, [r7, #12]
 800aa14:	60b9      	str	r1, [r7, #8]
 800aa16:	607a      	str	r2, [r7, #4]
 800aa18:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800aa1a:	e03e      	b.n	800aa9a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	685b      	ldr	r3, [r3, #4]
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f7fc fbea 	bl	8007204 <pbuf_clen>
 800aa30:	4603      	mov	r3, r0
 800aa32:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800aa3a:	8a7a      	ldrh	r2, [r7, #18]
 800aa3c:	429a      	cmp	r2, r3
 800aa3e:	d906      	bls.n	800aa4e <tcp_free_acked_segments+0x42>
 800aa40:	4b2a      	ldr	r3, [pc, #168]	@ (800aaec <tcp_free_acked_segments+0xe0>)
 800aa42:	f240 4257 	movw	r2, #1111	@ 0x457
 800aa46:	492a      	ldr	r1, [pc, #168]	@ (800aaf0 <tcp_free_acked_segments+0xe4>)
 800aa48:	482a      	ldr	r0, [pc, #168]	@ (800aaf4 <tcp_free_acked_segments+0xe8>)
 800aa4a:	f005 ffd7 	bl	80109fc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800aa54:	8a7b      	ldrh	r3, [r7, #18]
 800aa56:	1ad3      	subs	r3, r2, r3
 800aa58:	b29a      	uxth	r2, r3
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	891a      	ldrh	r2, [r3, #8]
 800aa64:	4b24      	ldr	r3, [pc, #144]	@ (800aaf8 <tcp_free_acked_segments+0xec>)
 800aa66:	881b      	ldrh	r3, [r3, #0]
 800aa68:	4413      	add	r3, r2
 800aa6a:	b29a      	uxth	r2, r3
 800aa6c:	4b22      	ldr	r3, [pc, #136]	@ (800aaf8 <tcp_free_acked_segments+0xec>)
 800aa6e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800aa70:	6978      	ldr	r0, [r7, #20]
 800aa72:	f7fd ffea 	bl	8008a4a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d00c      	beq.n	800aa9a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d109      	bne.n	800aa9a <tcp_free_acked_segments+0x8e>
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d106      	bne.n	800aa9a <tcp_free_acked_segments+0x8e>
 800aa8c:	4b17      	ldr	r3, [pc, #92]	@ (800aaec <tcp_free_acked_segments+0xe0>)
 800aa8e:	f240 4261 	movw	r2, #1121	@ 0x461
 800aa92:	491a      	ldr	r1, [pc, #104]	@ (800aafc <tcp_free_acked_segments+0xf0>)
 800aa94:	4817      	ldr	r0, [pc, #92]	@ (800aaf4 <tcp_free_acked_segments+0xe8>)
 800aa96:	f005 ffb1 	bl	80109fc <iprintf>
  while (seg_list != NULL &&
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d020      	beq.n	800aae2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	691b      	ldr	r3, [r3, #16]
 800aaa4:	685b      	ldr	r3, [r3, #4]
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7fa ffdb 	bl	8005a62 <lwip_htonl>
 800aaac:	4604      	mov	r4, r0
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	891b      	ldrh	r3, [r3, #8]
 800aab2:	461d      	mov	r5, r3
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	691b      	ldr	r3, [r3, #16]
 800aab8:	899b      	ldrh	r3, [r3, #12]
 800aaba:	b29b      	uxth	r3, r3
 800aabc:	4618      	mov	r0, r3
 800aabe:	f7fa ffbb 	bl	8005a38 <lwip_htons>
 800aac2:	4603      	mov	r3, r0
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	f003 0303 	and.w	r3, r3, #3
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d001      	beq.n	800aad2 <tcp_free_acked_segments+0xc6>
 800aace:	2301      	movs	r3, #1
 800aad0:	e000      	b.n	800aad4 <tcp_free_acked_segments+0xc8>
 800aad2:	2300      	movs	r3, #0
 800aad4:	442b      	add	r3, r5
 800aad6:	18e2      	adds	r2, r4, r3
 800aad8:	4b09      	ldr	r3, [pc, #36]	@ (800ab00 <tcp_free_acked_segments+0xf4>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800aade:	2b00      	cmp	r3, #0
 800aae0:	dd9c      	ble.n	800aa1c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800aae2:	68bb      	ldr	r3, [r7, #8]
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3718      	adds	r7, #24
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bdb0      	pop	{r4, r5, r7, pc}
 800aaec:	08013380 	.word	0x08013380
 800aaf0:	080137f0 	.word	0x080137f0
 800aaf4:	080133cc 	.word	0x080133cc
 800aaf8:	2000882c 	.word	0x2000882c
 800aafc:	08013818 	.word	0x08013818
 800ab00:	20008828 	.word	0x20008828

0800ab04 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ab04:	b5b0      	push	{r4, r5, r7, lr}
 800ab06:	b094      	sub	sp, #80	@ 0x50
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d106      	bne.n	800ab24 <tcp_receive+0x20>
 800ab16:	4b91      	ldr	r3, [pc, #580]	@ (800ad5c <tcp_receive+0x258>)
 800ab18:	f240 427b 	movw	r2, #1147	@ 0x47b
 800ab1c:	4990      	ldr	r1, [pc, #576]	@ (800ad60 <tcp_receive+0x25c>)
 800ab1e:	4891      	ldr	r0, [pc, #580]	@ (800ad64 <tcp_receive+0x260>)
 800ab20:	f005 ff6c 	bl	80109fc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	7d1b      	ldrb	r3, [r3, #20]
 800ab28:	2b03      	cmp	r3, #3
 800ab2a:	d806      	bhi.n	800ab3a <tcp_receive+0x36>
 800ab2c:	4b8b      	ldr	r3, [pc, #556]	@ (800ad5c <tcp_receive+0x258>)
 800ab2e:	f240 427c 	movw	r2, #1148	@ 0x47c
 800ab32:	498d      	ldr	r1, [pc, #564]	@ (800ad68 <tcp_receive+0x264>)
 800ab34:	488b      	ldr	r0, [pc, #556]	@ (800ad64 <tcp_receive+0x260>)
 800ab36:	f005 ff61 	bl	80109fc <iprintf>

  if (flags & TCP_ACK) {
 800ab3a:	4b8c      	ldr	r3, [pc, #560]	@ (800ad6c <tcp_receive+0x268>)
 800ab3c:	781b      	ldrb	r3, [r3, #0]
 800ab3e:	f003 0310 	and.w	r3, r3, #16
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	f000 8264 	beq.w	800b010 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ab4e:	461a      	mov	r2, r3
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab54:	4413      	add	r3, r2
 800ab56:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ab5c:	4b84      	ldr	r3, [pc, #528]	@ (800ad70 <tcp_receive+0x26c>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	1ad3      	subs	r3, r2, r3
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	db1b      	blt.n	800ab9e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ab6a:	4b81      	ldr	r3, [pc, #516]	@ (800ad70 <tcp_receive+0x26c>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d106      	bne.n	800ab80 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ab76:	4b7f      	ldr	r3, [pc, #508]	@ (800ad74 <tcp_receive+0x270>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	1ad3      	subs	r3, r2, r3
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	db0e      	blt.n	800ab9e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ab84:	4b7b      	ldr	r3, [pc, #492]	@ (800ad74 <tcp_receive+0x270>)
 800ab86:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	d125      	bne.n	800abd8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ab8c:	4b7a      	ldr	r3, [pc, #488]	@ (800ad78 <tcp_receive+0x274>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	89db      	ldrh	r3, [r3, #14]
 800ab92:	b29a      	uxth	r2, r3
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d91c      	bls.n	800abd8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ab9e:	4b76      	ldr	r3, [pc, #472]	@ (800ad78 <tcp_receive+0x274>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	89db      	ldrh	r3, [r3, #14]
 800aba4:	b29a      	uxth	r2, r3
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800abb8:	429a      	cmp	r2, r3
 800abba:	d205      	bcs.n	800abc8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800abc8:	4b69      	ldr	r3, [pc, #420]	@ (800ad70 <tcp_receive+0x26c>)
 800abca:	681a      	ldr	r2, [r3, #0]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800abd0:	4b68      	ldr	r3, [pc, #416]	@ (800ad74 <tcp_receive+0x270>)
 800abd2:	681a      	ldr	r2, [r3, #0]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800abd8:	4b66      	ldr	r3, [pc, #408]	@ (800ad74 <tcp_receive+0x270>)
 800abda:	681a      	ldr	r2, [r3, #0]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abe0:	1ad3      	subs	r3, r2, r3
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	dc58      	bgt.n	800ac98 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800abe6:	4b65      	ldr	r3, [pc, #404]	@ (800ad7c <tcp_receive+0x278>)
 800abe8:	881b      	ldrh	r3, [r3, #0]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d14b      	bne.n	800ac86 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800abf8:	4413      	add	r3, r2
 800abfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abfc:	429a      	cmp	r2, r3
 800abfe:	d142      	bne.n	800ac86 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	db3d      	blt.n	800ac86 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ac0e:	4b59      	ldr	r3, [pc, #356]	@ (800ad74 <tcp_receive+0x270>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	429a      	cmp	r2, r3
 800ac14:	d137      	bne.n	800ac86 <tcp_receive+0x182>
              found_dupack = 1;
 800ac16:	2301      	movs	r3, #1
 800ac18:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ac20:	2bff      	cmp	r3, #255	@ 0xff
 800ac22:	d007      	beq.n	800ac34 <tcp_receive+0x130>
                ++pcb->dupacks;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	b2da      	uxtb	r2, r3
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ac3a:	2b03      	cmp	r3, #3
 800ac3c:	d91b      	bls.n	800ac76 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ac48:	4413      	add	r3, r2
 800ac4a:	b29a      	uxth	r2, r3
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d30a      	bcc.n	800ac6c <tcp_receive+0x168>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ac60:	4413      	add	r3, r2
 800ac62:	b29a      	uxth	r2, r3
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800ac6a:	e004      	b.n	800ac76 <tcp_receive+0x172>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ac72:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ac7c:	2b02      	cmp	r3, #2
 800ac7e:	d902      	bls.n	800ac86 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f002 fbad 	bl	800d3e0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800ac86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	f040 8161 	bne.w	800af50 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2200      	movs	r2, #0
 800ac92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ac96:	e15b      	b.n	800af50 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ac98:	4b36      	ldr	r3, [pc, #216]	@ (800ad74 <tcp_receive+0x270>)
 800ac9a:	681a      	ldr	r2, [r3, #0]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aca0:	1ad3      	subs	r3, r2, r3
 800aca2:	3b01      	subs	r3, #1
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	f2c0 814e 	blt.w	800af46 <tcp_receive+0x442>
 800acaa:	4b32      	ldr	r3, [pc, #200]	@ (800ad74 <tcp_receive+0x270>)
 800acac:	681a      	ldr	r2, [r3, #0]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acb2:	1ad3      	subs	r3, r2, r3
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	f300 8146 	bgt.w	800af46 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	8b5b      	ldrh	r3, [r3, #26]
 800acbe:	f003 0304 	and.w	r3, r3, #4
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d010      	beq.n	800ace8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	8b5b      	ldrh	r3, [r3, #26]
 800acca:	f023 0304 	bic.w	r3, r3, #4
 800acce:	b29a      	uxth	r2, r3
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2200      	movs	r2, #0
 800ace4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2200      	movs	r2, #0
 800acec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800acf6:	10db      	asrs	r3, r3, #3
 800acf8:	b21b      	sxth	r3, r3
 800acfa:	b29a      	uxth	r2, r3
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800ad02:	b29b      	uxth	r3, r3
 800ad04:	4413      	add	r3, r2
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	b21a      	sxth	r2, r3
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800ad10:	4b18      	ldr	r3, [pc, #96]	@ (800ad74 <tcp_receive+0x270>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	b29a      	uxth	r2, r3
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad1a:	b29b      	uxth	r3, r3
 800ad1c:	1ad3      	subs	r3, r2, r3
 800ad1e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2200      	movs	r2, #0
 800ad24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800ad28:	4b12      	ldr	r3, [pc, #72]	@ (800ad74 <tcp_receive+0x270>)
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	7d1b      	ldrb	r3, [r3, #20]
 800ad34:	2b03      	cmp	r3, #3
 800ad36:	f240 8097 	bls.w	800ae68 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d245      	bcs.n	800add6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	8b5b      	ldrh	r3, [r3, #26]
 800ad4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d014      	beq.n	800ad80 <tcp_receive+0x27c>
 800ad56:	2301      	movs	r3, #1
 800ad58:	e013      	b.n	800ad82 <tcp_receive+0x27e>
 800ad5a:	bf00      	nop
 800ad5c:	08013380 	.word	0x08013380
 800ad60:	08013838 	.word	0x08013838
 800ad64:	080133cc 	.word	0x080133cc
 800ad68:	08013854 	.word	0x08013854
 800ad6c:	20008830 	.word	0x20008830
 800ad70:	20008824 	.word	0x20008824
 800ad74:	20008828 	.word	0x20008828
 800ad78:	20008814 	.word	0x20008814
 800ad7c:	2000882e 	.word	0x2000882e
 800ad80:	2302      	movs	r3, #2
 800ad82:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800ad86:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800ad8a:	b29a      	uxth	r2, r3
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ad90:	fb12 f303 	smulbb	r3, r2, r3
 800ad94:	b29b      	uxth	r3, r3
 800ad96:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	bf28      	it	cs
 800ad9c:	4613      	movcs	r3, r2
 800ad9e:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ada6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ada8:	4413      	add	r3, r2
 800adaa:	b29a      	uxth	r2, r3
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800adb2:	429a      	cmp	r2, r3
 800adb4:	d309      	bcc.n	800adca <tcp_receive+0x2c6>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800adbc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800adbe:	4413      	add	r3, r2
 800adc0:	b29a      	uxth	r2, r3
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800adc8:	e04e      	b.n	800ae68 <tcp_receive+0x364>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800add0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800add4:	e048      	b.n	800ae68 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800addc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800adde:	4413      	add	r3, r2
 800ade0:	b29a      	uxth	r2, r3
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ade8:	429a      	cmp	r2, r3
 800adea:	d309      	bcc.n	800ae00 <tcp_receive+0x2fc>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800adf2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800adf4:	4413      	add	r3, r2
 800adf6:	b29a      	uxth	r2, r3
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800adfe:	e004      	b.n	800ae0a <tcp_receive+0x306>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ae06:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ae16:	429a      	cmp	r2, r3
 800ae18:	d326      	bcc.n	800ae68 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ae26:	1ad3      	subs	r3, r2, r3
 800ae28:	b29a      	uxth	r2, r3
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ae3a:	4413      	add	r3, r2
 800ae3c:	b29a      	uxth	r2, r3
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d30a      	bcc.n	800ae5e <tcp_receive+0x35a>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ae52:	4413      	add	r3, r2
 800ae54:	b29a      	uxth	r2, r3
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800ae5c:	e004      	b.n	800ae68 <tcp_receive+0x364>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ae64:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae70:	4a98      	ldr	r2, [pc, #608]	@ (800b0d4 <tcp_receive+0x5d0>)
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f7ff fdca 	bl	800aa0c <tcp_free_acked_segments>
 800ae78:	4602      	mov	r2, r0
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae86:	4a94      	ldr	r2, [pc, #592]	@ (800b0d8 <tcp_receive+0x5d4>)
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f7ff fdbf 	bl	800aa0c <tcp_free_acked_segments>
 800ae8e:	4602      	mov	r2, r0
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d104      	bne.n	800aea6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800aea2:	861a      	strh	r2, [r3, #48]	@ 0x30
 800aea4:	e002      	b.n	800aeac <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d103      	bne.n	800aec2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2200      	movs	r2, #0
 800aebe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800aec8:	4b84      	ldr	r3, [pc, #528]	@ (800b0dc <tcp_receive+0x5d8>)
 800aeca:	881b      	ldrh	r3, [r3, #0]
 800aecc:	4413      	add	r3, r2
 800aece:	b29a      	uxth	r2, r3
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	8b5b      	ldrh	r3, [r3, #26]
 800aeda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d035      	beq.n	800af4e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d118      	bne.n	800af1c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d00c      	beq.n	800af0c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aefa:	691b      	ldr	r3, [r3, #16]
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	4618      	mov	r0, r3
 800af00:	f7fa fdaf 	bl	8005a62 <lwip_htonl>
 800af04:	4603      	mov	r3, r0
 800af06:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800af08:	2b00      	cmp	r3, #0
 800af0a:	dc20      	bgt.n	800af4e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	8b5b      	ldrh	r3, [r3, #26]
 800af10:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800af14:	b29a      	uxth	r2, r3
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800af1a:	e018      	b.n	800af4e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af24:	691b      	ldr	r3, [r3, #16]
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	4618      	mov	r0, r3
 800af2a:	f7fa fd9a 	bl	8005a62 <lwip_htonl>
 800af2e:	4603      	mov	r3, r0
 800af30:	1ae3      	subs	r3, r4, r3
 800af32:	2b00      	cmp	r3, #0
 800af34:	dc0b      	bgt.n	800af4e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	8b5b      	ldrh	r3, [r3, #26]
 800af3a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800af3e:	b29a      	uxth	r2, r3
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800af44:	e003      	b.n	800af4e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f002 fc3a 	bl	800d7c0 <tcp_send_empty_ack>
 800af4c:	e000      	b.n	800af50 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800af4e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af54:	2b00      	cmp	r3, #0
 800af56:	d05b      	beq.n	800b010 <tcp_receive+0x50c>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af5c:	4b60      	ldr	r3, [pc, #384]	@ (800b0e0 <tcp_receive+0x5dc>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	1ad3      	subs	r3, r2, r3
 800af62:	2b00      	cmp	r3, #0
 800af64:	da54      	bge.n	800b010 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800af66:	4b5f      	ldr	r3, [pc, #380]	@ (800b0e4 <tcp_receive+0x5e0>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	b29a      	uxth	r2, r3
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af70:	b29b      	uxth	r3, r3
 800af72:	1ad3      	subs	r3, r2, r3
 800af74:	b29b      	uxth	r3, r3
 800af76:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800af7a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800af84:	10db      	asrs	r3, r3, #3
 800af86:	b21b      	sxth	r3, r3
 800af88:	b29b      	uxth	r3, r3
 800af8a:	1ad3      	subs	r3, r2, r3
 800af8c:	b29b      	uxth	r3, r3
 800af8e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800af98:	b29a      	uxth	r2, r3
 800af9a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800af9e:	4413      	add	r3, r2
 800afa0:	b29b      	uxth	r3, r3
 800afa2:	b21a      	sxth	r2, r3
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800afa8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800afac:	2b00      	cmp	r3, #0
 800afae:	da05      	bge.n	800afbc <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800afb0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800afb4:	425b      	negs	r3, r3
 800afb6:	b29b      	uxth	r3, r3
 800afb8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800afbc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800afc6:	109b      	asrs	r3, r3, #2
 800afc8:	b21b      	sxth	r3, r3
 800afca:	b29b      	uxth	r3, r3
 800afcc:	1ad3      	subs	r3, r2, r3
 800afce:	b29b      	uxth	r3, r3
 800afd0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800afda:	b29a      	uxth	r2, r3
 800afdc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800afe0:	4413      	add	r3, r2
 800afe2:	b29b      	uxth	r3, r3
 800afe4:	b21a      	sxth	r2, r3
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800aff0:	10db      	asrs	r3, r3, #3
 800aff2:	b21b      	sxth	r3, r3
 800aff4:	b29a      	uxth	r2, r3
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800affc:	b29b      	uxth	r3, r3
 800affe:	4413      	add	r3, r2
 800b000:	b29b      	uxth	r3, r3
 800b002:	b21a      	sxth	r2, r3
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2200      	movs	r2, #0
 800b00e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b010:	4b35      	ldr	r3, [pc, #212]	@ (800b0e8 <tcp_receive+0x5e4>)
 800b012:	881b      	ldrh	r3, [r3, #0]
 800b014:	2b00      	cmp	r3, #0
 800b016:	f000 84df 	beq.w	800b9d8 <tcp_receive+0xed4>
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	7d1b      	ldrb	r3, [r3, #20]
 800b01e:	2b06      	cmp	r3, #6
 800b020:	f200 84da 	bhi.w	800b9d8 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b028:	4b30      	ldr	r3, [pc, #192]	@ (800b0ec <tcp_receive+0x5e8>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	1ad3      	subs	r3, r2, r3
 800b02e:	3b01      	subs	r3, #1
 800b030:	2b00      	cmp	r3, #0
 800b032:	f2c0 808f 	blt.w	800b154 <tcp_receive+0x650>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b03a:	4b2b      	ldr	r3, [pc, #172]	@ (800b0e8 <tcp_receive+0x5e4>)
 800b03c:	881b      	ldrh	r3, [r3, #0]
 800b03e:	4619      	mov	r1, r3
 800b040:	4b2a      	ldr	r3, [pc, #168]	@ (800b0ec <tcp_receive+0x5e8>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	440b      	add	r3, r1
 800b046:	1ad3      	subs	r3, r2, r3
 800b048:	3301      	adds	r3, #1
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	f300 8082 	bgt.w	800b154 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800b050:	4b27      	ldr	r3, [pc, #156]	@ (800b0f0 <tcp_receive+0x5ec>)
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b05a:	4b24      	ldr	r3, [pc, #144]	@ (800b0ec <tcp_receive+0x5e8>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	1ad3      	subs	r3, r2, r3
 800b060:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b062:	4b23      	ldr	r3, [pc, #140]	@ (800b0f0 <tcp_receive+0x5ec>)
 800b064:	685b      	ldr	r3, [r3, #4]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d106      	bne.n	800b078 <tcp_receive+0x574>
 800b06a:	4b22      	ldr	r3, [pc, #136]	@ (800b0f4 <tcp_receive+0x5f0>)
 800b06c:	f240 5294 	movw	r2, #1428	@ 0x594
 800b070:	4921      	ldr	r1, [pc, #132]	@ (800b0f8 <tcp_receive+0x5f4>)
 800b072:	4822      	ldr	r0, [pc, #136]	@ (800b0fc <tcp_receive+0x5f8>)
 800b074:	f005 fcc2 	bl	80109fc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800b078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b07a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b07e:	4293      	cmp	r3, r2
 800b080:	d906      	bls.n	800b090 <tcp_receive+0x58c>
 800b082:	4b1c      	ldr	r3, [pc, #112]	@ (800b0f4 <tcp_receive+0x5f0>)
 800b084:	f240 5295 	movw	r2, #1429	@ 0x595
 800b088:	491d      	ldr	r1, [pc, #116]	@ (800b100 <tcp_receive+0x5fc>)
 800b08a:	481c      	ldr	r0, [pc, #112]	@ (800b0fc <tcp_receive+0x5f8>)
 800b08c:	f005 fcb6 	bl	80109fc <iprintf>
      off = (u16_t)off32;
 800b090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b092:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b096:	4b16      	ldr	r3, [pc, #88]	@ (800b0f0 <tcp_receive+0x5ec>)
 800b098:	685b      	ldr	r3, [r3, #4]
 800b09a:	891b      	ldrh	r3, [r3, #8]
 800b09c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d906      	bls.n	800b0b2 <tcp_receive+0x5ae>
 800b0a4:	4b13      	ldr	r3, [pc, #76]	@ (800b0f4 <tcp_receive+0x5f0>)
 800b0a6:	f240 5297 	movw	r2, #1431	@ 0x597
 800b0aa:	4916      	ldr	r1, [pc, #88]	@ (800b104 <tcp_receive+0x600>)
 800b0ac:	4813      	ldr	r0, [pc, #76]	@ (800b0fc <tcp_receive+0x5f8>)
 800b0ae:	f005 fca5 	bl	80109fc <iprintf>
      inseg.len -= off;
 800b0b2:	4b0f      	ldr	r3, [pc, #60]	@ (800b0f0 <tcp_receive+0x5ec>)
 800b0b4:	891a      	ldrh	r2, [r3, #8]
 800b0b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b0ba:	1ad3      	subs	r3, r2, r3
 800b0bc:	b29a      	uxth	r2, r3
 800b0be:	4b0c      	ldr	r3, [pc, #48]	@ (800b0f0 <tcp_receive+0x5ec>)
 800b0c0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b0c2:	4b0b      	ldr	r3, [pc, #44]	@ (800b0f0 <tcp_receive+0x5ec>)
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	891a      	ldrh	r2, [r3, #8]
 800b0c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b0cc:	1ad3      	subs	r3, r2, r3
 800b0ce:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800b0d0:	e02a      	b.n	800b128 <tcp_receive+0x624>
 800b0d2:	bf00      	nop
 800b0d4:	08013870 	.word	0x08013870
 800b0d8:	08013878 	.word	0x08013878
 800b0dc:	2000882c 	.word	0x2000882c
 800b0e0:	20008828 	.word	0x20008828
 800b0e4:	200087e8 	.word	0x200087e8
 800b0e8:	2000882e 	.word	0x2000882e
 800b0ec:	20008824 	.word	0x20008824
 800b0f0:	20008800 	.word	0x20008800
 800b0f4:	08013380 	.word	0x08013380
 800b0f8:	08013880 	.word	0x08013880
 800b0fc:	080133cc 	.word	0x080133cc
 800b100:	08013890 	.word	0x08013890
 800b104:	080138a0 	.word	0x080138a0
        off -= p->len;
 800b108:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b10a:	895b      	ldrh	r3, [r3, #10]
 800b10c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b110:	1ad3      	subs	r3, r2, r3
 800b112:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800b116:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b118:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800b11a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800b11c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b11e:	2200      	movs	r2, #0
 800b120:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800b122:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800b128:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b12a:	895b      	ldrh	r3, [r3, #10]
 800b12c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b130:	429a      	cmp	r2, r3
 800b132:	d8e9      	bhi.n	800b108 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800b134:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b138:	4619      	mov	r1, r3
 800b13a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800b13c:	f7fb ff54 	bl	8006fe8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b144:	4a90      	ldr	r2, [pc, #576]	@ (800b388 <tcp_receive+0x884>)
 800b146:	6013      	str	r3, [r2, #0]
 800b148:	4b90      	ldr	r3, [pc, #576]	@ (800b38c <tcp_receive+0x888>)
 800b14a:	691b      	ldr	r3, [r3, #16]
 800b14c:	4a8e      	ldr	r2, [pc, #568]	@ (800b388 <tcp_receive+0x884>)
 800b14e:	6812      	ldr	r2, [r2, #0]
 800b150:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b152:	e00d      	b.n	800b170 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800b154:	4b8c      	ldr	r3, [pc, #560]	@ (800b388 <tcp_receive+0x884>)
 800b156:	681a      	ldr	r2, [r3, #0]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b15c:	1ad3      	subs	r3, r2, r3
 800b15e:	2b00      	cmp	r3, #0
 800b160:	da06      	bge.n	800b170 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	8b5b      	ldrh	r3, [r3, #26]
 800b166:	f043 0302 	orr.w	r3, r3, #2
 800b16a:	b29a      	uxth	r2, r3
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b170:	4b85      	ldr	r3, [pc, #532]	@ (800b388 <tcp_receive+0x884>)
 800b172:	681a      	ldr	r2, [r3, #0]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b178:	1ad3      	subs	r3, r2, r3
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	f2c0 8427 	blt.w	800b9ce <tcp_receive+0xeca>
 800b180:	4b81      	ldr	r3, [pc, #516]	@ (800b388 <tcp_receive+0x884>)
 800b182:	681a      	ldr	r2, [r3, #0]
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b188:	6879      	ldr	r1, [r7, #4]
 800b18a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b18c:	440b      	add	r3, r1
 800b18e:	1ad3      	subs	r3, r2, r3
 800b190:	3301      	adds	r3, #1
 800b192:	2b00      	cmp	r3, #0
 800b194:	f300 841b 	bgt.w	800b9ce <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b19c:	4b7a      	ldr	r3, [pc, #488]	@ (800b388 <tcp_receive+0x884>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	f040 8298 	bne.w	800b6d6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800b1a6:	4b79      	ldr	r3, [pc, #484]	@ (800b38c <tcp_receive+0x888>)
 800b1a8:	891c      	ldrh	r4, [r3, #8]
 800b1aa:	4b78      	ldr	r3, [pc, #480]	@ (800b38c <tcp_receive+0x888>)
 800b1ac:	691b      	ldr	r3, [r3, #16]
 800b1ae:	899b      	ldrh	r3, [r3, #12]
 800b1b0:	b29b      	uxth	r3, r3
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f7fa fc40 	bl	8005a38 <lwip_htons>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	b2db      	uxtb	r3, r3
 800b1bc:	f003 0303 	and.w	r3, r3, #3
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d001      	beq.n	800b1c8 <tcp_receive+0x6c4>
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	e000      	b.n	800b1ca <tcp_receive+0x6c6>
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	4423      	add	r3, r4
 800b1cc:	b29a      	uxth	r2, r3
 800b1ce:	4b70      	ldr	r3, [pc, #448]	@ (800b390 <tcp_receive+0x88c>)
 800b1d0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b1d6:	4b6e      	ldr	r3, [pc, #440]	@ (800b390 <tcp_receive+0x88c>)
 800b1d8:	881b      	ldrh	r3, [r3, #0]
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d274      	bcs.n	800b2c8 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b1de:	4b6b      	ldr	r3, [pc, #428]	@ (800b38c <tcp_receive+0x888>)
 800b1e0:	691b      	ldr	r3, [r3, #16]
 800b1e2:	899b      	ldrh	r3, [r3, #12]
 800b1e4:	b29b      	uxth	r3, r3
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7fa fc26 	bl	8005a38 <lwip_htons>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	b2db      	uxtb	r3, r3
 800b1f0:	f003 0301 	and.w	r3, r3, #1
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d01e      	beq.n	800b236 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b1f8:	4b64      	ldr	r3, [pc, #400]	@ (800b38c <tcp_receive+0x888>)
 800b1fa:	691b      	ldr	r3, [r3, #16]
 800b1fc:	899b      	ldrh	r3, [r3, #12]
 800b1fe:	b29b      	uxth	r3, r3
 800b200:	b21b      	sxth	r3, r3
 800b202:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b206:	b21c      	sxth	r4, r3
 800b208:	4b60      	ldr	r3, [pc, #384]	@ (800b38c <tcp_receive+0x888>)
 800b20a:	691b      	ldr	r3, [r3, #16]
 800b20c:	899b      	ldrh	r3, [r3, #12]
 800b20e:	b29b      	uxth	r3, r3
 800b210:	4618      	mov	r0, r3
 800b212:	f7fa fc11 	bl	8005a38 <lwip_htons>
 800b216:	4603      	mov	r3, r0
 800b218:	b2db      	uxtb	r3, r3
 800b21a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800b21e:	b29b      	uxth	r3, r3
 800b220:	4618      	mov	r0, r3
 800b222:	f7fa fc09 	bl	8005a38 <lwip_htons>
 800b226:	4603      	mov	r3, r0
 800b228:	b21b      	sxth	r3, r3
 800b22a:	4323      	orrs	r3, r4
 800b22c:	b21a      	sxth	r2, r3
 800b22e:	4b57      	ldr	r3, [pc, #348]	@ (800b38c <tcp_receive+0x888>)
 800b230:	691b      	ldr	r3, [r3, #16]
 800b232:	b292      	uxth	r2, r2
 800b234:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b23a:	4b54      	ldr	r3, [pc, #336]	@ (800b38c <tcp_receive+0x888>)
 800b23c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b23e:	4b53      	ldr	r3, [pc, #332]	@ (800b38c <tcp_receive+0x888>)
 800b240:	691b      	ldr	r3, [r3, #16]
 800b242:	899b      	ldrh	r3, [r3, #12]
 800b244:	b29b      	uxth	r3, r3
 800b246:	4618      	mov	r0, r3
 800b248:	f7fa fbf6 	bl	8005a38 <lwip_htons>
 800b24c:	4603      	mov	r3, r0
 800b24e:	b2db      	uxtb	r3, r3
 800b250:	f003 0302 	and.w	r3, r3, #2
 800b254:	2b00      	cmp	r3, #0
 800b256:	d005      	beq.n	800b264 <tcp_receive+0x760>
            inseg.len -= 1;
 800b258:	4b4c      	ldr	r3, [pc, #304]	@ (800b38c <tcp_receive+0x888>)
 800b25a:	891b      	ldrh	r3, [r3, #8]
 800b25c:	3b01      	subs	r3, #1
 800b25e:	b29a      	uxth	r2, r3
 800b260:	4b4a      	ldr	r3, [pc, #296]	@ (800b38c <tcp_receive+0x888>)
 800b262:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800b264:	4b49      	ldr	r3, [pc, #292]	@ (800b38c <tcp_receive+0x888>)
 800b266:	685b      	ldr	r3, [r3, #4]
 800b268:	4a48      	ldr	r2, [pc, #288]	@ (800b38c <tcp_receive+0x888>)
 800b26a:	8912      	ldrh	r2, [r2, #8]
 800b26c:	4611      	mov	r1, r2
 800b26e:	4618      	mov	r0, r3
 800b270:	f7fb fdba 	bl	8006de8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800b274:	4b45      	ldr	r3, [pc, #276]	@ (800b38c <tcp_receive+0x888>)
 800b276:	891c      	ldrh	r4, [r3, #8]
 800b278:	4b44      	ldr	r3, [pc, #272]	@ (800b38c <tcp_receive+0x888>)
 800b27a:	691b      	ldr	r3, [r3, #16]
 800b27c:	899b      	ldrh	r3, [r3, #12]
 800b27e:	b29b      	uxth	r3, r3
 800b280:	4618      	mov	r0, r3
 800b282:	f7fa fbd9 	bl	8005a38 <lwip_htons>
 800b286:	4603      	mov	r3, r0
 800b288:	b2db      	uxtb	r3, r3
 800b28a:	f003 0303 	and.w	r3, r3, #3
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d001      	beq.n	800b296 <tcp_receive+0x792>
 800b292:	2301      	movs	r3, #1
 800b294:	e000      	b.n	800b298 <tcp_receive+0x794>
 800b296:	2300      	movs	r3, #0
 800b298:	4423      	add	r3, r4
 800b29a:	b29a      	uxth	r2, r3
 800b29c:	4b3c      	ldr	r3, [pc, #240]	@ (800b390 <tcp_receive+0x88c>)
 800b29e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b2a0:	4b3b      	ldr	r3, [pc, #236]	@ (800b390 <tcp_receive+0x88c>)
 800b2a2:	881b      	ldrh	r3, [r3, #0]
 800b2a4:	461a      	mov	r2, r3
 800b2a6:	4b38      	ldr	r3, [pc, #224]	@ (800b388 <tcp_receive+0x884>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	441a      	add	r2, r3
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2b0:	6879      	ldr	r1, [r7, #4]
 800b2b2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b2b4:	440b      	add	r3, r1
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d006      	beq.n	800b2c8 <tcp_receive+0x7c4>
 800b2ba:	4b36      	ldr	r3, [pc, #216]	@ (800b394 <tcp_receive+0x890>)
 800b2bc:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800b2c0:	4935      	ldr	r1, [pc, #212]	@ (800b398 <tcp_receive+0x894>)
 800b2c2:	4836      	ldr	r0, [pc, #216]	@ (800b39c <tcp_receive+0x898>)
 800b2c4:	f005 fb9a 	bl	80109fc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	f000 80e6 	beq.w	800b49e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b2d2:	4b2e      	ldr	r3, [pc, #184]	@ (800b38c <tcp_receive+0x888>)
 800b2d4:	691b      	ldr	r3, [r3, #16]
 800b2d6:	899b      	ldrh	r3, [r3, #12]
 800b2d8:	b29b      	uxth	r3, r3
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f7fa fbac 	bl	8005a38 <lwip_htons>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	b2db      	uxtb	r3, r3
 800b2e4:	f003 0301 	and.w	r3, r3, #1
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d010      	beq.n	800b30e <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800b2ec:	e00a      	b.n	800b304 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b2f2:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b2f8:	681a      	ldr	r2, [r3, #0]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800b2fe:	68f8      	ldr	r0, [r7, #12]
 800b300:	f7fd fba3 	bl	8008a4a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d1f0      	bne.n	800b2ee <tcp_receive+0x7ea>
 800b30c:	e0c7      	b.n	800b49e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b312:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800b314:	e051      	b.n	800b3ba <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b316:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b318:	691b      	ldr	r3, [r3, #16]
 800b31a:	899b      	ldrh	r3, [r3, #12]
 800b31c:	b29b      	uxth	r3, r3
 800b31e:	4618      	mov	r0, r3
 800b320:	f7fa fb8a 	bl	8005a38 <lwip_htons>
 800b324:	4603      	mov	r3, r0
 800b326:	b2db      	uxtb	r3, r3
 800b328:	f003 0301 	and.w	r3, r3, #1
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d03c      	beq.n	800b3aa <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800b330:	4b16      	ldr	r3, [pc, #88]	@ (800b38c <tcp_receive+0x888>)
 800b332:	691b      	ldr	r3, [r3, #16]
 800b334:	899b      	ldrh	r3, [r3, #12]
 800b336:	b29b      	uxth	r3, r3
 800b338:	4618      	mov	r0, r3
 800b33a:	f7fa fb7d 	bl	8005a38 <lwip_htons>
 800b33e:	4603      	mov	r3, r0
 800b340:	b2db      	uxtb	r3, r3
 800b342:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b346:	2b00      	cmp	r3, #0
 800b348:	d12f      	bne.n	800b3aa <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800b34a:	4b10      	ldr	r3, [pc, #64]	@ (800b38c <tcp_receive+0x888>)
 800b34c:	691b      	ldr	r3, [r3, #16]
 800b34e:	899b      	ldrh	r3, [r3, #12]
 800b350:	b29c      	uxth	r4, r3
 800b352:	2001      	movs	r0, #1
 800b354:	f7fa fb70 	bl	8005a38 <lwip_htons>
 800b358:	4603      	mov	r3, r0
 800b35a:	461a      	mov	r2, r3
 800b35c:	4b0b      	ldr	r3, [pc, #44]	@ (800b38c <tcp_receive+0x888>)
 800b35e:	691b      	ldr	r3, [r3, #16]
 800b360:	4322      	orrs	r2, r4
 800b362:	b292      	uxth	r2, r2
 800b364:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800b366:	4b09      	ldr	r3, [pc, #36]	@ (800b38c <tcp_receive+0x888>)
 800b368:	891c      	ldrh	r4, [r3, #8]
 800b36a:	4b08      	ldr	r3, [pc, #32]	@ (800b38c <tcp_receive+0x888>)
 800b36c:	691b      	ldr	r3, [r3, #16]
 800b36e:	899b      	ldrh	r3, [r3, #12]
 800b370:	b29b      	uxth	r3, r3
 800b372:	4618      	mov	r0, r3
 800b374:	f7fa fb60 	bl	8005a38 <lwip_htons>
 800b378:	4603      	mov	r3, r0
 800b37a:	b2db      	uxtb	r3, r3
 800b37c:	f003 0303 	and.w	r3, r3, #3
 800b380:	2b00      	cmp	r3, #0
 800b382:	d00d      	beq.n	800b3a0 <tcp_receive+0x89c>
 800b384:	2301      	movs	r3, #1
 800b386:	e00c      	b.n	800b3a2 <tcp_receive+0x89e>
 800b388:	20008824 	.word	0x20008824
 800b38c:	20008800 	.word	0x20008800
 800b390:	2000882e 	.word	0x2000882e
 800b394:	08013380 	.word	0x08013380
 800b398:	080138b0 	.word	0x080138b0
 800b39c:	080133cc 	.word	0x080133cc
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	4423      	add	r3, r4
 800b3a4:	b29a      	uxth	r2, r3
 800b3a6:	4b98      	ldr	r3, [pc, #608]	@ (800b608 <tcp_receive+0xb04>)
 800b3a8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800b3aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3ac:	613b      	str	r3, [r7, #16]
              next = next->next;
 800b3ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800b3b4:	6938      	ldr	r0, [r7, #16]
 800b3b6:	f7fd fb48 	bl	8008a4a <tcp_seg_free>
            while (next &&
 800b3ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d00e      	beq.n	800b3de <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800b3c0:	4b91      	ldr	r3, [pc, #580]	@ (800b608 <tcp_receive+0xb04>)
 800b3c2:	881b      	ldrh	r3, [r3, #0]
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	4b91      	ldr	r3, [pc, #580]	@ (800b60c <tcp_receive+0xb08>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	441a      	add	r2, r3
 800b3cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3ce:	691b      	ldr	r3, [r3, #16]
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b3d4:	8909      	ldrh	r1, [r1, #8]
 800b3d6:	440b      	add	r3, r1
 800b3d8:	1ad3      	subs	r3, r2, r3
            while (next &&
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	da9b      	bge.n	800b316 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800b3de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d059      	beq.n	800b498 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800b3e4:	4b88      	ldr	r3, [pc, #544]	@ (800b608 <tcp_receive+0xb04>)
 800b3e6:	881b      	ldrh	r3, [r3, #0]
 800b3e8:	461a      	mov	r2, r3
 800b3ea:	4b88      	ldr	r3, [pc, #544]	@ (800b60c <tcp_receive+0xb08>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	441a      	add	r2, r3
 800b3f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3f2:	691b      	ldr	r3, [r3, #16]
 800b3f4:	685b      	ldr	r3, [r3, #4]
 800b3f6:	1ad3      	subs	r3, r2, r3
            if (next &&
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	dd4d      	ble.n	800b498 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800b3fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3fe:	691b      	ldr	r3, [r3, #16]
 800b400:	685b      	ldr	r3, [r3, #4]
 800b402:	b29a      	uxth	r2, r3
 800b404:	4b81      	ldr	r3, [pc, #516]	@ (800b60c <tcp_receive+0xb08>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	b29b      	uxth	r3, r3
 800b40a:	1ad3      	subs	r3, r2, r3
 800b40c:	b29a      	uxth	r2, r3
 800b40e:	4b80      	ldr	r3, [pc, #512]	@ (800b610 <tcp_receive+0xb0c>)
 800b410:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b412:	4b7f      	ldr	r3, [pc, #508]	@ (800b610 <tcp_receive+0xb0c>)
 800b414:	691b      	ldr	r3, [r3, #16]
 800b416:	899b      	ldrh	r3, [r3, #12]
 800b418:	b29b      	uxth	r3, r3
 800b41a:	4618      	mov	r0, r3
 800b41c:	f7fa fb0c 	bl	8005a38 <lwip_htons>
 800b420:	4603      	mov	r3, r0
 800b422:	b2db      	uxtb	r3, r3
 800b424:	f003 0302 	and.w	r3, r3, #2
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d005      	beq.n	800b438 <tcp_receive+0x934>
                inseg.len -= 1;
 800b42c:	4b78      	ldr	r3, [pc, #480]	@ (800b610 <tcp_receive+0xb0c>)
 800b42e:	891b      	ldrh	r3, [r3, #8]
 800b430:	3b01      	subs	r3, #1
 800b432:	b29a      	uxth	r2, r3
 800b434:	4b76      	ldr	r3, [pc, #472]	@ (800b610 <tcp_receive+0xb0c>)
 800b436:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800b438:	4b75      	ldr	r3, [pc, #468]	@ (800b610 <tcp_receive+0xb0c>)
 800b43a:	685b      	ldr	r3, [r3, #4]
 800b43c:	4a74      	ldr	r2, [pc, #464]	@ (800b610 <tcp_receive+0xb0c>)
 800b43e:	8912      	ldrh	r2, [r2, #8]
 800b440:	4611      	mov	r1, r2
 800b442:	4618      	mov	r0, r3
 800b444:	f7fb fcd0 	bl	8006de8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800b448:	4b71      	ldr	r3, [pc, #452]	@ (800b610 <tcp_receive+0xb0c>)
 800b44a:	891c      	ldrh	r4, [r3, #8]
 800b44c:	4b70      	ldr	r3, [pc, #448]	@ (800b610 <tcp_receive+0xb0c>)
 800b44e:	691b      	ldr	r3, [r3, #16]
 800b450:	899b      	ldrh	r3, [r3, #12]
 800b452:	b29b      	uxth	r3, r3
 800b454:	4618      	mov	r0, r3
 800b456:	f7fa faef 	bl	8005a38 <lwip_htons>
 800b45a:	4603      	mov	r3, r0
 800b45c:	b2db      	uxtb	r3, r3
 800b45e:	f003 0303 	and.w	r3, r3, #3
 800b462:	2b00      	cmp	r3, #0
 800b464:	d001      	beq.n	800b46a <tcp_receive+0x966>
 800b466:	2301      	movs	r3, #1
 800b468:	e000      	b.n	800b46c <tcp_receive+0x968>
 800b46a:	2300      	movs	r3, #0
 800b46c:	4423      	add	r3, r4
 800b46e:	b29a      	uxth	r2, r3
 800b470:	4b65      	ldr	r3, [pc, #404]	@ (800b608 <tcp_receive+0xb04>)
 800b472:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800b474:	4b64      	ldr	r3, [pc, #400]	@ (800b608 <tcp_receive+0xb04>)
 800b476:	881b      	ldrh	r3, [r3, #0]
 800b478:	461a      	mov	r2, r3
 800b47a:	4b64      	ldr	r3, [pc, #400]	@ (800b60c <tcp_receive+0xb08>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	441a      	add	r2, r3
 800b480:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b482:	691b      	ldr	r3, [r3, #16]
 800b484:	685b      	ldr	r3, [r3, #4]
 800b486:	429a      	cmp	r2, r3
 800b488:	d006      	beq.n	800b498 <tcp_receive+0x994>
 800b48a:	4b62      	ldr	r3, [pc, #392]	@ (800b614 <tcp_receive+0xb10>)
 800b48c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800b490:	4961      	ldr	r1, [pc, #388]	@ (800b618 <tcp_receive+0xb14>)
 800b492:	4862      	ldr	r0, [pc, #392]	@ (800b61c <tcp_receive+0xb18>)
 800b494:	f005 fab2 	bl	80109fc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b49c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800b49e:	4b5a      	ldr	r3, [pc, #360]	@ (800b608 <tcp_receive+0xb04>)
 800b4a0:	881b      	ldrh	r3, [r3, #0]
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	4b59      	ldr	r3, [pc, #356]	@ (800b60c <tcp_receive+0xb08>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	441a      	add	r2, r3
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b4b2:	4b55      	ldr	r3, [pc, #340]	@ (800b608 <tcp_receive+0xb04>)
 800b4b4:	881b      	ldrh	r3, [r3, #0]
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d206      	bcs.n	800b4c8 <tcp_receive+0x9c4>
 800b4ba:	4b56      	ldr	r3, [pc, #344]	@ (800b614 <tcp_receive+0xb10>)
 800b4bc:	f240 6207 	movw	r2, #1543	@ 0x607
 800b4c0:	4957      	ldr	r1, [pc, #348]	@ (800b620 <tcp_receive+0xb1c>)
 800b4c2:	4856      	ldr	r0, [pc, #344]	@ (800b61c <tcp_receive+0xb18>)
 800b4c4:	f005 fa9a 	bl	80109fc <iprintf>
        pcb->rcv_wnd -= tcplen;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b4cc:	4b4e      	ldr	r3, [pc, #312]	@ (800b608 <tcp_receive+0xb04>)
 800b4ce:	881b      	ldrh	r3, [r3, #0]
 800b4d0:	1ad3      	subs	r3, r2, r3
 800b4d2:	b29a      	uxth	r2, r3
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f7fc fd25 	bl	8007f28 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800b4de:	4b4c      	ldr	r3, [pc, #304]	@ (800b610 <tcp_receive+0xb0c>)
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	891b      	ldrh	r3, [r3, #8]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d006      	beq.n	800b4f6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800b4e8:	4b49      	ldr	r3, [pc, #292]	@ (800b610 <tcp_receive+0xb0c>)
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	4a4d      	ldr	r2, [pc, #308]	@ (800b624 <tcp_receive+0xb20>)
 800b4ee:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800b4f0:	4b47      	ldr	r3, [pc, #284]	@ (800b610 <tcp_receive+0xb0c>)
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b4f6:	4b46      	ldr	r3, [pc, #280]	@ (800b610 <tcp_receive+0xb0c>)
 800b4f8:	691b      	ldr	r3, [r3, #16]
 800b4fa:	899b      	ldrh	r3, [r3, #12]
 800b4fc:	b29b      	uxth	r3, r3
 800b4fe:	4618      	mov	r0, r3
 800b500:	f7fa fa9a 	bl	8005a38 <lwip_htons>
 800b504:	4603      	mov	r3, r0
 800b506:	b2db      	uxtb	r3, r3
 800b508:	f003 0301 	and.w	r3, r3, #1
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	f000 80b8 	beq.w	800b682 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800b512:	4b45      	ldr	r3, [pc, #276]	@ (800b628 <tcp_receive+0xb24>)
 800b514:	781b      	ldrb	r3, [r3, #0]
 800b516:	f043 0320 	orr.w	r3, r3, #32
 800b51a:	b2da      	uxtb	r2, r3
 800b51c:	4b42      	ldr	r3, [pc, #264]	@ (800b628 <tcp_receive+0xb24>)
 800b51e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800b520:	e0af      	b.n	800b682 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b526:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b52c:	691b      	ldr	r3, [r3, #16]
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	4a36      	ldr	r2, [pc, #216]	@ (800b60c <tcp_receive+0xb08>)
 800b532:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	891b      	ldrh	r3, [r3, #8]
 800b538:	461c      	mov	r4, r3
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	691b      	ldr	r3, [r3, #16]
 800b53e:	899b      	ldrh	r3, [r3, #12]
 800b540:	b29b      	uxth	r3, r3
 800b542:	4618      	mov	r0, r3
 800b544:	f7fa fa78 	bl	8005a38 <lwip_htons>
 800b548:	4603      	mov	r3, r0
 800b54a:	b2db      	uxtb	r3, r3
 800b54c:	f003 0303 	and.w	r3, r3, #3
 800b550:	2b00      	cmp	r3, #0
 800b552:	d001      	beq.n	800b558 <tcp_receive+0xa54>
 800b554:	2301      	movs	r3, #1
 800b556:	e000      	b.n	800b55a <tcp_receive+0xa56>
 800b558:	2300      	movs	r3, #0
 800b55a:	191a      	adds	r2, r3, r4
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b560:	441a      	add	r2, r3
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b56a:	461c      	mov	r4, r3
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	891b      	ldrh	r3, [r3, #8]
 800b570:	461d      	mov	r5, r3
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	691b      	ldr	r3, [r3, #16]
 800b576:	899b      	ldrh	r3, [r3, #12]
 800b578:	b29b      	uxth	r3, r3
 800b57a:	4618      	mov	r0, r3
 800b57c:	f7fa fa5c 	bl	8005a38 <lwip_htons>
 800b580:	4603      	mov	r3, r0
 800b582:	b2db      	uxtb	r3, r3
 800b584:	f003 0303 	and.w	r3, r3, #3
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d001      	beq.n	800b590 <tcp_receive+0xa8c>
 800b58c:	2301      	movs	r3, #1
 800b58e:	e000      	b.n	800b592 <tcp_receive+0xa8e>
 800b590:	2300      	movs	r3, #0
 800b592:	442b      	add	r3, r5
 800b594:	429c      	cmp	r4, r3
 800b596:	d206      	bcs.n	800b5a6 <tcp_receive+0xaa2>
 800b598:	4b1e      	ldr	r3, [pc, #120]	@ (800b614 <tcp_receive+0xb10>)
 800b59a:	f240 622b 	movw	r2, #1579	@ 0x62b
 800b59e:	4923      	ldr	r1, [pc, #140]	@ (800b62c <tcp_receive+0xb28>)
 800b5a0:	481e      	ldr	r0, [pc, #120]	@ (800b61c <tcp_receive+0xb18>)
 800b5a2:	f005 fa2b 	bl	80109fc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	891b      	ldrh	r3, [r3, #8]
 800b5aa:	461c      	mov	r4, r3
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	691b      	ldr	r3, [r3, #16]
 800b5b0:	899b      	ldrh	r3, [r3, #12]
 800b5b2:	b29b      	uxth	r3, r3
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f7fa fa3f 	bl	8005a38 <lwip_htons>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	b2db      	uxtb	r3, r3
 800b5be:	f003 0303 	and.w	r3, r3, #3
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d001      	beq.n	800b5ca <tcp_receive+0xac6>
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	e000      	b.n	800b5cc <tcp_receive+0xac8>
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	1919      	adds	r1, r3, r4
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b5d2:	b28b      	uxth	r3, r1
 800b5d4:	1ad3      	subs	r3, r2, r3
 800b5d6:	b29a      	uxth	r2, r3
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f7fc fca3 	bl	8007f28 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	685b      	ldr	r3, [r3, #4]
 800b5e6:	891b      	ldrh	r3, [r3, #8]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d028      	beq.n	800b63e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800b5ec:	4b0d      	ldr	r3, [pc, #52]	@ (800b624 <tcp_receive+0xb20>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d01d      	beq.n	800b630 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800b5f4:	4b0b      	ldr	r3, [pc, #44]	@ (800b624 <tcp_receive+0xb20>)
 800b5f6:	681a      	ldr	r2, [r3, #0]
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	4619      	mov	r1, r3
 800b5fe:	4610      	mov	r0, r2
 800b600:	f7fb fe3a 	bl	8007278 <pbuf_cat>
 800b604:	e018      	b.n	800b638 <tcp_receive+0xb34>
 800b606:	bf00      	nop
 800b608:	2000882e 	.word	0x2000882e
 800b60c:	20008824 	.word	0x20008824
 800b610:	20008800 	.word	0x20008800
 800b614:	08013380 	.word	0x08013380
 800b618:	080138e8 	.word	0x080138e8
 800b61c:	080133cc 	.word	0x080133cc
 800b620:	08013924 	.word	0x08013924
 800b624:	20008834 	.word	0x20008834
 800b628:	20008831 	.word	0x20008831
 800b62c:	08013944 	.word	0x08013944
            } else {
              recv_data = cseg->p;
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	685b      	ldr	r3, [r3, #4]
 800b634:	4a70      	ldr	r2, [pc, #448]	@ (800b7f8 <tcp_receive+0xcf4>)
 800b636:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	2200      	movs	r2, #0
 800b63c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	691b      	ldr	r3, [r3, #16]
 800b642:	899b      	ldrh	r3, [r3, #12]
 800b644:	b29b      	uxth	r3, r3
 800b646:	4618      	mov	r0, r3
 800b648:	f7fa f9f6 	bl	8005a38 <lwip_htons>
 800b64c:	4603      	mov	r3, r0
 800b64e:	b2db      	uxtb	r3, r3
 800b650:	f003 0301 	and.w	r3, r3, #1
 800b654:	2b00      	cmp	r3, #0
 800b656:	d00d      	beq.n	800b674 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800b658:	4b68      	ldr	r3, [pc, #416]	@ (800b7fc <tcp_receive+0xcf8>)
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	f043 0320 	orr.w	r3, r3, #32
 800b660:	b2da      	uxtb	r2, r3
 800b662:	4b66      	ldr	r3, [pc, #408]	@ (800b7fc <tcp_receive+0xcf8>)
 800b664:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	7d1b      	ldrb	r3, [r3, #20]
 800b66a:	2b04      	cmp	r3, #4
 800b66c:	d102      	bne.n	800b674 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2207      	movs	r2, #7
 800b672:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	681a      	ldr	r2, [r3, #0]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800b67c:	68b8      	ldr	r0, [r7, #8]
 800b67e:	f7fd f9e4 	bl	8008a4a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b686:	2b00      	cmp	r3, #0
 800b688:	d008      	beq.n	800b69c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b68e:	691b      	ldr	r3, [r3, #16]
 800b690:	685a      	ldr	r2, [r3, #4]
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800b696:	429a      	cmp	r2, r3
 800b698:	f43f af43 	beq.w	800b522 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	8b5b      	ldrh	r3, [r3, #26]
 800b6a0:	f003 0301 	and.w	r3, r3, #1
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d00e      	beq.n	800b6c6 <tcp_receive+0xbc2>
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	8b5b      	ldrh	r3, [r3, #26]
 800b6ac:	f023 0301 	bic.w	r3, r3, #1
 800b6b0:	b29a      	uxth	r2, r3
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	835a      	strh	r2, [r3, #26]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	8b5b      	ldrh	r3, [r3, #26]
 800b6ba:	f043 0302 	orr.w	r3, r3, #2
 800b6be:	b29a      	uxth	r2, r3
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b6c4:	e187      	b.n	800b9d6 <tcp_receive+0xed2>
        tcp_ack(pcb);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	8b5b      	ldrh	r3, [r3, #26]
 800b6ca:	f043 0301 	orr.w	r3, r3, #1
 800b6ce:	b29a      	uxth	r2, r3
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b6d4:	e17f      	b.n	800b9d6 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d106      	bne.n	800b6ec <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800b6de:	4848      	ldr	r0, [pc, #288]	@ (800b800 <tcp_receive+0xcfc>)
 800b6e0:	f7fd f9ce 	bl	8008a80 <tcp_seg_copy>
 800b6e4:	4602      	mov	r2, r0
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	675a      	str	r2, [r3, #116]	@ 0x74
 800b6ea:	e16c      	b.n	800b9c6 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b6f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b6f6:	e156      	b.n	800b9a6 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800b6f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6fa:	691b      	ldr	r3, [r3, #16]
 800b6fc:	685a      	ldr	r2, [r3, #4]
 800b6fe:	4b41      	ldr	r3, [pc, #260]	@ (800b804 <tcp_receive+0xd00>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	429a      	cmp	r2, r3
 800b704:	d11d      	bne.n	800b742 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800b706:	4b3e      	ldr	r3, [pc, #248]	@ (800b800 <tcp_receive+0xcfc>)
 800b708:	891a      	ldrh	r2, [r3, #8]
 800b70a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b70c:	891b      	ldrh	r3, [r3, #8]
 800b70e:	429a      	cmp	r2, r3
 800b710:	f240 814e 	bls.w	800b9b0 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b714:	483a      	ldr	r0, [pc, #232]	@ (800b800 <tcp_receive+0xcfc>)
 800b716:	f7fd f9b3 	bl	8008a80 <tcp_seg_copy>
 800b71a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	f000 8148 	beq.w	800b9b4 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800b724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b726:	2b00      	cmp	r3, #0
 800b728:	d003      	beq.n	800b732 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800b72a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b72c:	697a      	ldr	r2, [r7, #20]
 800b72e:	601a      	str	r2, [r3, #0]
 800b730:	e002      	b.n	800b738 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	697a      	ldr	r2, [r7, #20]
 800b736:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800b738:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b73a:	6978      	ldr	r0, [r7, #20]
 800b73c:	f7ff f8de 	bl	800a8fc <tcp_oos_insert_segment>
                }
                break;
 800b740:	e138      	b.n	800b9b4 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800b742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b744:	2b00      	cmp	r3, #0
 800b746:	d117      	bne.n	800b778 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800b748:	4b2e      	ldr	r3, [pc, #184]	@ (800b804 <tcp_receive+0xd00>)
 800b74a:	681a      	ldr	r2, [r3, #0]
 800b74c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b74e:	691b      	ldr	r3, [r3, #16]
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	1ad3      	subs	r3, r2, r3
 800b754:	2b00      	cmp	r3, #0
 800b756:	da57      	bge.n	800b808 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b758:	4829      	ldr	r0, [pc, #164]	@ (800b800 <tcp_receive+0xcfc>)
 800b75a:	f7fd f991 	bl	8008a80 <tcp_seg_copy>
 800b75e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800b760:	69bb      	ldr	r3, [r7, #24]
 800b762:	2b00      	cmp	r3, #0
 800b764:	f000 8128 	beq.w	800b9b8 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	69ba      	ldr	r2, [r7, #24]
 800b76c:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800b76e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b770:	69b8      	ldr	r0, [r7, #24]
 800b772:	f7ff f8c3 	bl	800a8fc <tcp_oos_insert_segment>
                  }
                  break;
 800b776:	e11f      	b.n	800b9b8 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800b778:	4b22      	ldr	r3, [pc, #136]	@ (800b804 <tcp_receive+0xd00>)
 800b77a:	681a      	ldr	r2, [r3, #0]
 800b77c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b77e:	691b      	ldr	r3, [r3, #16]
 800b780:	685b      	ldr	r3, [r3, #4]
 800b782:	1ad3      	subs	r3, r2, r3
 800b784:	3b01      	subs	r3, #1
 800b786:	2b00      	cmp	r3, #0
 800b788:	db3e      	blt.n	800b808 <tcp_receive+0xd04>
 800b78a:	4b1e      	ldr	r3, [pc, #120]	@ (800b804 <tcp_receive+0xd00>)
 800b78c:	681a      	ldr	r2, [r3, #0]
 800b78e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b790:	691b      	ldr	r3, [r3, #16]
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	1ad3      	subs	r3, r2, r3
 800b796:	3301      	adds	r3, #1
 800b798:	2b00      	cmp	r3, #0
 800b79a:	dc35      	bgt.n	800b808 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b79c:	4818      	ldr	r0, [pc, #96]	@ (800b800 <tcp_receive+0xcfc>)
 800b79e:	f7fd f96f 	bl	8008a80 <tcp_seg_copy>
 800b7a2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800b7a4:	69fb      	ldr	r3, [r7, #28]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	f000 8108 	beq.w	800b9bc <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800b7ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7ae:	691b      	ldr	r3, [r3, #16]
 800b7b0:	685b      	ldr	r3, [r3, #4]
 800b7b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b7b4:	8912      	ldrh	r2, [r2, #8]
 800b7b6:	441a      	add	r2, r3
 800b7b8:	4b12      	ldr	r3, [pc, #72]	@ (800b804 <tcp_receive+0xd00>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	1ad3      	subs	r3, r2, r3
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	dd12      	ble.n	800b7e8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800b7c2:	4b10      	ldr	r3, [pc, #64]	@ (800b804 <tcp_receive+0xd00>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	b29a      	uxth	r2, r3
 800b7c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7ca:	691b      	ldr	r3, [r3, #16]
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	b29b      	uxth	r3, r3
 800b7d0:	1ad3      	subs	r3, r2, r3
 800b7d2:	b29a      	uxth	r2, r3
 800b7d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7d6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800b7d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7da:	685a      	ldr	r2, [r3, #4]
 800b7dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7de:	891b      	ldrh	r3, [r3, #8]
 800b7e0:	4619      	mov	r1, r3
 800b7e2:	4610      	mov	r0, r2
 800b7e4:	f7fb fb00 	bl	8006de8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800b7e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7ea:	69fa      	ldr	r2, [r7, #28]
 800b7ec:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800b7ee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b7f0:	69f8      	ldr	r0, [r7, #28]
 800b7f2:	f7ff f883 	bl	800a8fc <tcp_oos_insert_segment>
                  }
                  break;
 800b7f6:	e0e1      	b.n	800b9bc <tcp_receive+0xeb8>
 800b7f8:	20008834 	.word	0x20008834
 800b7fc:	20008831 	.word	0x20008831
 800b800:	20008800 	.word	0x20008800
 800b804:	20008824 	.word	0x20008824
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800b808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b80a:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800b80c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	2b00      	cmp	r3, #0
 800b812:	f040 80c5 	bne.w	800b9a0 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800b816:	4b7f      	ldr	r3, [pc, #508]	@ (800ba14 <tcp_receive+0xf10>)
 800b818:	681a      	ldr	r2, [r3, #0]
 800b81a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b81c:	691b      	ldr	r3, [r3, #16]
 800b81e:	685b      	ldr	r3, [r3, #4]
 800b820:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800b822:	2b00      	cmp	r3, #0
 800b824:	f340 80bc 	ble.w	800b9a0 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b82a:	691b      	ldr	r3, [r3, #16]
 800b82c:	899b      	ldrh	r3, [r3, #12]
 800b82e:	b29b      	uxth	r3, r3
 800b830:	4618      	mov	r0, r3
 800b832:	f7fa f901 	bl	8005a38 <lwip_htons>
 800b836:	4603      	mov	r3, r0
 800b838:	b2db      	uxtb	r3, r3
 800b83a:	f003 0301 	and.w	r3, r3, #1
 800b83e:	2b00      	cmp	r3, #0
 800b840:	f040 80be 	bne.w	800b9c0 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800b844:	4874      	ldr	r0, [pc, #464]	@ (800ba18 <tcp_receive+0xf14>)
 800b846:	f7fd f91b 	bl	8008a80 <tcp_seg_copy>
 800b84a:	4602      	mov	r2, r0
 800b84c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b84e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800b850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	2b00      	cmp	r3, #0
 800b856:	f000 80b5 	beq.w	800b9c4 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800b85a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b85c:	691b      	ldr	r3, [r3, #16]
 800b85e:	685b      	ldr	r3, [r3, #4]
 800b860:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b862:	8912      	ldrh	r2, [r2, #8]
 800b864:	441a      	add	r2, r3
 800b866:	4b6b      	ldr	r3, [pc, #428]	@ (800ba14 <tcp_receive+0xf10>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	1ad3      	subs	r3, r2, r3
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	dd12      	ble.n	800b896 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800b870:	4b68      	ldr	r3, [pc, #416]	@ (800ba14 <tcp_receive+0xf10>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	b29a      	uxth	r2, r3
 800b876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b878:	691b      	ldr	r3, [r3, #16]
 800b87a:	685b      	ldr	r3, [r3, #4]
 800b87c:	b29b      	uxth	r3, r3
 800b87e:	1ad3      	subs	r3, r2, r3
 800b880:	b29a      	uxth	r2, r3
 800b882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b884:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800b886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b888:	685a      	ldr	r2, [r3, #4]
 800b88a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b88c:	891b      	ldrh	r3, [r3, #8]
 800b88e:	4619      	mov	r1, r3
 800b890:	4610      	mov	r0, r2
 800b892:	f7fb faa9 	bl	8006de8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800b896:	4b61      	ldr	r3, [pc, #388]	@ (800ba1c <tcp_receive+0xf18>)
 800b898:	881b      	ldrh	r3, [r3, #0]
 800b89a:	461a      	mov	r2, r3
 800b89c:	4b5d      	ldr	r3, [pc, #372]	@ (800ba14 <tcp_receive+0xf10>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	441a      	add	r2, r3
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8a6:	6879      	ldr	r1, [r7, #4]
 800b8a8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b8aa:	440b      	add	r3, r1
 800b8ac:	1ad3      	subs	r3, r2, r3
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	f340 8088 	ble.w	800b9c4 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800b8b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	691b      	ldr	r3, [r3, #16]
 800b8ba:	899b      	ldrh	r3, [r3, #12]
 800b8bc:	b29b      	uxth	r3, r3
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f7fa f8ba 	bl	8005a38 <lwip_htons>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	b2db      	uxtb	r3, r3
 800b8c8:	f003 0301 	and.w	r3, r3, #1
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d021      	beq.n	800b914 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800b8d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	691b      	ldr	r3, [r3, #16]
 800b8d6:	899b      	ldrh	r3, [r3, #12]
 800b8d8:	b29b      	uxth	r3, r3
 800b8da:	b21b      	sxth	r3, r3
 800b8dc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b8e0:	b21c      	sxth	r4, r3
 800b8e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	691b      	ldr	r3, [r3, #16]
 800b8e8:	899b      	ldrh	r3, [r3, #12]
 800b8ea:	b29b      	uxth	r3, r3
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f7fa f8a3 	bl	8005a38 <lwip_htons>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	b2db      	uxtb	r3, r3
 800b8f6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800b8fa:	b29b      	uxth	r3, r3
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f7fa f89b 	bl	8005a38 <lwip_htons>
 800b902:	4603      	mov	r3, r0
 800b904:	b21b      	sxth	r3, r3
 800b906:	4323      	orrs	r3, r4
 800b908:	b21a      	sxth	r2, r3
 800b90a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	691b      	ldr	r3, [r3, #16]
 800b910:	b292      	uxth	r2, r2
 800b912:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b918:	b29a      	uxth	r2, r3
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b91e:	4413      	add	r3, r2
 800b920:	b299      	uxth	r1, r3
 800b922:	4b3c      	ldr	r3, [pc, #240]	@ (800ba14 <tcp_receive+0xf10>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	b29a      	uxth	r2, r3
 800b928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	1a8a      	subs	r2, r1, r2
 800b92e:	b292      	uxth	r2, r2
 800b930:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800b932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	685a      	ldr	r2, [r3, #4]
 800b938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	891b      	ldrh	r3, [r3, #8]
 800b93e:	4619      	mov	r1, r3
 800b940:	4610      	mov	r0, r2
 800b942:	f7fb fa51 	bl	8006de8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800b946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	891c      	ldrh	r4, [r3, #8]
 800b94c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	691b      	ldr	r3, [r3, #16]
 800b952:	899b      	ldrh	r3, [r3, #12]
 800b954:	b29b      	uxth	r3, r3
 800b956:	4618      	mov	r0, r3
 800b958:	f7fa f86e 	bl	8005a38 <lwip_htons>
 800b95c:	4603      	mov	r3, r0
 800b95e:	b2db      	uxtb	r3, r3
 800b960:	f003 0303 	and.w	r3, r3, #3
 800b964:	2b00      	cmp	r3, #0
 800b966:	d001      	beq.n	800b96c <tcp_receive+0xe68>
 800b968:	2301      	movs	r3, #1
 800b96a:	e000      	b.n	800b96e <tcp_receive+0xe6a>
 800b96c:	2300      	movs	r3, #0
 800b96e:	4423      	add	r3, r4
 800b970:	b29a      	uxth	r2, r3
 800b972:	4b2a      	ldr	r3, [pc, #168]	@ (800ba1c <tcp_receive+0xf18>)
 800b974:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b976:	4b29      	ldr	r3, [pc, #164]	@ (800ba1c <tcp_receive+0xf18>)
 800b978:	881b      	ldrh	r3, [r3, #0]
 800b97a:	461a      	mov	r2, r3
 800b97c:	4b25      	ldr	r3, [pc, #148]	@ (800ba14 <tcp_receive+0xf10>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	441a      	add	r2, r3
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b986:	6879      	ldr	r1, [r7, #4]
 800b988:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b98a:	440b      	add	r3, r1
 800b98c:	429a      	cmp	r2, r3
 800b98e:	d019      	beq.n	800b9c4 <tcp_receive+0xec0>
 800b990:	4b23      	ldr	r3, [pc, #140]	@ (800ba20 <tcp_receive+0xf1c>)
 800b992:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800b996:	4923      	ldr	r1, [pc, #140]	@ (800ba24 <tcp_receive+0xf20>)
 800b998:	4823      	ldr	r0, [pc, #140]	@ (800ba28 <tcp_receive+0xf24>)
 800b99a:	f005 f82f 	bl	80109fc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800b99e:	e011      	b.n	800b9c4 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b9a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b9a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	f47f aea5 	bne.w	800b6f8 <tcp_receive+0xbf4>
 800b9ae:	e00a      	b.n	800b9c6 <tcp_receive+0xec2>
                break;
 800b9b0:	bf00      	nop
 800b9b2:	e008      	b.n	800b9c6 <tcp_receive+0xec2>
                break;
 800b9b4:	bf00      	nop
 800b9b6:	e006      	b.n	800b9c6 <tcp_receive+0xec2>
                  break;
 800b9b8:	bf00      	nop
 800b9ba:	e004      	b.n	800b9c6 <tcp_receive+0xec2>
                  break;
 800b9bc:	bf00      	nop
 800b9be:	e002      	b.n	800b9c6 <tcp_receive+0xec2>
                  break;
 800b9c0:	bf00      	nop
 800b9c2:	e000      	b.n	800b9c6 <tcp_receive+0xec2>
                break;
 800b9c4:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f001 fefa 	bl	800d7c0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800b9cc:	e003      	b.n	800b9d6 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f001 fef6 	bl	800d7c0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b9d4:	e01a      	b.n	800ba0c <tcp_receive+0xf08>
 800b9d6:	e019      	b.n	800ba0c <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800b9d8:	4b0e      	ldr	r3, [pc, #56]	@ (800ba14 <tcp_receive+0xf10>)
 800b9da:	681a      	ldr	r2, [r3, #0]
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9e0:	1ad3      	subs	r3, r2, r3
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	db0a      	blt.n	800b9fc <tcp_receive+0xef8>
 800b9e6:	4b0b      	ldr	r3, [pc, #44]	@ (800ba14 <tcp_receive+0xf10>)
 800b9e8:	681a      	ldr	r2, [r3, #0]
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9ee:	6879      	ldr	r1, [r7, #4]
 800b9f0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b9f2:	440b      	add	r3, r1
 800b9f4:	1ad3      	subs	r3, r2, r3
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	dd07      	ble.n	800ba0c <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	8b5b      	ldrh	r3, [r3, #26]
 800ba00:	f043 0302 	orr.w	r3, r3, #2
 800ba04:	b29a      	uxth	r2, r3
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800ba0a:	e7ff      	b.n	800ba0c <tcp_receive+0xf08>
 800ba0c:	bf00      	nop
 800ba0e:	3750      	adds	r7, #80	@ 0x50
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bdb0      	pop	{r4, r5, r7, pc}
 800ba14:	20008824 	.word	0x20008824
 800ba18:	20008800 	.word	0x20008800
 800ba1c:	2000882e 	.word	0x2000882e
 800ba20:	08013380 	.word	0x08013380
 800ba24:	080138b0 	.word	0x080138b0
 800ba28:	080133cc 	.word	0x080133cc

0800ba2c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b083      	sub	sp, #12
 800ba30:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800ba32:	4b15      	ldr	r3, [pc, #84]	@ (800ba88 <tcp_get_next_optbyte+0x5c>)
 800ba34:	881b      	ldrh	r3, [r3, #0]
 800ba36:	1c5a      	adds	r2, r3, #1
 800ba38:	b291      	uxth	r1, r2
 800ba3a:	4a13      	ldr	r2, [pc, #76]	@ (800ba88 <tcp_get_next_optbyte+0x5c>)
 800ba3c:	8011      	strh	r1, [r2, #0]
 800ba3e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ba40:	4b12      	ldr	r3, [pc, #72]	@ (800ba8c <tcp_get_next_optbyte+0x60>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d004      	beq.n	800ba52 <tcp_get_next_optbyte+0x26>
 800ba48:	4b11      	ldr	r3, [pc, #68]	@ (800ba90 <tcp_get_next_optbyte+0x64>)
 800ba4a:	881b      	ldrh	r3, [r3, #0]
 800ba4c:	88fa      	ldrh	r2, [r7, #6]
 800ba4e:	429a      	cmp	r2, r3
 800ba50:	d208      	bcs.n	800ba64 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800ba52:	4b10      	ldr	r3, [pc, #64]	@ (800ba94 <tcp_get_next_optbyte+0x68>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	3314      	adds	r3, #20
 800ba58:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800ba5a:	88fb      	ldrh	r3, [r7, #6]
 800ba5c:	683a      	ldr	r2, [r7, #0]
 800ba5e:	4413      	add	r3, r2
 800ba60:	781b      	ldrb	r3, [r3, #0]
 800ba62:	e00b      	b.n	800ba7c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ba64:	88fb      	ldrh	r3, [r7, #6]
 800ba66:	b2da      	uxtb	r2, r3
 800ba68:	4b09      	ldr	r3, [pc, #36]	@ (800ba90 <tcp_get_next_optbyte+0x64>)
 800ba6a:	881b      	ldrh	r3, [r3, #0]
 800ba6c:	b2db      	uxtb	r3, r3
 800ba6e:	1ad3      	subs	r3, r2, r3
 800ba70:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800ba72:	4b06      	ldr	r3, [pc, #24]	@ (800ba8c <tcp_get_next_optbyte+0x60>)
 800ba74:	681a      	ldr	r2, [r3, #0]
 800ba76:	797b      	ldrb	r3, [r7, #5]
 800ba78:	4413      	add	r3, r2
 800ba7a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	370c      	adds	r7, #12
 800ba80:	46bd      	mov	sp, r7
 800ba82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba86:	4770      	bx	lr
 800ba88:	20008820 	.word	0x20008820
 800ba8c:	2000881c 	.word	0x2000881c
 800ba90:	2000881a 	.word	0x2000881a
 800ba94:	20008814 	.word	0x20008814

0800ba98 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b084      	sub	sp, #16
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d106      	bne.n	800bab4 <tcp_parseopt+0x1c>
 800baa6:	4b32      	ldr	r3, [pc, #200]	@ (800bb70 <tcp_parseopt+0xd8>)
 800baa8:	f240 727d 	movw	r2, #1917	@ 0x77d
 800baac:	4931      	ldr	r1, [pc, #196]	@ (800bb74 <tcp_parseopt+0xdc>)
 800baae:	4832      	ldr	r0, [pc, #200]	@ (800bb78 <tcp_parseopt+0xe0>)
 800bab0:	f004 ffa4 	bl	80109fc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800bab4:	4b31      	ldr	r3, [pc, #196]	@ (800bb7c <tcp_parseopt+0xe4>)
 800bab6:	881b      	ldrh	r3, [r3, #0]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d056      	beq.n	800bb6a <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800babc:	4b30      	ldr	r3, [pc, #192]	@ (800bb80 <tcp_parseopt+0xe8>)
 800babe:	2200      	movs	r2, #0
 800bac0:	801a      	strh	r2, [r3, #0]
 800bac2:	e046      	b.n	800bb52 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800bac4:	f7ff ffb2 	bl	800ba2c <tcp_get_next_optbyte>
 800bac8:	4603      	mov	r3, r0
 800baca:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800bacc:	7bfb      	ldrb	r3, [r7, #15]
 800bace:	2b02      	cmp	r3, #2
 800bad0:	d006      	beq.n	800bae0 <tcp_parseopt+0x48>
 800bad2:	2b02      	cmp	r3, #2
 800bad4:	dc2a      	bgt.n	800bb2c <tcp_parseopt+0x94>
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d042      	beq.n	800bb60 <tcp_parseopt+0xc8>
 800bada:	2b01      	cmp	r3, #1
 800badc:	d038      	beq.n	800bb50 <tcp_parseopt+0xb8>
 800bade:	e025      	b.n	800bb2c <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800bae0:	f7ff ffa4 	bl	800ba2c <tcp_get_next_optbyte>
 800bae4:	4603      	mov	r3, r0
 800bae6:	2b04      	cmp	r3, #4
 800bae8:	d13c      	bne.n	800bb64 <tcp_parseopt+0xcc>
 800baea:	4b25      	ldr	r3, [pc, #148]	@ (800bb80 <tcp_parseopt+0xe8>)
 800baec:	881b      	ldrh	r3, [r3, #0]
 800baee:	3301      	adds	r3, #1
 800baf0:	4a22      	ldr	r2, [pc, #136]	@ (800bb7c <tcp_parseopt+0xe4>)
 800baf2:	8812      	ldrh	r2, [r2, #0]
 800baf4:	4293      	cmp	r3, r2
 800baf6:	da35      	bge.n	800bb64 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800baf8:	f7ff ff98 	bl	800ba2c <tcp_get_next_optbyte>
 800bafc:	4603      	mov	r3, r0
 800bafe:	021b      	lsls	r3, r3, #8
 800bb00:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800bb02:	f7ff ff93 	bl	800ba2c <tcp_get_next_optbyte>
 800bb06:	4603      	mov	r3, r0
 800bb08:	461a      	mov	r2, r3
 800bb0a:	89bb      	ldrh	r3, [r7, #12]
 800bb0c:	4313      	orrs	r3, r2
 800bb0e:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800bb10:	89bb      	ldrh	r3, [r7, #12]
 800bb12:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800bb16:	d804      	bhi.n	800bb22 <tcp_parseopt+0x8a>
 800bb18:	89bb      	ldrh	r3, [r7, #12]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d001      	beq.n	800bb22 <tcp_parseopt+0x8a>
 800bb1e:	89ba      	ldrh	r2, [r7, #12]
 800bb20:	e001      	b.n	800bb26 <tcp_parseopt+0x8e>
 800bb22:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800bb2a:	e012      	b.n	800bb52 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800bb2c:	f7ff ff7e 	bl	800ba2c <tcp_get_next_optbyte>
 800bb30:	4603      	mov	r3, r0
 800bb32:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800bb34:	7afb      	ldrb	r3, [r7, #11]
 800bb36:	2b01      	cmp	r3, #1
 800bb38:	d916      	bls.n	800bb68 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800bb3a:	7afb      	ldrb	r3, [r7, #11]
 800bb3c:	b29a      	uxth	r2, r3
 800bb3e:	4b10      	ldr	r3, [pc, #64]	@ (800bb80 <tcp_parseopt+0xe8>)
 800bb40:	881b      	ldrh	r3, [r3, #0]
 800bb42:	4413      	add	r3, r2
 800bb44:	b29b      	uxth	r3, r3
 800bb46:	3b02      	subs	r3, #2
 800bb48:	b29a      	uxth	r2, r3
 800bb4a:	4b0d      	ldr	r3, [pc, #52]	@ (800bb80 <tcp_parseopt+0xe8>)
 800bb4c:	801a      	strh	r2, [r3, #0]
 800bb4e:	e000      	b.n	800bb52 <tcp_parseopt+0xba>
          break;
 800bb50:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800bb52:	4b0b      	ldr	r3, [pc, #44]	@ (800bb80 <tcp_parseopt+0xe8>)
 800bb54:	881a      	ldrh	r2, [r3, #0]
 800bb56:	4b09      	ldr	r3, [pc, #36]	@ (800bb7c <tcp_parseopt+0xe4>)
 800bb58:	881b      	ldrh	r3, [r3, #0]
 800bb5a:	429a      	cmp	r2, r3
 800bb5c:	d3b2      	bcc.n	800bac4 <tcp_parseopt+0x2c>
 800bb5e:	e004      	b.n	800bb6a <tcp_parseopt+0xd2>
          return;
 800bb60:	bf00      	nop
 800bb62:	e002      	b.n	800bb6a <tcp_parseopt+0xd2>
            return;
 800bb64:	bf00      	nop
 800bb66:	e000      	b.n	800bb6a <tcp_parseopt+0xd2>
            return;
 800bb68:	bf00      	nop
      }
    }
  }
}
 800bb6a:	3710      	adds	r7, #16
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}
 800bb70:	08013380 	.word	0x08013380
 800bb74:	0801396c 	.word	0x0801396c
 800bb78:	080133cc 	.word	0x080133cc
 800bb7c:	20008818 	.word	0x20008818
 800bb80:	20008820 	.word	0x20008820

0800bb84 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800bb84:	b480      	push	{r7}
 800bb86:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800bb88:	4b05      	ldr	r3, [pc, #20]	@ (800bba0 <tcp_trigger_input_pcb_close+0x1c>)
 800bb8a:	781b      	ldrb	r3, [r3, #0]
 800bb8c:	f043 0310 	orr.w	r3, r3, #16
 800bb90:	b2da      	uxtb	r2, r3
 800bb92:	4b03      	ldr	r3, [pc, #12]	@ (800bba0 <tcp_trigger_input_pcb_close+0x1c>)
 800bb94:	701a      	strb	r2, [r3, #0]
}
 800bb96:	bf00      	nop
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9e:	4770      	bx	lr
 800bba0:	20008831 	.word	0x20008831

0800bba4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b084      	sub	sp, #16
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	60f8      	str	r0, [r7, #12]
 800bbac:	60b9      	str	r1, [r7, #8]
 800bbae:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d00a      	beq.n	800bbcc <tcp_route+0x28>
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	7a1b      	ldrb	r3, [r3, #8]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d006      	beq.n	800bbcc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	7a1b      	ldrb	r3, [r3, #8]
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f7fa ff36 	bl	8006a34 <netif_get_by_index>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	e003      	b.n	800bbd4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f003 fbf9 	bl	800f3c4 <ip4_route>
 800bbd2:	4603      	mov	r3, r0
  }
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3710      	adds	r7, #16
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}

0800bbdc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800bbdc:	b590      	push	{r4, r7, lr}
 800bbde:	b087      	sub	sp, #28
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	60f8      	str	r0, [r7, #12]
 800bbe4:	60b9      	str	r1, [r7, #8]
 800bbe6:	603b      	str	r3, [r7, #0]
 800bbe8:	4613      	mov	r3, r2
 800bbea:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d105      	bne.n	800bbfe <tcp_create_segment+0x22>
 800bbf2:	4b45      	ldr	r3, [pc, #276]	@ (800bd08 <tcp_create_segment+0x12c>)
 800bbf4:	22a3      	movs	r2, #163	@ 0xa3
 800bbf6:	4945      	ldr	r1, [pc, #276]	@ (800bd0c <tcp_create_segment+0x130>)
 800bbf8:	4845      	ldr	r0, [pc, #276]	@ (800bd10 <tcp_create_segment+0x134>)
 800bbfa:	f004 feff 	bl	80109fc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d105      	bne.n	800bc10 <tcp_create_segment+0x34>
 800bc04:	4b40      	ldr	r3, [pc, #256]	@ (800bd08 <tcp_create_segment+0x12c>)
 800bc06:	22a4      	movs	r2, #164	@ 0xa4
 800bc08:	4942      	ldr	r1, [pc, #264]	@ (800bd14 <tcp_create_segment+0x138>)
 800bc0a:	4841      	ldr	r0, [pc, #260]	@ (800bd10 <tcp_create_segment+0x134>)
 800bc0c:	f004 fef6 	bl	80109fc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800bc10:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bc14:	009b      	lsls	r3, r3, #2
 800bc16:	b2db      	uxtb	r3, r3
 800bc18:	f003 0304 	and.w	r3, r3, #4
 800bc1c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800bc1e:	2003      	movs	r0, #3
 800bc20:	f7fa fb82 	bl	8006328 <memp_malloc>
 800bc24:	6138      	str	r0, [r7, #16]
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d104      	bne.n	800bc36 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800bc2c:	68b8      	ldr	r0, [r7, #8]
 800bc2e:	f7fb fa61 	bl	80070f4 <pbuf_free>
    return NULL;
 800bc32:	2300      	movs	r3, #0
 800bc34:	e063      	b.n	800bcfe <tcp_create_segment+0x122>
  }
  seg->flags = optflags;
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800bc3c:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	2200      	movs	r2, #0
 800bc42:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800bc44:	693b      	ldr	r3, [r7, #16]
 800bc46:	68ba      	ldr	r2, [r7, #8]
 800bc48:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	891a      	ldrh	r2, [r3, #8]
 800bc4e:	7dfb      	ldrb	r3, [r7, #23]
 800bc50:	b29b      	uxth	r3, r3
 800bc52:	429a      	cmp	r2, r3
 800bc54:	d205      	bcs.n	800bc62 <tcp_create_segment+0x86>
 800bc56:	4b2c      	ldr	r3, [pc, #176]	@ (800bd08 <tcp_create_segment+0x12c>)
 800bc58:	22b0      	movs	r2, #176	@ 0xb0
 800bc5a:	492f      	ldr	r1, [pc, #188]	@ (800bd18 <tcp_create_segment+0x13c>)
 800bc5c:	482c      	ldr	r0, [pc, #176]	@ (800bd10 <tcp_create_segment+0x134>)
 800bc5e:	f004 fecd 	bl	80109fc <iprintf>
  seg->len = p->tot_len - optlen;
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	891a      	ldrh	r2, [r3, #8]
 800bc66:	7dfb      	ldrb	r3, [r7, #23]
 800bc68:	b29b      	uxth	r3, r3
 800bc6a:	1ad3      	subs	r3, r2, r3
 800bc6c:	b29a      	uxth	r2, r3
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	2200      	movs	r2, #0
 800bc76:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800bc78:	2114      	movs	r1, #20
 800bc7a:	68b8      	ldr	r0, [r7, #8]
 800bc7c:	f7fb f9a4 	bl	8006fc8 <pbuf_add_header>
 800bc80:	4603      	mov	r3, r0
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d004      	beq.n	800bc90 <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800bc86:	6938      	ldr	r0, [r7, #16]
 800bc88:	f7fc fedf 	bl	8008a4a <tcp_seg_free>
    return NULL;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	e036      	b.n	800bcfe <tcp_create_segment+0x122>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	685a      	ldr	r2, [r3, #4]
 800bc96:	693b      	ldr	r3, [r7, #16]
 800bc98:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	8ada      	ldrh	r2, [r3, #22]
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	691c      	ldr	r4, [r3, #16]
 800bca2:	4610      	mov	r0, r2
 800bca4:	f7f9 fec8 	bl	8005a38 <lwip_htons>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	8b1a      	ldrh	r2, [r3, #24]
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	691c      	ldr	r4, [r3, #16]
 800bcb4:	4610      	mov	r0, r2
 800bcb6:	f7f9 febf 	bl	8005a38 <lwip_htons>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	691c      	ldr	r4, [r3, #16]
 800bcc2:	6838      	ldr	r0, [r7, #0]
 800bcc4:	f7f9 fecd 	bl	8005a62 <lwip_htonl>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800bccc:	7dfb      	ldrb	r3, [r7, #23]
 800bcce:	089b      	lsrs	r3, r3, #2
 800bcd0:	b2db      	uxtb	r3, r3
 800bcd2:	3305      	adds	r3, #5
 800bcd4:	b29b      	uxth	r3, r3
 800bcd6:	031b      	lsls	r3, r3, #12
 800bcd8:	b29a      	uxth	r2, r3
 800bcda:	79fb      	ldrb	r3, [r7, #7]
 800bcdc:	b29b      	uxth	r3, r3
 800bcde:	4313      	orrs	r3, r2
 800bce0:	b29a      	uxth	r2, r3
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	691c      	ldr	r4, [r3, #16]
 800bce6:	4610      	mov	r0, r2
 800bce8:	f7f9 fea6 	bl	8005a38 <lwip_htons>
 800bcec:	4603      	mov	r3, r0
 800bcee:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	691b      	ldr	r3, [r3, #16]
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	749a      	strb	r2, [r3, #18]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	74da      	strb	r2, [r3, #19]
  return seg;
 800bcfc:	693b      	ldr	r3, [r7, #16]
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	371c      	adds	r7, #28
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd90      	pop	{r4, r7, pc}
 800bd06:	bf00      	nop
 800bd08:	08013988 	.word	0x08013988
 800bd0c:	080139bc 	.word	0x080139bc
 800bd10:	080139dc 	.word	0x080139dc
 800bd14:	08013a04 	.word	0x08013a04
 800bd18:	08013a28 	.word	0x08013a28

0800bd1c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b086      	sub	sp, #24
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	607b      	str	r3, [r7, #4]
 800bd24:	4603      	mov	r3, r0
 800bd26:	73fb      	strb	r3, [r7, #15]
 800bd28:	460b      	mov	r3, r1
 800bd2a:	81bb      	strh	r3, [r7, #12]
 800bd2c:	4613      	mov	r3, r2
 800bd2e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800bd30:	89bb      	ldrh	r3, [r7, #12]
 800bd32:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d105      	bne.n	800bd46 <tcp_pbuf_prealloc+0x2a>
 800bd3a:	4b30      	ldr	r3, [pc, #192]	@ (800bdfc <tcp_pbuf_prealloc+0xe0>)
 800bd3c:	22e8      	movs	r2, #232	@ 0xe8
 800bd3e:	4930      	ldr	r1, [pc, #192]	@ (800be00 <tcp_pbuf_prealloc+0xe4>)
 800bd40:	4830      	ldr	r0, [pc, #192]	@ (800be04 <tcp_pbuf_prealloc+0xe8>)
 800bd42:	f004 fe5b 	bl	80109fc <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800bd46:	6a3b      	ldr	r3, [r7, #32]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d105      	bne.n	800bd58 <tcp_pbuf_prealloc+0x3c>
 800bd4c:	4b2b      	ldr	r3, [pc, #172]	@ (800bdfc <tcp_pbuf_prealloc+0xe0>)
 800bd4e:	22e9      	movs	r2, #233	@ 0xe9
 800bd50:	492d      	ldr	r1, [pc, #180]	@ (800be08 <tcp_pbuf_prealloc+0xec>)
 800bd52:	482c      	ldr	r0, [pc, #176]	@ (800be04 <tcp_pbuf_prealloc+0xe8>)
 800bd54:	f004 fe52 	bl	80109fc <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800bd58:	89ba      	ldrh	r2, [r7, #12]
 800bd5a:	897b      	ldrh	r3, [r7, #10]
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d221      	bcs.n	800bda4 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800bd60:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bd64:	f003 0302 	and.w	r3, r3, #2
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d111      	bne.n	800bd90 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800bd6c:	6a3b      	ldr	r3, [r7, #32]
 800bd6e:	8b5b      	ldrh	r3, [r3, #26]
 800bd70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d115      	bne.n	800bda4 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800bd78:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d007      	beq.n	800bd90 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800bd80:	6a3b      	ldr	r3, [r7, #32]
 800bd82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d103      	bne.n	800bd90 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800bd88:	6a3b      	ldr	r3, [r7, #32]
 800bd8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d009      	beq.n	800bda4 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800bd90:	89bb      	ldrh	r3, [r7, #12]
 800bd92:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 800bd96:	f023 0203 	bic.w	r2, r3, #3
 800bd9a:	897b      	ldrh	r3, [r7, #10]
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	bf28      	it	cs
 800bda0:	4613      	movcs	r3, r2
 800bda2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800bda4:	8af9      	ldrh	r1, [r7, #22]
 800bda6:	7bfb      	ldrb	r3, [r7, #15]
 800bda8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800bdac:	4618      	mov	r0, r3
 800bdae:	f7fa febd 	bl	8006b2c <pbuf_alloc>
 800bdb2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d101      	bne.n	800bdbe <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	e019      	b.n	800bdf2 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d006      	beq.n	800bdd4 <tcp_pbuf_prealloc+0xb8>
 800bdc6:	4b0d      	ldr	r3, [pc, #52]	@ (800bdfc <tcp_pbuf_prealloc+0xe0>)
 800bdc8:	f240 120b 	movw	r2, #267	@ 0x10b
 800bdcc:	490f      	ldr	r1, [pc, #60]	@ (800be0c <tcp_pbuf_prealloc+0xf0>)
 800bdce:	480d      	ldr	r0, [pc, #52]	@ (800be04 <tcp_pbuf_prealloc+0xe8>)
 800bdd0:	f004 fe14 	bl	80109fc <iprintf>
  *oversize = p->len - length;
 800bdd4:	693b      	ldr	r3, [r7, #16]
 800bdd6:	895a      	ldrh	r2, [r3, #10]
 800bdd8:	89bb      	ldrh	r3, [r7, #12]
 800bdda:	1ad3      	subs	r3, r2, r3
 800bddc:	b29a      	uxth	r2, r3
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	89ba      	ldrh	r2, [r7, #12]
 800bde6:	811a      	strh	r2, [r3, #8]
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	891a      	ldrh	r2, [r3, #8]
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	815a      	strh	r2, [r3, #10]
  return p;
 800bdf0:	693b      	ldr	r3, [r7, #16]
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3718      	adds	r7, #24
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}
 800bdfa:	bf00      	nop
 800bdfc:	08013988 	.word	0x08013988
 800be00:	08013a40 	.word	0x08013a40
 800be04:	080139dc 	.word	0x080139dc
 800be08:	08013a64 	.word	0x08013a64
 800be0c:	08013a84 	.word	0x08013a84

0800be10 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b082      	sub	sp, #8
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
 800be18:	460b      	mov	r3, r1
 800be1a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d106      	bne.n	800be30 <tcp_write_checks+0x20>
 800be22:	4b33      	ldr	r3, [pc, #204]	@ (800bef0 <tcp_write_checks+0xe0>)
 800be24:	f240 1233 	movw	r2, #307	@ 0x133
 800be28:	4932      	ldr	r1, [pc, #200]	@ (800bef4 <tcp_write_checks+0xe4>)
 800be2a:	4833      	ldr	r0, [pc, #204]	@ (800bef8 <tcp_write_checks+0xe8>)
 800be2c:	f004 fde6 	bl	80109fc <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	7d1b      	ldrb	r3, [r3, #20]
 800be34:	2b04      	cmp	r3, #4
 800be36:	d00e      	beq.n	800be56 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800be3c:	2b07      	cmp	r3, #7
 800be3e:	d00a      	beq.n	800be56 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800be44:	2b02      	cmp	r3, #2
 800be46:	d006      	beq.n	800be56 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800be4c:	2b03      	cmp	r3, #3
 800be4e:	d002      	beq.n	800be56 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800be50:	f06f 030a 	mvn.w	r3, #10
 800be54:	e048      	b.n	800bee8 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800be56:	887b      	ldrh	r3, [r7, #2]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d101      	bne.n	800be60 <tcp_write_checks+0x50>
    return ERR_OK;
 800be5c:	2300      	movs	r3, #0
 800be5e:	e043      	b.n	800bee8 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800be66:	887a      	ldrh	r2, [r7, #2]
 800be68:	429a      	cmp	r2, r3
 800be6a:	d909      	bls.n	800be80 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	8b5b      	ldrh	r3, [r3, #26]
 800be70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be74:	b29a      	uxth	r2, r3
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800be7a:	f04f 33ff 	mov.w	r3, #4294967295
 800be7e:	e033      	b.n	800bee8 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800be86:	2b08      	cmp	r3, #8
 800be88:	d909      	bls.n	800be9e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	8b5b      	ldrh	r3, [r3, #26]
 800be8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be92:	b29a      	uxth	r2, r3
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800be98:	f04f 33ff 	mov.w	r3, #4294967295
 800be9c:	e024      	b.n	800bee8 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d00f      	beq.n	800bec8 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800beac:	2b00      	cmp	r3, #0
 800beae:	d11a      	bne.n	800bee6 <tcp_write_checks+0xd6>
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d116      	bne.n	800bee6 <tcp_write_checks+0xd6>
 800beb8:	4b0d      	ldr	r3, [pc, #52]	@ (800bef0 <tcp_write_checks+0xe0>)
 800beba:	f240 1255 	movw	r2, #341	@ 0x155
 800bebe:	490f      	ldr	r1, [pc, #60]	@ (800befc <tcp_write_checks+0xec>)
 800bec0:	480d      	ldr	r0, [pc, #52]	@ (800bef8 <tcp_write_checks+0xe8>)
 800bec2:	f004 fd9b 	bl	80109fc <iprintf>
 800bec6:	e00e      	b.n	800bee6 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800becc:	2b00      	cmp	r3, #0
 800bece:	d103      	bne.n	800bed8 <tcp_write_checks+0xc8>
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d006      	beq.n	800bee6 <tcp_write_checks+0xd6>
 800bed8:	4b05      	ldr	r3, [pc, #20]	@ (800bef0 <tcp_write_checks+0xe0>)
 800beda:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800bede:	4908      	ldr	r1, [pc, #32]	@ (800bf00 <tcp_write_checks+0xf0>)
 800bee0:	4805      	ldr	r0, [pc, #20]	@ (800bef8 <tcp_write_checks+0xe8>)
 800bee2:	f004 fd8b 	bl	80109fc <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800bee6:	2300      	movs	r3, #0
}
 800bee8:	4618      	mov	r0, r3
 800beea:	3708      	adds	r7, #8
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}
 800bef0:	08013988 	.word	0x08013988
 800bef4:	08013a98 	.word	0x08013a98
 800bef8:	080139dc 	.word	0x080139dc
 800befc:	08013ab8 	.word	0x08013ab8
 800bf00:	08013af4 	.word	0x08013af4

0800bf04 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800bf04:	b590      	push	{r4, r7, lr}
 800bf06:	b09d      	sub	sp, #116	@ 0x74
 800bf08:	af04      	add	r7, sp, #16
 800bf0a:	60f8      	str	r0, [r7, #12]
 800bf0c:	60b9      	str	r1, [r7, #8]
 800bf0e:	4611      	mov	r1, r2
 800bf10:	461a      	mov	r2, r3
 800bf12:	460b      	mov	r3, r1
 800bf14:	80fb      	strh	r3, [r7, #6]
 800bf16:	4613      	mov	r3, r2
 800bf18:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	643b      	str	r3, [r7, #64]	@ 0x40
 800bf22:	2300      	movs	r3, #0
 800bf24:	657b      	str	r3, [r7, #84]	@ 0x54
 800bf26:	2300      	movs	r3, #0
 800bf28:	653b      	str	r3, [r7, #80]	@ 0x50
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  u16_t pos = 0; /* position in 'arg' data */
 800bf2e:	2300      	movs	r3, #0
 800bf30:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800bf34:	2300      	movs	r3, #0
 800bf36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	82fb      	strh	r3, [r7, #22]
  u16_t oversize_used = 0;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
 800bf44:	2300      	movs	r3, #0
 800bf46:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d109      	bne.n	800bf6a <tcp_write+0x66>
 800bf56:	4b9c      	ldr	r3, [pc, #624]	@ (800c1c8 <tcp_write+0x2c4>)
 800bf58:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 800bf5c:	499b      	ldr	r1, [pc, #620]	@ (800c1cc <tcp_write+0x2c8>)
 800bf5e:	489c      	ldr	r0, [pc, #624]	@ (800c1d0 <tcp_write+0x2cc>)
 800bf60:	f004 fd4c 	bl	80109fc <iprintf>
 800bf64:	f06f 030f 	mvn.w	r3, #15
 800bf68:	e379      	b.n	800c65e <tcp_write+0x75a>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bf70:	085b      	lsrs	r3, r3, #1
 800bf72:	b29a      	uxth	r2, r3
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bf78:	4293      	cmp	r3, r2
 800bf7a:	bf28      	it	cs
 800bf7c:	4613      	movcs	r3, r2
 800bf7e:	853b      	strh	r3, [r7, #40]	@ 0x28
  mss_local = mss_local ? mss_local : pcb->mss;
 800bf80:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d102      	bne.n	800bf8c <tcp_write+0x88>
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bf8a:	e000      	b.n	800bf8e <tcp_write+0x8a>
 800bf8c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bf8e:	853b      	strh	r3, [r7, #40]	@ 0x28
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d109      	bne.n	800bfaa <tcp_write+0xa6>
 800bf96:	4b8c      	ldr	r3, [pc, #560]	@ (800c1c8 <tcp_write+0x2c4>)
 800bf98:	f240 12ad 	movw	r2, #429	@ 0x1ad
 800bf9c:	498d      	ldr	r1, [pc, #564]	@ (800c1d4 <tcp_write+0x2d0>)
 800bf9e:	488c      	ldr	r0, [pc, #560]	@ (800c1d0 <tcp_write+0x2cc>)
 800bfa0:	f004 fd2c 	bl	80109fc <iprintf>
 800bfa4:	f06f 030f 	mvn.w	r3, #15
 800bfa8:	e359      	b.n	800c65e <tcp_write+0x75a>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800bfaa:	88fb      	ldrh	r3, [r7, #6]
 800bfac:	4619      	mov	r1, r3
 800bfae:	68f8      	ldr	r0, [r7, #12]
 800bfb0:	f7ff ff2e 	bl	800be10 <tcp_write_checks>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (err != ERR_OK) {
 800bfba:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d002      	beq.n	800bfc8 <tcp_write+0xc4>
    return err;
 800bfc2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800bfc6:	e34a      	b.n	800c65e <tcp_write+0x75a>
  }
  queuelen = pcb->snd_queuelen;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800bfce:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	f000 8127 	beq.w	800c230 <tcp_write+0x32c>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bfe6:	643b      	str	r3, [r7, #64]	@ 0x40
 800bfe8:	e002      	b.n	800bff0 <tcp_write+0xec>
         last_unsent = last_unsent->next);
 800bfea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	643b      	str	r3, [r7, #64]	@ 0x40
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bff0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d1f8      	bne.n	800bfea <tcp_write+0xe6>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800bff8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bffa:	7b1b      	ldrb	r3, [r3, #12]
 800bffc:	009b      	lsls	r3, r3, #2
 800bffe:	b29b      	uxth	r3, r3
 800c000:	f003 0304 	and.w	r3, r3, #4
 800c004:	84bb      	strh	r3, [r7, #36]	@ 0x24
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800c006:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800c008:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c00a:	891b      	ldrh	r3, [r3, #8]
 800c00c:	4619      	mov	r1, r3
 800c00e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c010:	440b      	add	r3, r1
 800c012:	429a      	cmp	r2, r3
 800c014:	da06      	bge.n	800c024 <tcp_write+0x120>
 800c016:	4b6c      	ldr	r3, [pc, #432]	@ (800c1c8 <tcp_write+0x2c4>)
 800c018:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800c01c:	496e      	ldr	r1, [pc, #440]	@ (800c1d8 <tcp_write+0x2d4>)
 800c01e:	486c      	ldr	r0, [pc, #432]	@ (800c1d0 <tcp_write+0x2cc>)
 800c020:	f004 fcec 	bl	80109fc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800c024:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c026:	891a      	ldrh	r2, [r3, #8]
 800c028:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c02a:	4413      	add	r3, r2
 800c02c:	b29b      	uxth	r3, r3
 800c02e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800c030:	1ad3      	subs	r3, r2, r3
 800c032:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
     * function.
     */
#if TCP_OVERSIZE
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	f8b3 2068 	ldrh.w	r2, [r3, #104]	@ 0x68
 800c03c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c03e:	895b      	ldrh	r3, [r3, #10]
 800c040:	429a      	cmp	r2, r3
 800c042:	d006      	beq.n	800c052 <tcp_write+0x14e>
 800c044:	4b60      	ldr	r3, [pc, #384]	@ (800c1c8 <tcp_write+0x2c4>)
 800c046:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800c04a:	4964      	ldr	r1, [pc, #400]	@ (800c1dc <tcp_write+0x2d8>)
 800c04c:	4860      	ldr	r0, [pc, #384]	@ (800c1d0 <tcp_write+0x2cc>)
 800c04e:	f004 fcd5 	bl	80109fc <iprintf>
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c058:	82fb      	strh	r3, [r7, #22]
    if (oversize > 0) {
 800c05a:	8afb      	ldrh	r3, [r7, #22]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d02e      	beq.n	800c0be <tcp_write+0x1ba>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800c060:	8afb      	ldrh	r3, [r7, #22]
 800c062:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 800c066:	429a      	cmp	r2, r3
 800c068:	d206      	bcs.n	800c078 <tcp_write+0x174>
 800c06a:	4b57      	ldr	r3, [pc, #348]	@ (800c1c8 <tcp_write+0x2c4>)
 800c06c:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 800c070:	495b      	ldr	r1, [pc, #364]	@ (800c1e0 <tcp_write+0x2dc>)
 800c072:	4857      	ldr	r0, [pc, #348]	@ (800c1d0 <tcp_write+0x2cc>)
 800c074:	f004 fcc2 	bl	80109fc <iprintf>
      seg = last_unsent;
 800c078:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c07a:	657b      	str	r3, [r7, #84]	@ 0x54
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800c07c:	8afb      	ldrh	r3, [r7, #22]
 800c07e:	88fa      	ldrh	r2, [r7, #6]
 800c080:	4293      	cmp	r3, r2
 800c082:	bf28      	it	cs
 800c084:	4613      	movcs	r3, r2
 800c086:	b29b      	uxth	r3, r3
 800c088:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 800c08c:	4293      	cmp	r3, r2
 800c08e:	bf28      	it	cs
 800c090:	4613      	movcs	r3, r2
 800c092:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      pos += oversize_used;
 800c096:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 800c09a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800c09e:	4413      	add	r3, r2
 800c0a0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
      oversize -= oversize_used;
 800c0a4:	8afa      	ldrh	r2, [r7, #22]
 800c0a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800c0aa:	1ad3      	subs	r3, r2, r3
 800c0ac:	b29b      	uxth	r3, r3
 800c0ae:	82fb      	strh	r3, [r7, #22]
      space -= oversize_used;
 800c0b0:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 800c0b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800c0b8:	1ad3      	subs	r3, r2, r3
 800c0ba:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800c0be:	8afb      	ldrh	r3, [r7, #22]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d00b      	beq.n	800c0dc <tcp_write+0x1d8>
 800c0c4:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 800c0c8:	88fb      	ldrh	r3, [r7, #6]
 800c0ca:	429a      	cmp	r2, r3
 800c0cc:	d006      	beq.n	800c0dc <tcp_write+0x1d8>
 800c0ce:	4b3e      	ldr	r3, [pc, #248]	@ (800c1c8 <tcp_write+0x2c4>)
 800c0d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c0d4:	4943      	ldr	r1, [pc, #268]	@ (800c1e4 <tcp_write+0x2e0>)
 800c0d6:	483e      	ldr	r0, [pc, #248]	@ (800c1d0 <tcp_write+0x2cc>)
 800c0d8:	f004 fc90 	bl	80109fc <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800c0dc:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 800c0e0:	88fb      	ldrh	r3, [r7, #6]
 800c0e2:	429a      	cmp	r2, r3
 800c0e4:	f080 8172 	bcs.w	800c3cc <tcp_write+0x4c8>
 800c0e8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	f000 816d 	beq.w	800c3cc <tcp_write+0x4c8>
 800c0f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0f4:	891b      	ldrh	r3, [r3, #8]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	f000 8168 	beq.w	800c3cc <tcp_write+0x4c8>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800c0fc:	88fa      	ldrh	r2, [r7, #6]
 800c0fe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800c102:	1ad2      	subs	r2, r2, r3
 800c104:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800c108:	4293      	cmp	r3, r2
 800c10a:	bfa8      	it	ge
 800c10c:	4613      	movge	r3, r2
 800c10e:	847b      	strh	r3, [r7, #34]	@ 0x22
      seg = last_unsent;
 800c110:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c112:	657b      	str	r3, [r7, #84]	@ 0x54

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c114:	797b      	ldrb	r3, [r7, #5]
 800c116:	f003 0301 	and.w	r3, r3, #1
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d02b      	beq.n	800c176 <tcp_write+0x272>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800c11e:	f107 0016 	add.w	r0, r7, #22
 800c122:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 800c126:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 800c128:	2301      	movs	r3, #1
 800c12a:	9302      	str	r3, [sp, #8]
 800c12c:	797b      	ldrb	r3, [r7, #5]
 800c12e:	9301      	str	r3, [sp, #4]
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	9300      	str	r3, [sp, #0]
 800c134:	4603      	mov	r3, r0
 800c136:	2000      	movs	r0, #0
 800c138:	f7ff fdf0 	bl	800bd1c <tcp_pbuf_prealloc>
 800c13c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800c13e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c140:	2b00      	cmp	r3, #0
 800c142:	f000 825a 	beq.w	800c5fa <tcp_write+0x6f6>
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
 800c146:	8afb      	ldrh	r3, [r7, #22]
 800c148:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800c14c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c14e:	6858      	ldr	r0, [r3, #4]
 800c150:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800c154:	68ba      	ldr	r2, [r7, #8]
 800c156:	4413      	add	r3, r2
 800c158:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c15a:	4619      	mov	r1, r3
 800c15c:	f004 fe23 	bl	8010da6 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800c160:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c162:	f7fb f84f 	bl	8007204 <pbuf_clen>
 800c166:	4603      	mov	r3, r0
 800c168:	461a      	mov	r2, r3
 800c16a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800c16e:	4413      	add	r3, r2
 800c170:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800c174:	e055      	b.n	800c222 <tcp_write+0x31e>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800c176:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c178:	685b      	ldr	r3, [r3, #4]
 800c17a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c17c:	e002      	b.n	800c184 <tcp_write+0x280>
 800c17e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d1f8      	bne.n	800c17e <tcp_write+0x27a>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c18c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c18e:	7b1b      	ldrb	r3, [r3, #12]
 800c190:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c194:	2b00      	cmp	r3, #0
 800c196:	d129      	bne.n	800c1ec <tcp_write+0x2e8>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800c198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c19a:	685b      	ldr	r3, [r3, #4]
 800c19c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c19e:	8952      	ldrh	r2, [r2, #10]
 800c1a0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c1a2:	68ba      	ldr	r2, [r7, #8]
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	d121      	bne.n	800c1ec <tcp_write+0x2e8>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800c1a8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d006      	beq.n	800c1be <tcp_write+0x2ba>
 800c1b0:	4b05      	ldr	r3, [pc, #20]	@ (800c1c8 <tcp_write+0x2c4>)
 800c1b2:	f240 2231 	movw	r2, #561	@ 0x231
 800c1b6:	490c      	ldr	r1, [pc, #48]	@ (800c1e8 <tcp_write+0x2e4>)
 800c1b8:	4805      	ldr	r0, [pc, #20]	@ (800c1d0 <tcp_write+0x2cc>)
 800c1ba:	f004 fc1f 	bl	80109fc <iprintf>
          extendlen = seglen;
 800c1be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c1c0:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800c1c4:	e02d      	b.n	800c222 <tcp_write+0x31e>
 800c1c6:	bf00      	nop
 800c1c8:	08013988 	.word	0x08013988
 800c1cc:	08013b28 	.word	0x08013b28
 800c1d0:	080139dc 	.word	0x080139dc
 800c1d4:	08013b40 	.word	0x08013b40
 800c1d8:	08013b74 	.word	0x08013b74
 800c1dc:	08013b8c 	.word	0x08013b8c
 800c1e0:	08013bbc 	.word	0x08013bbc
 800c1e4:	08013bdc 	.word	0x08013bdc
 800c1e8:	08013bfc 	.word	0x08013bfc
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800c1ec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c1ee:	2201      	movs	r2, #1
 800c1f0:	4619      	mov	r1, r3
 800c1f2:	2000      	movs	r0, #0
 800c1f4:	f7fa fc9a 	bl	8006b2c <pbuf_alloc>
 800c1f8:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800c1fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	f000 81fe 	beq.w	800c5fe <tcp_write+0x6fa>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800c202:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800c206:	68ba      	ldr	r2, [r7, #8]
 800c208:	441a      	add	r2, r3
 800c20a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c20c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800c20e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c210:	f7fa fff8 	bl	8007204 <pbuf_clen>
 800c214:	4603      	mov	r3, r0
 800c216:	461a      	mov	r2, r3
 800c218:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800c21c:	4413      	add	r3, r2
 800c21e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800c222:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 800c226:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c228:	4413      	add	r3, r2
 800c22a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800c22e:	e0cd      	b.n	800c3cc <tcp_write+0x4c8>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c236:	2b00      	cmp	r3, #0
 800c238:	f000 80c8 	beq.w	800c3cc <tcp_write+0x4c8>
 800c23c:	4b72      	ldr	r3, [pc, #456]	@ (800c408 <tcp_write+0x504>)
 800c23e:	f240 224a 	movw	r2, #586	@ 0x24a
 800c242:	4972      	ldr	r1, [pc, #456]	@ (800c40c <tcp_write+0x508>)
 800c244:	4872      	ldr	r0, [pc, #456]	@ (800c410 <tcp_write+0x50c>)
 800c246:	f004 fbd9 	bl	80109fc <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800c24a:	e0bf      	b.n	800c3cc <tcp_write+0x4c8>
    struct pbuf *p;
    u16_t left = len - pos;
 800c24c:	88fa      	ldrh	r2, [r7, #6]
 800c24e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800c252:	1ad3      	subs	r3, r2, r3
 800c254:	843b      	strh	r3, [r7, #32]
    u16_t max_len = mss_local - optlen;
 800c256:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c25a:	b29b      	uxth	r3, r3
 800c25c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800c25e:	1ad3      	subs	r3, r2, r3
 800c260:	83fb      	strh	r3, [r7, #30]
    u16_t seglen = LWIP_MIN(left, max_len);
 800c262:	8bfa      	ldrh	r2, [r7, #30]
 800c264:	8c3b      	ldrh	r3, [r7, #32]
 800c266:	4293      	cmp	r3, r2
 800c268:	bf28      	it	cs
 800c26a:	4613      	movcs	r3, r2
 800c26c:	83bb      	strh	r3, [r7, #28]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c26e:	797b      	ldrb	r3, [r7, #5]
 800c270:	f003 0301 	and.w	r3, r3, #1
 800c274:	2b00      	cmp	r3, #0
 800c276:	d036      	beq.n	800c2e6 <tcp_write+0x3e2>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800c278:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c27c:	b29a      	uxth	r2, r3
 800c27e:	8bbb      	ldrh	r3, [r7, #28]
 800c280:	4413      	add	r3, r2
 800c282:	b299      	uxth	r1, r3
 800c284:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c286:	2b00      	cmp	r3, #0
 800c288:	bf0c      	ite	eq
 800c28a:	2301      	moveq	r3, #1
 800c28c:	2300      	movne	r3, #0
 800c28e:	b2db      	uxtb	r3, r3
 800c290:	f107 0016 	add.w	r0, r7, #22
 800c294:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800c296:	9302      	str	r3, [sp, #8]
 800c298:	797b      	ldrb	r3, [r7, #5]
 800c29a:	9301      	str	r3, [sp, #4]
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	9300      	str	r3, [sp, #0]
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	2036      	movs	r0, #54	@ 0x36
 800c2a4:	f7ff fd3a 	bl	800bd1c <tcp_pbuf_prealloc>
 800c2a8:	6378      	str	r0, [r7, #52]	@ 0x34
 800c2aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	f000 81a8 	beq.w	800c602 <tcp_write+0x6fe>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800c2b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2b4:	895b      	ldrh	r3, [r3, #10]
 800c2b6:	8bba      	ldrh	r2, [r7, #28]
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d906      	bls.n	800c2ca <tcp_write+0x3c6>
 800c2bc:	4b52      	ldr	r3, [pc, #328]	@ (800c408 <tcp_write+0x504>)
 800c2be:	f240 2266 	movw	r2, #614	@ 0x266
 800c2c2:	4954      	ldr	r1, [pc, #336]	@ (800c414 <tcp_write+0x510>)
 800c2c4:	4852      	ldr	r0, [pc, #328]	@ (800c410 <tcp_write+0x50c>)
 800c2c6:	f004 fb99 	bl	80109fc <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800c2ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2cc:	685a      	ldr	r2, [r3, #4]
 800c2ce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c2d2:	18d0      	adds	r0, r2, r3
 800c2d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800c2d8:	68ba      	ldr	r2, [r7, #8]
 800c2da:	4413      	add	r3, r2
 800c2dc:	8bba      	ldrh	r2, [r7, #28]
 800c2de:	4619      	mov	r1, r3
 800c2e0:	f004 fd61 	bl	8010da6 <memcpy>
 800c2e4:	e02f      	b.n	800c346 <tcp_write+0x442>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800c2e6:	8afb      	ldrh	r3, [r7, #22]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d006      	beq.n	800c2fa <tcp_write+0x3f6>
 800c2ec:	4b46      	ldr	r3, [pc, #280]	@ (800c408 <tcp_write+0x504>)
 800c2ee:	f240 2271 	movw	r2, #625	@ 0x271
 800c2f2:	4949      	ldr	r1, [pc, #292]	@ (800c418 <tcp_write+0x514>)
 800c2f4:	4846      	ldr	r0, [pc, #280]	@ (800c410 <tcp_write+0x50c>)
 800c2f6:	f004 fb81 	bl	80109fc <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800c2fa:	8bbb      	ldrh	r3, [r7, #28]
 800c2fc:	2201      	movs	r2, #1
 800c2fe:	4619      	mov	r1, r3
 800c300:	2036      	movs	r0, #54	@ 0x36
 800c302:	f7fa fc13 	bl	8006b2c <pbuf_alloc>
 800c306:	61b8      	str	r0, [r7, #24]
 800c308:	69bb      	ldr	r3, [r7, #24]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	f000 817b 	beq.w	800c606 <tcp_write+0x702>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800c310:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800c314:	68ba      	ldr	r2, [r7, #8]
 800c316:	441a      	add	r2, r3
 800c318:	69bb      	ldr	r3, [r7, #24]
 800c31a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c31c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c320:	b29b      	uxth	r3, r3
 800c322:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c326:	4619      	mov	r1, r3
 800c328:	2036      	movs	r0, #54	@ 0x36
 800c32a:	f7fa fbff 	bl	8006b2c <pbuf_alloc>
 800c32e:	6378      	str	r0, [r7, #52]	@ 0x34
 800c330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c332:	2b00      	cmp	r3, #0
 800c334:	d103      	bne.n	800c33e <tcp_write+0x43a>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800c336:	69b8      	ldr	r0, [r7, #24]
 800c338:	f7fa fedc 	bl	80070f4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800c33c:	e166      	b.n	800c60c <tcp_write+0x708>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800c33e:	69b9      	ldr	r1, [r7, #24]
 800c340:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c342:	f7fa ff99 	bl	8007278 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800c346:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c348:	f7fa ff5c 	bl	8007204 <pbuf_clen>
 800c34c:	4603      	mov	r3, r0
 800c34e:	461a      	mov	r2, r3
 800c350:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800c354:	4413      	add	r3, r2
 800c356:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800c35a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800c35e:	2b09      	cmp	r3, #9
 800c360:	d903      	bls.n	800c36a <tcp_write+0x466>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800c362:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c364:	f7fa fec6 	bl	80070f4 <pbuf_free>
      goto memerr;
 800c368:	e150      	b.n	800c60c <tcp_write+0x708>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c36e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800c372:	441a      	add	r2, r3
 800c374:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c378:	9300      	str	r3, [sp, #0]
 800c37a:	4613      	mov	r3, r2
 800c37c:	2200      	movs	r2, #0
 800c37e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c380:	68f8      	ldr	r0, [r7, #12]
 800c382:	f7ff fc2b 	bl	800bbdc <tcp_create_segment>
 800c386:	6578      	str	r0, [r7, #84]	@ 0x54
 800c388:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	f000 813d 	beq.w	800c60a <tcp_write+0x706>
      goto memerr;
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = oversize;
 800c390:	8afa      	ldrh	r2, [r7, #22]
 800c392:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c394:	815a      	strh	r2, [r3, #10]
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800c396:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d102      	bne.n	800c3a2 <tcp_write+0x49e>
      queue = seg;
 800c39c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c39e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c3a0:	e00c      	b.n	800c3bc <tcp_write+0x4b8>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800c3a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d106      	bne.n	800c3b6 <tcp_write+0x4b2>
 800c3a8:	4b17      	ldr	r3, [pc, #92]	@ (800c408 <tcp_write+0x504>)
 800c3aa:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800c3ae:	491b      	ldr	r1, [pc, #108]	@ (800c41c <tcp_write+0x518>)
 800c3b0:	4817      	ldr	r0, [pc, #92]	@ (800c410 <tcp_write+0x50c>)
 800c3b2:	f004 fb23 	bl	80109fc <iprintf>
      prev_seg->next = seg;
 800c3b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c3ba:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800c3bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c3be:	653b      	str	r3, [r7, #80]	@ 0x50

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800c3c0:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 800c3c4:	8bbb      	ldrh	r3, [r7, #28]
 800c3c6:	4413      	add	r3, r2
 800c3c8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
  while (pos < len) {
 800c3cc:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 800c3d0:	88fb      	ldrh	r3, [r7, #6]
 800c3d2:	429a      	cmp	r2, r3
 800c3d4:	f4ff af3a 	bcc.w	800c24c <tcp_write+0x348>
  /*
   * All three segmentation phases were successful. We can commit the
   * transaction.
   */
#if TCP_OVERSIZE_DBGCHECK
  if ((last_unsent != NULL) && (oversize_add != 0)) {
 800c3d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d00b      	beq.n	800c3f6 <tcp_write+0x4f2>
 800c3de:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d007      	beq.n	800c3f6 <tcp_write+0x4f2>
    last_unsent->oversize_left += oversize_add;
 800c3e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c3e8:	895a      	ldrh	r2, [r3, #10]
 800c3ea:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800c3ee:	4413      	add	r3, r2
 800c3f0:	b29a      	uxth	r2, r3
 800c3f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c3f4:	815a      	strh	r2, [r3, #10]
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800c3f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d052      	beq.n	800c4a4 <tcp_write+0x5a0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800c3fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c400:	685b      	ldr	r3, [r3, #4]
 800c402:	633b      	str	r3, [r7, #48]	@ 0x30
 800c404:	e02e      	b.n	800c464 <tcp_write+0x560>
 800c406:	bf00      	nop
 800c408:	08013988 	.word	0x08013988
 800c40c:	08013c28 	.word	0x08013c28
 800c410:	080139dc 	.word	0x080139dc
 800c414:	08013c58 	.word	0x08013c58
 800c418:	08013c98 	.word	0x08013c98
 800c41c:	08013ca8 	.word	0x08013ca8
      p->tot_len += oversize_used;
 800c420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c422:	891a      	ldrh	r2, [r3, #8]
 800c424:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800c428:	4413      	add	r3, r2
 800c42a:	b29a      	uxth	r2, r3
 800c42c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c42e:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800c430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d112      	bne.n	800c45e <tcp_write+0x55a>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800c438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c43a:	685b      	ldr	r3, [r3, #4]
 800c43c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c43e:	8952      	ldrh	r2, [r2, #10]
 800c440:	4413      	add	r3, r2
 800c442:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800c446:	68b9      	ldr	r1, [r7, #8]
 800c448:	4618      	mov	r0, r3
 800c44a:	f004 fcac 	bl	8010da6 <memcpy>
        p->len += oversize_used;
 800c44e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c450:	895a      	ldrh	r2, [r3, #10]
 800c452:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800c456:	4413      	add	r3, r2
 800c458:	b29a      	uxth	r2, r3
 800c45a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c45c:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800c45e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	633b      	str	r3, [r7, #48]	@ 0x30
 800c464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c466:	2b00      	cmp	r3, #0
 800c468:	d1da      	bne.n	800c420 <tcp_write+0x51c>
      }
    }
    last_unsent->len += oversize_used;
 800c46a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c46c:	891a      	ldrh	r2, [r3, #8]
 800c46e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800c472:	4413      	add	r3, r2
 800c474:	b29a      	uxth	r2, r3
 800c476:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c478:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 800c47a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c47c:	895b      	ldrh	r3, [r3, #10]
 800c47e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800c482:	429a      	cmp	r2, r3
 800c484:	d906      	bls.n	800c494 <tcp_write+0x590>
 800c486:	4b78      	ldr	r3, [pc, #480]	@ (800c668 <tcp_write+0x764>)
 800c488:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800c48c:	4977      	ldr	r1, [pc, #476]	@ (800c66c <tcp_write+0x768>)
 800c48e:	4878      	ldr	r0, [pc, #480]	@ (800c670 <tcp_write+0x76c>)
 800c490:	f004 fab4 	bl	80109fc <iprintf>
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
 800c494:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c496:	895a      	ldrh	r2, [r3, #10]
 800c498:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800c49c:	1ad3      	subs	r3, r2, r3
 800c49e:	b29a      	uxth	r2, r3
 800c4a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4a2:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800c4a4:	8afa      	ldrh	r2, [r7, #22]
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800c4ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d018      	beq.n	800c4e4 <tcp_write+0x5e0>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800c4b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d106      	bne.n	800c4c6 <tcp_write+0x5c2>
 800c4b8:	4b6b      	ldr	r3, [pc, #428]	@ (800c668 <tcp_write+0x764>)
 800c4ba:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 800c4be:	496d      	ldr	r1, [pc, #436]	@ (800c674 <tcp_write+0x770>)
 800c4c0:	486b      	ldr	r0, [pc, #428]	@ (800c670 <tcp_write+0x76c>)
 800c4c2:	f004 fa9b 	bl	80109fc <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800c4c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4c8:	685b      	ldr	r3, [r3, #4]
 800c4ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f7fa fed3 	bl	8007278 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800c4d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4d4:	891a      	ldrh	r2, [r3, #8]
 800c4d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4d8:	891b      	ldrh	r3, [r3, #8]
 800c4da:	4413      	add	r3, r2
 800c4dc:	b29a      	uxth	r2, r3
 800c4de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4e0:	811a      	strh	r2, [r3, #8]
 800c4e2:	e03c      	b.n	800c55e <tcp_write+0x65a>
  } else if (extendlen > 0) {
 800c4e4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d038      	beq.n	800c55e <tcp_write+0x65a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800c4ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d003      	beq.n	800c4fa <tcp_write+0x5f6>
 800c4f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4f4:	685b      	ldr	r3, [r3, #4]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d106      	bne.n	800c508 <tcp_write+0x604>
 800c4fa:	4b5b      	ldr	r3, [pc, #364]	@ (800c668 <tcp_write+0x764>)
 800c4fc:	f240 22e6 	movw	r2, #742	@ 0x2e6
 800c500:	495d      	ldr	r1, [pc, #372]	@ (800c678 <tcp_write+0x774>)
 800c502:	485b      	ldr	r0, [pc, #364]	@ (800c670 <tcp_write+0x76c>)
 800c504:	f004 fa7a 	bl	80109fc <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c508:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c50a:	685b      	ldr	r3, [r3, #4]
 800c50c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c50e:	e00a      	b.n	800c526 <tcp_write+0x622>
      p->tot_len += extendlen;
 800c510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c512:	891a      	ldrh	r2, [r3, #8]
 800c514:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800c518:	4413      	add	r3, r2
 800c51a:	b29a      	uxth	r2, r3
 800c51c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c51e:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d1f0      	bne.n	800c510 <tcp_write+0x60c>
    }
    p->tot_len += extendlen;
 800c52e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c530:	891a      	ldrh	r2, [r3, #8]
 800c532:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800c536:	4413      	add	r3, r2
 800c538:	b29a      	uxth	r2, r3
 800c53a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c53c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800c53e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c540:	895a      	ldrh	r2, [r3, #10]
 800c542:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800c546:	4413      	add	r3, r2
 800c548:	b29a      	uxth	r2, r3
 800c54a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c54c:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800c54e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c550:	891a      	ldrh	r2, [r3, #8]
 800c552:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800c556:	4413      	add	r3, r2
 800c558:	b29a      	uxth	r2, r3
 800c55a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c55c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800c55e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c560:	2b00      	cmp	r3, #0
 800c562:	d103      	bne.n	800c56c <tcp_write+0x668>
    pcb->unsent = queue;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c568:	66da      	str	r2, [r3, #108]	@ 0x6c
 800c56a:	e002      	b.n	800c572 <tcp_write+0x66e>
  } else {
    last_unsent->next = queue;
 800c56c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c56e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c570:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c576:	88fb      	ldrh	r3, [r7, #6]
 800c578:	441a      	add	r2, r3
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800c584:	88fb      	ldrh	r3, [r7, #6]
 800c586:	1ad3      	subs	r3, r2, r3
 800c588:	b29a      	uxth	r2, r3
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800c596:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d00e      	beq.n	800c5c2 <tcp_write+0x6be>
    LWIP_ASSERT("tcp_write: valid queue length",
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d10a      	bne.n	800c5c2 <tcp_write+0x6be>
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d106      	bne.n	800c5c2 <tcp_write+0x6be>
 800c5b4:	4b2c      	ldr	r3, [pc, #176]	@ (800c668 <tcp_write+0x764>)
 800c5b6:	f240 3212 	movw	r2, #786	@ 0x312
 800c5ba:	4930      	ldr	r1, [pc, #192]	@ (800c67c <tcp_write+0x778>)
 800c5bc:	482c      	ldr	r0, [pc, #176]	@ (800c670 <tcp_write+0x76c>)
 800c5be:	f004 fa1d 	bl	80109fc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800c5c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d016      	beq.n	800c5f6 <tcp_write+0x6f2>
 800c5c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5ca:	691b      	ldr	r3, [r3, #16]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d012      	beq.n	800c5f6 <tcp_write+0x6f2>
 800c5d0:	797b      	ldrb	r3, [r7, #5]
 800c5d2:	f003 0302 	and.w	r3, r3, #2
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d10d      	bne.n	800c5f6 <tcp_write+0x6f2>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800c5da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5dc:	691b      	ldr	r3, [r3, #16]
 800c5de:	899b      	ldrh	r3, [r3, #12]
 800c5e0:	b29c      	uxth	r4, r3
 800c5e2:	2008      	movs	r0, #8
 800c5e4:	f7f9 fa28 	bl	8005a38 <lwip_htons>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5ee:	691b      	ldr	r3, [r3, #16]
 800c5f0:	4322      	orrs	r2, r4
 800c5f2:	b292      	uxth	r2, r2
 800c5f4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	e031      	b.n	800c65e <tcp_write+0x75a>
          goto memerr;
 800c5fa:	bf00      	nop
 800c5fc:	e006      	b.n	800c60c <tcp_write+0x708>
            goto memerr;
 800c5fe:	bf00      	nop
 800c600:	e004      	b.n	800c60c <tcp_write+0x708>
        goto memerr;
 800c602:	bf00      	nop
 800c604:	e002      	b.n	800c60c <tcp_write+0x708>
        goto memerr;
 800c606:	bf00      	nop
 800c608:	e000      	b.n	800c60c <tcp_write+0x708>
      goto memerr;
 800c60a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	8b5b      	ldrh	r3, [r3, #26]
 800c610:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c614:	b29a      	uxth	r2, r3
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800c61a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d002      	beq.n	800c626 <tcp_write+0x722>
    pbuf_free(concat_p);
 800c620:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c622:	f7fa fd67 	bl	80070f4 <pbuf_free>
  }
  if (queue != NULL) {
 800c626:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d002      	beq.n	800c632 <tcp_write+0x72e>
    tcp_segs_free(queue);
 800c62c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800c62e:	f7fc f9f7 	bl	8008a20 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d00e      	beq.n	800c65a <tcp_write+0x756>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c640:	2b00      	cmp	r3, #0
 800c642:	d10a      	bne.n	800c65a <tcp_write+0x756>
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d106      	bne.n	800c65a <tcp_write+0x756>
 800c64c:	4b06      	ldr	r3, [pc, #24]	@ (800c668 <tcp_write+0x764>)
 800c64e:	f240 3227 	movw	r2, #807	@ 0x327
 800c652:	490a      	ldr	r1, [pc, #40]	@ (800c67c <tcp_write+0x778>)
 800c654:	4806      	ldr	r0, [pc, #24]	@ (800c670 <tcp_write+0x76c>)
 800c656:	f004 f9d1 	bl	80109fc <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800c65a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3764      	adds	r7, #100	@ 0x64
 800c662:	46bd      	mov	sp, r7
 800c664:	bd90      	pop	{r4, r7, pc}
 800c666:	bf00      	nop
 800c668:	08013988 	.word	0x08013988
 800c66c:	08013cbc 	.word	0x08013cbc
 800c670:	080139dc 	.word	0x080139dc
 800c674:	08013ce8 	.word	0x08013ce8
 800c678:	08013d20 	.word	0x08013d20
 800c67c:	08013d58 	.word	0x08013d58

0800c680 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800c680:	b590      	push	{r4, r7, lr}
 800c682:	b08b      	sub	sp, #44	@ 0x2c
 800c684:	af02      	add	r7, sp, #8
 800c686:	6078      	str	r0, [r7, #4]
 800c688:	460b      	mov	r3, r1
 800c68a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800c68c:	2300      	movs	r3, #0
 800c68e:	61bb      	str	r3, [r7, #24]
 800c690:	2300      	movs	r3, #0
 800c692:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c694:	2300      	movs	r3, #0
 800c696:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d106      	bne.n	800c6ac <tcp_split_unsent_seg+0x2c>
 800c69e:	4b97      	ldr	r3, [pc, #604]	@ (800c8fc <tcp_split_unsent_seg+0x27c>)
 800c6a0:	f240 324b 	movw	r2, #843	@ 0x34b
 800c6a4:	4996      	ldr	r1, [pc, #600]	@ (800c900 <tcp_split_unsent_seg+0x280>)
 800c6a6:	4897      	ldr	r0, [pc, #604]	@ (800c904 <tcp_split_unsent_seg+0x284>)
 800c6a8:	f004 f9a8 	bl	80109fc <iprintf>

  useg = pcb->unsent;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c6b0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d102      	bne.n	800c6be <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800c6b8:	f04f 33ff 	mov.w	r3, #4294967295
 800c6bc:	e119      	b.n	800c8f2 <tcp_split_unsent_seg+0x272>
  }

  if (split == 0) {
 800c6be:	887b      	ldrh	r3, [r7, #2]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d109      	bne.n	800c6d8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800c6c4:	4b8d      	ldr	r3, [pc, #564]	@ (800c8fc <tcp_split_unsent_seg+0x27c>)
 800c6c6:	f240 3253 	movw	r2, #851	@ 0x353
 800c6ca:	498f      	ldr	r1, [pc, #572]	@ (800c908 <tcp_split_unsent_seg+0x288>)
 800c6cc:	488d      	ldr	r0, [pc, #564]	@ (800c904 <tcp_split_unsent_seg+0x284>)
 800c6ce:	f004 f995 	bl	80109fc <iprintf>
    return ERR_VAL;
 800c6d2:	f06f 0305 	mvn.w	r3, #5
 800c6d6:	e10c      	b.n	800c8f2 <tcp_split_unsent_seg+0x272>
  }

  if (useg->len <= split) {
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	891b      	ldrh	r3, [r3, #8]
 800c6dc:	887a      	ldrh	r2, [r7, #2]
 800c6de:	429a      	cmp	r2, r3
 800c6e0:	d301      	bcc.n	800c6e6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	e105      	b.n	800c8f2 <tcp_split_unsent_seg+0x272>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c6ea:	887a      	ldrh	r2, [r7, #2]
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	d906      	bls.n	800c6fe <tcp_split_unsent_seg+0x7e>
 800c6f0:	4b82      	ldr	r3, [pc, #520]	@ (800c8fc <tcp_split_unsent_seg+0x27c>)
 800c6f2:	f240 325b 	movw	r2, #859	@ 0x35b
 800c6f6:	4985      	ldr	r1, [pc, #532]	@ (800c90c <tcp_split_unsent_seg+0x28c>)
 800c6f8:	4882      	ldr	r0, [pc, #520]	@ (800c904 <tcp_split_unsent_seg+0x284>)
 800c6fa:	f004 f97f 	bl	80109fc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800c6fe:	697b      	ldr	r3, [r7, #20]
 800c700:	891b      	ldrh	r3, [r3, #8]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d106      	bne.n	800c714 <tcp_split_unsent_seg+0x94>
 800c706:	4b7d      	ldr	r3, [pc, #500]	@ (800c8fc <tcp_split_unsent_seg+0x27c>)
 800c708:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800c70c:	4980      	ldr	r1, [pc, #512]	@ (800c910 <tcp_split_unsent_seg+0x290>)
 800c70e:	487d      	ldr	r0, [pc, #500]	@ (800c904 <tcp_split_unsent_seg+0x284>)
 800c710:	f004 f974 	bl	80109fc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800c714:	697b      	ldr	r3, [r7, #20]
 800c716:	7b1b      	ldrb	r3, [r3, #12]
 800c718:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c71a:	7bfb      	ldrb	r3, [r7, #15]
 800c71c:	009b      	lsls	r3, r3, #2
 800c71e:	b2db      	uxtb	r3, r3
 800c720:	f003 0304 	and.w	r3, r3, #4
 800c724:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	891a      	ldrh	r2, [r3, #8]
 800c72a:	887b      	ldrh	r3, [r7, #2]
 800c72c:	1ad3      	subs	r3, r2, r3
 800c72e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c730:	7bbb      	ldrb	r3, [r7, #14]
 800c732:	b29a      	uxth	r2, r3
 800c734:	89bb      	ldrh	r3, [r7, #12]
 800c736:	4413      	add	r3, r2
 800c738:	b29b      	uxth	r3, r3
 800c73a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c73e:	4619      	mov	r1, r3
 800c740:	2036      	movs	r0, #54	@ 0x36
 800c742:	f7fa f9f3 	bl	8006b2c <pbuf_alloc>
 800c746:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c748:	693b      	ldr	r3, [r7, #16]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	f000 80ba 	beq.w	800c8c4 <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	685b      	ldr	r3, [r3, #4]
 800c754:	891a      	ldrh	r2, [r3, #8]
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	891b      	ldrh	r3, [r3, #8]
 800c75a:	1ad3      	subs	r3, r2, r3
 800c75c:	b29a      	uxth	r2, r3
 800c75e:	887b      	ldrh	r3, [r7, #2]
 800c760:	4413      	add	r3, r2
 800c762:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	6858      	ldr	r0, [r3, #4]
 800c768:	693b      	ldr	r3, [r7, #16]
 800c76a:	685a      	ldr	r2, [r3, #4]
 800c76c:	7bbb      	ldrb	r3, [r7, #14]
 800c76e:	18d1      	adds	r1, r2, r3
 800c770:	897b      	ldrh	r3, [r7, #10]
 800c772:	89ba      	ldrh	r2, [r7, #12]
 800c774:	f7fa fea8 	bl	80074c8 <pbuf_copy_partial>
 800c778:	4603      	mov	r3, r0
 800c77a:	461a      	mov	r2, r3
 800c77c:	89bb      	ldrh	r3, [r7, #12]
 800c77e:	4293      	cmp	r3, r2
 800c780:	f040 80a2 	bne.w	800c8c8 <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	691b      	ldr	r3, [r3, #16]
 800c788:	899b      	ldrh	r3, [r3, #12]
 800c78a:	b29b      	uxth	r3, r3
 800c78c:	4618      	mov	r0, r3
 800c78e:	f7f9 f953 	bl	8005a38 <lwip_htons>
 800c792:	4603      	mov	r3, r0
 800c794:	b2db      	uxtb	r3, r3
 800c796:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c79a:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800c79c:	2300      	movs	r3, #0
 800c79e:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 800c7a0:	7ffb      	ldrb	r3, [r7, #31]
 800c7a2:	f003 0308 	and.w	r3, r3, #8
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d007      	beq.n	800c7ba <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800c7aa:	7ffb      	ldrb	r3, [r7, #31]
 800c7ac:	f023 0308 	bic.w	r3, r3, #8
 800c7b0:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 800c7b2:	7fbb      	ldrb	r3, [r7, #30]
 800c7b4:	f043 0308 	orr.w	r3, r3, #8
 800c7b8:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 800c7ba:	7ffb      	ldrb	r3, [r7, #31]
 800c7bc:	f003 0301 	and.w	r3, r3, #1
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d007      	beq.n	800c7d4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800c7c4:	7ffb      	ldrb	r3, [r7, #31]
 800c7c6:	f023 0301 	bic.w	r3, r3, #1
 800c7ca:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 800c7cc:	7fbb      	ldrb	r3, [r7, #30]
 800c7ce:	f043 0301 	orr.w	r3, r3, #1
 800c7d2:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	691b      	ldr	r3, [r3, #16]
 800c7d8:	685b      	ldr	r3, [r3, #4]
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f7f9 f941 	bl	8005a62 <lwip_htonl>
 800c7e0:	4602      	mov	r2, r0
 800c7e2:	887b      	ldrh	r3, [r7, #2]
 800c7e4:	18d1      	adds	r1, r2, r3
 800c7e6:	7fba      	ldrb	r2, [r7, #30]
 800c7e8:	7bfb      	ldrb	r3, [r7, #15]
 800c7ea:	9300      	str	r3, [sp, #0]
 800c7ec:	460b      	mov	r3, r1
 800c7ee:	6939      	ldr	r1, [r7, #16]
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f7ff f9f3 	bl	800bbdc <tcp_create_segment>
 800c7f6:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 800c7f8:	69bb      	ldr	r3, [r7, #24]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d066      	beq.n	800c8cc <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	685b      	ldr	r3, [r3, #4]
 800c802:	4618      	mov	r0, r3
 800c804:	f7fa fcfe 	bl	8007204 <pbuf_clen>
 800c808:	4603      	mov	r3, r0
 800c80a:	461a      	mov	r2, r3
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c812:	1a9b      	subs	r3, r3, r2
 800c814:	b29a      	uxth	r2, r3
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	6858      	ldr	r0, [r3, #4]
 800c820:	697b      	ldr	r3, [r7, #20]
 800c822:	685b      	ldr	r3, [r3, #4]
 800c824:	891a      	ldrh	r2, [r3, #8]
 800c826:	89bb      	ldrh	r3, [r7, #12]
 800c828:	1ad3      	subs	r3, r2, r3
 800c82a:	b29b      	uxth	r3, r3
 800c82c:	4619      	mov	r1, r3
 800c82e:	f7fa fadb 	bl	8006de8 <pbuf_realloc>
  useg->len -= remainder;
 800c832:	697b      	ldr	r3, [r7, #20]
 800c834:	891a      	ldrh	r2, [r3, #8]
 800c836:	89bb      	ldrh	r3, [r7, #12]
 800c838:	1ad3      	subs	r3, r2, r3
 800c83a:	b29a      	uxth	r2, r3
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	691b      	ldr	r3, [r3, #16]
 800c844:	899b      	ldrh	r3, [r3, #12]
 800c846:	b29c      	uxth	r4, r3
 800c848:	7ffb      	ldrb	r3, [r7, #31]
 800c84a:	b29b      	uxth	r3, r3
 800c84c:	4618      	mov	r0, r3
 800c84e:	f7f9 f8f3 	bl	8005a38 <lwip_htons>
 800c852:	4603      	mov	r3, r0
 800c854:	461a      	mov	r2, r3
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	691b      	ldr	r3, [r3, #16]
 800c85a:	4322      	orrs	r2, r4
 800c85c:	b292      	uxth	r2, r2
 800c85e:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	2200      	movs	r2, #0
 800c864:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	685b      	ldr	r3, [r3, #4]
 800c86a:	4618      	mov	r0, r3
 800c86c:	f7fa fcca 	bl	8007204 <pbuf_clen>
 800c870:	4603      	mov	r3, r0
 800c872:	461a      	mov	r2, r3
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c87a:	4413      	add	r3, r2
 800c87c:	b29a      	uxth	r2, r3
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c884:	69bb      	ldr	r3, [r7, #24]
 800c886:	685b      	ldr	r3, [r3, #4]
 800c888:	4618      	mov	r0, r3
 800c88a:	f7fa fcbb 	bl	8007204 <pbuf_clen>
 800c88e:	4603      	mov	r3, r0
 800c890:	461a      	mov	r2, r3
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c898:	4413      	add	r3, r2
 800c89a:	b29a      	uxth	r2, r3
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	681a      	ldr	r2, [r3, #0]
 800c8a6:	69bb      	ldr	r3, [r7, #24]
 800c8a8:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	69ba      	ldr	r2, [r7, #24]
 800c8ae:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800c8b0:	69bb      	ldr	r3, [r7, #24]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d103      	bne.n	800c8c0 <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	e016      	b.n	800c8f2 <tcp_split_unsent_seg+0x272>
    goto memerr;
 800c8c4:	bf00      	nop
 800c8c6:	e002      	b.n	800c8ce <tcp_split_unsent_seg+0x24e>
    goto memerr;
 800c8c8:	bf00      	nop
 800c8ca:	e000      	b.n	800c8ce <tcp_split_unsent_seg+0x24e>
    goto memerr;
 800c8cc:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800c8ce:	69bb      	ldr	r3, [r7, #24]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d006      	beq.n	800c8e2 <tcp_split_unsent_seg+0x262>
 800c8d4:	4b09      	ldr	r3, [pc, #36]	@ (800c8fc <tcp_split_unsent_seg+0x27c>)
 800c8d6:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800c8da:	490e      	ldr	r1, [pc, #56]	@ (800c914 <tcp_split_unsent_seg+0x294>)
 800c8dc:	4809      	ldr	r0, [pc, #36]	@ (800c904 <tcp_split_unsent_seg+0x284>)
 800c8de:	f004 f88d 	bl	80109fc <iprintf>
  if (p != NULL) {
 800c8e2:	693b      	ldr	r3, [r7, #16]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d002      	beq.n	800c8ee <tcp_split_unsent_seg+0x26e>
    pbuf_free(p);
 800c8e8:	6938      	ldr	r0, [r7, #16]
 800c8ea:	f7fa fc03 	bl	80070f4 <pbuf_free>
  }

  return ERR_MEM;
 800c8ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3724      	adds	r7, #36	@ 0x24
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd90      	pop	{r4, r7, pc}
 800c8fa:	bf00      	nop
 800c8fc:	08013988 	.word	0x08013988
 800c900:	08013d78 	.word	0x08013d78
 800c904:	080139dc 	.word	0x080139dc
 800c908:	08013d9c 	.word	0x08013d9c
 800c90c:	08013dc0 	.word	0x08013dc0
 800c910:	08013dd0 	.word	0x08013dd0
 800c914:	08013de0 	.word	0x08013de0

0800c918 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800c918:	b590      	push	{r4, r7, lr}
 800c91a:	b085      	sub	sp, #20
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d106      	bne.n	800c934 <tcp_send_fin+0x1c>
 800c926:	4b21      	ldr	r3, [pc, #132]	@ (800c9ac <tcp_send_fin+0x94>)
 800c928:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800c92c:	4920      	ldr	r1, [pc, #128]	@ (800c9b0 <tcp_send_fin+0x98>)
 800c92e:	4821      	ldr	r0, [pc, #132]	@ (800c9b4 <tcp_send_fin+0x9c>)
 800c930:	f004 f864 	bl	80109fc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d02e      	beq.n	800c99a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c940:	60fb      	str	r3, [r7, #12]
 800c942:	e002      	b.n	800c94a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d1f8      	bne.n	800c944 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	691b      	ldr	r3, [r3, #16]
 800c956:	899b      	ldrh	r3, [r3, #12]
 800c958:	b29b      	uxth	r3, r3
 800c95a:	4618      	mov	r0, r3
 800c95c:	f7f9 f86c 	bl	8005a38 <lwip_htons>
 800c960:	4603      	mov	r3, r0
 800c962:	b2db      	uxtb	r3, r3
 800c964:	f003 0307 	and.w	r3, r3, #7
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d116      	bne.n	800c99a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	691b      	ldr	r3, [r3, #16]
 800c970:	899b      	ldrh	r3, [r3, #12]
 800c972:	b29c      	uxth	r4, r3
 800c974:	2001      	movs	r0, #1
 800c976:	f7f9 f85f 	bl	8005a38 <lwip_htons>
 800c97a:	4603      	mov	r3, r0
 800c97c:	461a      	mov	r2, r3
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	691b      	ldr	r3, [r3, #16]
 800c982:	4322      	orrs	r2, r4
 800c984:	b292      	uxth	r2, r2
 800c986:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	8b5b      	ldrh	r3, [r3, #26]
 800c98c:	f043 0320 	orr.w	r3, r3, #32
 800c990:	b29a      	uxth	r2, r3
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800c996:	2300      	movs	r3, #0
 800c998:	e004      	b.n	800c9a4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c99a:	2101      	movs	r1, #1
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f000 f80b 	bl	800c9b8 <tcp_enqueue_flags>
 800c9a2:	4603      	mov	r3, r0
}
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	3714      	adds	r7, #20
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bd90      	pop	{r4, r7, pc}
 800c9ac:	08013988 	.word	0x08013988
 800c9b0:	08013dec 	.word	0x08013dec
 800c9b4:	080139dc 	.word	0x080139dc

0800c9b8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b088      	sub	sp, #32
 800c9bc:	af02      	add	r7, sp, #8
 800c9be:	6078      	str	r0, [r7, #4]
 800c9c0:	460b      	mov	r3, r1
 800c9c2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c9cc:	78fb      	ldrb	r3, [r7, #3]
 800c9ce:	f003 0303 	and.w	r3, r3, #3
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d106      	bne.n	800c9e4 <tcp_enqueue_flags+0x2c>
 800c9d6:	4b67      	ldr	r3, [pc, #412]	@ (800cb74 <tcp_enqueue_flags+0x1bc>)
 800c9d8:	f240 4211 	movw	r2, #1041	@ 0x411
 800c9dc:	4966      	ldr	r1, [pc, #408]	@ (800cb78 <tcp_enqueue_flags+0x1c0>)
 800c9de:	4867      	ldr	r0, [pc, #412]	@ (800cb7c <tcp_enqueue_flags+0x1c4>)
 800c9e0:	f004 f80c 	bl	80109fc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d106      	bne.n	800c9f8 <tcp_enqueue_flags+0x40>
 800c9ea:	4b62      	ldr	r3, [pc, #392]	@ (800cb74 <tcp_enqueue_flags+0x1bc>)
 800c9ec:	f240 4213 	movw	r2, #1043	@ 0x413
 800c9f0:	4963      	ldr	r1, [pc, #396]	@ (800cb80 <tcp_enqueue_flags+0x1c8>)
 800c9f2:	4862      	ldr	r0, [pc, #392]	@ (800cb7c <tcp_enqueue_flags+0x1c4>)
 800c9f4:	f004 f802 	bl	80109fc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800c9f8:	78fb      	ldrb	r3, [r7, #3]
 800c9fa:	f003 0302 	and.w	r3, r3, #2
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d001      	beq.n	800ca06 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800ca02:	2301      	movs	r3, #1
 800ca04:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ca06:	7dfb      	ldrb	r3, [r7, #23]
 800ca08:	009b      	lsls	r3, r3, #2
 800ca0a:	b2db      	uxtb	r3, r3
 800ca0c:	f003 0304 	and.w	r3, r3, #4
 800ca10:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ca12:	7dbb      	ldrb	r3, [r7, #22]
 800ca14:	b29b      	uxth	r3, r3
 800ca16:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ca1a:	4619      	mov	r1, r3
 800ca1c:	2036      	movs	r0, #54	@ 0x36
 800ca1e:	f7fa f885 	bl	8006b2c <pbuf_alloc>
 800ca22:	60f8      	str	r0, [r7, #12]
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d109      	bne.n	800ca3e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	8b5b      	ldrh	r3, [r3, #26]
 800ca2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca32:	b29a      	uxth	r2, r3
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ca38:	f04f 33ff 	mov.w	r3, #4294967295
 800ca3c:	e095      	b.n	800cb6a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	895a      	ldrh	r2, [r3, #10]
 800ca42:	7dbb      	ldrb	r3, [r7, #22]
 800ca44:	b29b      	uxth	r3, r3
 800ca46:	429a      	cmp	r2, r3
 800ca48:	d206      	bcs.n	800ca58 <tcp_enqueue_flags+0xa0>
 800ca4a:	4b4a      	ldr	r3, [pc, #296]	@ (800cb74 <tcp_enqueue_flags+0x1bc>)
 800ca4c:	f240 4239 	movw	r2, #1081	@ 0x439
 800ca50:	494c      	ldr	r1, [pc, #304]	@ (800cb84 <tcp_enqueue_flags+0x1cc>)
 800ca52:	484a      	ldr	r0, [pc, #296]	@ (800cb7c <tcp_enqueue_flags+0x1c4>)
 800ca54:	f003 ffd2 	bl	80109fc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800ca5c:	78fa      	ldrb	r2, [r7, #3]
 800ca5e:	7dfb      	ldrb	r3, [r7, #23]
 800ca60:	9300      	str	r3, [sp, #0]
 800ca62:	460b      	mov	r3, r1
 800ca64:	68f9      	ldr	r1, [r7, #12]
 800ca66:	6878      	ldr	r0, [r7, #4]
 800ca68:	f7ff f8b8 	bl	800bbdc <tcp_create_segment>
 800ca6c:	60b8      	str	r0, [r7, #8]
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d109      	bne.n	800ca88 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	8b5b      	ldrh	r3, [r3, #26]
 800ca78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca7c:	b29a      	uxth	r2, r3
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ca82:	f04f 33ff 	mov.w	r3, #4294967295
 800ca86:	e070      	b.n	800cb6a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	691b      	ldr	r3, [r3, #16]
 800ca8c:	f003 0303 	and.w	r3, r3, #3
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d006      	beq.n	800caa2 <tcp_enqueue_flags+0xea>
 800ca94:	4b37      	ldr	r3, [pc, #220]	@ (800cb74 <tcp_enqueue_flags+0x1bc>)
 800ca96:	f240 4242 	movw	r2, #1090	@ 0x442
 800ca9a:	493b      	ldr	r1, [pc, #236]	@ (800cb88 <tcp_enqueue_flags+0x1d0>)
 800ca9c:	4837      	ldr	r0, [pc, #220]	@ (800cb7c <tcp_enqueue_flags+0x1c4>)
 800ca9e:	f003 ffad 	bl	80109fc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	891b      	ldrh	r3, [r3, #8]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d006      	beq.n	800cab8 <tcp_enqueue_flags+0x100>
 800caaa:	4b32      	ldr	r3, [pc, #200]	@ (800cb74 <tcp_enqueue_flags+0x1bc>)
 800caac:	f240 4243 	movw	r2, #1091	@ 0x443
 800cab0:	4936      	ldr	r1, [pc, #216]	@ (800cb8c <tcp_enqueue_flags+0x1d4>)
 800cab2:	4832      	ldr	r0, [pc, #200]	@ (800cb7c <tcp_enqueue_flags+0x1c4>)
 800cab4:	f003 ffa2 	bl	80109fc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d103      	bne.n	800cac8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	68ba      	ldr	r2, [r7, #8]
 800cac4:	66da      	str	r2, [r3, #108]	@ 0x6c
 800cac6:	e00d      	b.n	800cae4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cacc:	613b      	str	r3, [r7, #16]
 800cace:	e002      	b.n	800cad6 <tcp_enqueue_flags+0x11e>
 800cad0:	693b      	ldr	r3, [r7, #16]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	613b      	str	r3, [r7, #16]
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d1f8      	bne.n	800cad0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800cade:	693b      	ldr	r3, [r7, #16]
 800cae0:	68ba      	ldr	r2, [r7, #8]
 800cae2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2200      	movs	r2, #0
 800cae8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800caec:	78fb      	ldrb	r3, [r7, #3]
 800caee:	f003 0302 	and.w	r3, r3, #2
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d104      	bne.n	800cb00 <tcp_enqueue_flags+0x148>
 800caf6:	78fb      	ldrb	r3, [r7, #3]
 800caf8:	f003 0301 	and.w	r3, r3, #1
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d004      	beq.n	800cb0a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cb04:	1c5a      	adds	r2, r3, #1
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800cb0a:	78fb      	ldrb	r3, [r7, #3]
 800cb0c:	f003 0301 	and.w	r3, r3, #1
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d006      	beq.n	800cb22 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	8b5b      	ldrh	r3, [r3, #26]
 800cb18:	f043 0320 	orr.w	r3, r3, #32
 800cb1c:	b29a      	uxth	r2, r3
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	685b      	ldr	r3, [r3, #4]
 800cb26:	4618      	mov	r0, r3
 800cb28:	f7fa fb6c 	bl	8007204 <pbuf_clen>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	461a      	mov	r2, r3
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cb36:	4413      	add	r3, r2
 800cb38:	b29a      	uxth	r2, r3
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d00e      	beq.n	800cb68 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d10a      	bne.n	800cb68 <tcp_enqueue_flags+0x1b0>
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d106      	bne.n	800cb68 <tcp_enqueue_flags+0x1b0>
 800cb5a:	4b06      	ldr	r3, [pc, #24]	@ (800cb74 <tcp_enqueue_flags+0x1bc>)
 800cb5c:	f240 4265 	movw	r2, #1125	@ 0x465
 800cb60:	490b      	ldr	r1, [pc, #44]	@ (800cb90 <tcp_enqueue_flags+0x1d8>)
 800cb62:	4806      	ldr	r0, [pc, #24]	@ (800cb7c <tcp_enqueue_flags+0x1c4>)
 800cb64:	f003 ff4a 	bl	80109fc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800cb68:	2300      	movs	r3, #0
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	3718      	adds	r7, #24
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}
 800cb72:	bf00      	nop
 800cb74:	08013988 	.word	0x08013988
 800cb78:	08013e08 	.word	0x08013e08
 800cb7c:	080139dc 	.word	0x080139dc
 800cb80:	08013e60 	.word	0x08013e60
 800cb84:	08013e80 	.word	0x08013e80
 800cb88:	08013ebc 	.word	0x08013ebc
 800cb8c:	08013ed4 	.word	0x08013ed4
 800cb90:	08013f00 	.word	0x08013f00

0800cb94 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800cb94:	b5b0      	push	{r4, r5, r7, lr}
 800cb96:	b08a      	sub	sp, #40	@ 0x28
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d106      	bne.n	800cbb0 <tcp_output+0x1c>
 800cba2:	4b8a      	ldr	r3, [pc, #552]	@ (800cdcc <tcp_output+0x238>)
 800cba4:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800cba8:	4989      	ldr	r1, [pc, #548]	@ (800cdd0 <tcp_output+0x23c>)
 800cbaa:	488a      	ldr	r0, [pc, #552]	@ (800cdd4 <tcp_output+0x240>)
 800cbac:	f003 ff26 	bl	80109fc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	7d1b      	ldrb	r3, [r3, #20]
 800cbb4:	2b01      	cmp	r3, #1
 800cbb6:	d106      	bne.n	800cbc6 <tcp_output+0x32>
 800cbb8:	4b84      	ldr	r3, [pc, #528]	@ (800cdcc <tcp_output+0x238>)
 800cbba:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800cbbe:	4986      	ldr	r1, [pc, #536]	@ (800cdd8 <tcp_output+0x244>)
 800cbc0:	4884      	ldr	r0, [pc, #528]	@ (800cdd4 <tcp_output+0x240>)
 800cbc2:	f003 ff1b 	bl	80109fc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800cbc6:	4b85      	ldr	r3, [pc, #532]	@ (800cddc <tcp_output+0x248>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	687a      	ldr	r2, [r7, #4]
 800cbcc:	429a      	cmp	r2, r3
 800cbce:	d101      	bne.n	800cbd4 <tcp_output+0x40>
    return ERR_OK;
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	e1d1      	b.n	800cf78 <tcp_output+0x3e4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cbe0:	4293      	cmp	r3, r2
 800cbe2:	bf28      	it	cs
 800cbe4:	4613      	movcs	r3, r2
 800cbe6:	b29b      	uxth	r3, r3
 800cbe8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cbee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800cbf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d10b      	bne.n	800cc0e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	8b5b      	ldrh	r3, [r3, #26]
 800cbfa:	f003 0302 	and.w	r3, r3, #2
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	f000 81ad 	beq.w	800cf5e <tcp_output+0x3ca>
      return tcp_send_empty_ack(pcb);
 800cc04:	6878      	ldr	r0, [r7, #4]
 800cc06:	f000 fddb 	bl	800d7c0 <tcp_send_empty_ack>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	e1b4      	b.n	800cf78 <tcp_output+0x3e4>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800cc0e:	6879      	ldr	r1, [r7, #4]
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	3304      	adds	r3, #4
 800cc14:	461a      	mov	r2, r3
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f7fe ffc4 	bl	800bba4 <tcp_route>
 800cc1c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800cc1e:	697b      	ldr	r3, [r7, #20]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d102      	bne.n	800cc2a <tcp_output+0x96>
    return ERR_RTE;
 800cc24:	f06f 0303 	mvn.w	r3, #3
 800cc28:	e1a6      	b.n	800cf78 <tcp_output+0x3e4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d003      	beq.n	800cc38 <tcp_output+0xa4>
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d111      	bne.n	800cc5c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d002      	beq.n	800cc44 <tcp_output+0xb0>
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	3304      	adds	r3, #4
 800cc42:	e000      	b.n	800cc46 <tcp_output+0xb2>
 800cc44:	2300      	movs	r3, #0
 800cc46:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d102      	bne.n	800cc54 <tcp_output+0xc0>
      return ERR_RTE;
 800cc4e:	f06f 0303 	mvn.w	r3, #3
 800cc52:	e191      	b.n	800cf78 <tcp_output+0x3e4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	681a      	ldr	r2, [r3, #0]
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800cc5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc5e:	691b      	ldr	r3, [r3, #16]
 800cc60:	685b      	ldr	r3, [r3, #4]
 800cc62:	4618      	mov	r0, r3
 800cc64:	f7f8 fefd 	bl	8005a62 <lwip_htonl>
 800cc68:	4602      	mov	r2, r0
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc6e:	1ad3      	subs	r3, r2, r3
 800cc70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc72:	8912      	ldrh	r2, [r2, #8]
 800cc74:	4413      	add	r3, r2
 800cc76:	69ba      	ldr	r2, [r7, #24]
 800cc78:	429a      	cmp	r2, r3
 800cc7a:	d227      	bcs.n	800cccc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cc82:	461a      	mov	r2, r3
 800cc84:	69bb      	ldr	r3, [r7, #24]
 800cc86:	4293      	cmp	r3, r2
 800cc88:	d114      	bne.n	800ccb4 <tcp_output+0x120>
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d110      	bne.n	800ccb4 <tcp_output+0x120>
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d10b      	bne.n	800ccb4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2201      	movs	r2, #1
 800cca8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	8b5b      	ldrh	r3, [r3, #26]
 800ccb8:	f003 0302 	and.w	r3, r3, #2
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	f000 8150 	beq.w	800cf62 <tcp_output+0x3ce>
      return tcp_send_empty_ack(pcb);
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f000 fd7c 	bl	800d7c0 <tcp_send_empty_ack>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	e155      	b.n	800cf78 <tcp_output+0x3e4>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ccd8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800ccda:	6a3b      	ldr	r3, [r7, #32]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	f000 811f 	beq.w	800cf20 <tcp_output+0x38c>
    for (; useg->next != NULL; useg = useg->next);
 800cce2:	e002      	b.n	800ccea <tcp_output+0x156>
 800cce4:	6a3b      	ldr	r3, [r7, #32]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	623b      	str	r3, [r7, #32]
 800ccea:	6a3b      	ldr	r3, [r7, #32]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d1f8      	bne.n	800cce4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800ccf2:	e115      	b.n	800cf20 <tcp_output+0x38c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800ccf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccf6:	691b      	ldr	r3, [r3, #16]
 800ccf8:	899b      	ldrh	r3, [r3, #12]
 800ccfa:	b29b      	uxth	r3, r3
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f7f8 fe9b 	bl	8005a38 <lwip_htons>
 800cd02:	4603      	mov	r3, r0
 800cd04:	b2db      	uxtb	r3, r3
 800cd06:	f003 0304 	and.w	r3, r3, #4
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d006      	beq.n	800cd1c <tcp_output+0x188>
 800cd0e:	4b2f      	ldr	r3, [pc, #188]	@ (800cdcc <tcp_output+0x238>)
 800cd10:	f240 5236 	movw	r2, #1334	@ 0x536
 800cd14:	4932      	ldr	r1, [pc, #200]	@ (800cde0 <tcp_output+0x24c>)
 800cd16:	482f      	ldr	r0, [pc, #188]	@ (800cdd4 <tcp_output+0x240>)
 800cd18:	f003 fe70 	bl	80109fc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d01f      	beq.n	800cd64 <tcp_output+0x1d0>
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	8b5b      	ldrh	r3, [r3, #26]
 800cd28:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d119      	bne.n	800cd64 <tcp_output+0x1d0>
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d00b      	beq.n	800cd50 <tcp_output+0x1bc>
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d110      	bne.n	800cd64 <tcp_output+0x1d0>
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd46:	891a      	ldrh	r2, [r3, #8]
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cd4c:	429a      	cmp	r2, r3
 800cd4e:	d209      	bcs.n	800cd64 <tcp_output+0x1d0>
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d004      	beq.n	800cd64 <tcp_output+0x1d0>
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cd60:	2b08      	cmp	r3, #8
 800cd62:	d901      	bls.n	800cd68 <tcp_output+0x1d4>
 800cd64:	2301      	movs	r3, #1
 800cd66:	e000      	b.n	800cd6a <tcp_output+0x1d6>
 800cd68:	2300      	movs	r3, #0
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d106      	bne.n	800cd7c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	8b5b      	ldrh	r3, [r3, #26]
 800cd72:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	f000 80e7 	beq.w	800cf4a <tcp_output+0x3b6>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	7d1b      	ldrb	r3, [r3, #20]
 800cd80:	2b02      	cmp	r3, #2
 800cd82:	d00d      	beq.n	800cda0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800cd84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd86:	691b      	ldr	r3, [r3, #16]
 800cd88:	899b      	ldrh	r3, [r3, #12]
 800cd8a:	b29c      	uxth	r4, r3
 800cd8c:	2010      	movs	r0, #16
 800cd8e:	f7f8 fe53 	bl	8005a38 <lwip_htons>
 800cd92:	4603      	mov	r3, r0
 800cd94:	461a      	mov	r2, r3
 800cd96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd98:	691b      	ldr	r3, [r3, #16]
 800cd9a:	4322      	orrs	r2, r4
 800cd9c:	b292      	uxth	r2, r2
 800cd9e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800cda0:	697a      	ldr	r2, [r7, #20]
 800cda2:	6879      	ldr	r1, [r7, #4]
 800cda4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cda6:	f000 f90b 	bl	800cfc0 <tcp_output_segment>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800cdae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d016      	beq.n	800cde4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	8b5b      	ldrh	r3, [r3, #26]
 800cdba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cdbe:	b29a      	uxth	r2, r3
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	835a      	strh	r2, [r3, #26]
      return err;
 800cdc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdc8:	e0d6      	b.n	800cf78 <tcp_output+0x3e4>
 800cdca:	bf00      	nop
 800cdcc:	08013988 	.word	0x08013988
 800cdd0:	08013f28 	.word	0x08013f28
 800cdd4:	080139dc 	.word	0x080139dc
 800cdd8:	08013f40 	.word	0x08013f40
 800cddc:	20008838 	.word	0x20008838
 800cde0:	08013f68 	.word	0x08013f68
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 800cde4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cde6:	2200      	movs	r2, #0
 800cde8:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800cdea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdec:	681a      	ldr	r2, [r3, #0]
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	7d1b      	ldrb	r3, [r3, #20]
 800cdf6:	2b02      	cmp	r3, #2
 800cdf8:	d006      	beq.n	800ce08 <tcp_output+0x274>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	8b5b      	ldrh	r3, [r3, #26]
 800cdfe:	f023 0303 	bic.w	r3, r3, #3
 800ce02:	b29a      	uxth	r2, r3
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ce08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce0a:	691b      	ldr	r3, [r3, #16]
 800ce0c:	685b      	ldr	r3, [r3, #4]
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f7f8 fe27 	bl	8005a62 <lwip_htonl>
 800ce14:	4604      	mov	r4, r0
 800ce16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce18:	891b      	ldrh	r3, [r3, #8]
 800ce1a:	461d      	mov	r5, r3
 800ce1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce1e:	691b      	ldr	r3, [r3, #16]
 800ce20:	899b      	ldrh	r3, [r3, #12]
 800ce22:	b29b      	uxth	r3, r3
 800ce24:	4618      	mov	r0, r3
 800ce26:	f7f8 fe07 	bl	8005a38 <lwip_htons>
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	b2db      	uxtb	r3, r3
 800ce2e:	f003 0303 	and.w	r3, r3, #3
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d001      	beq.n	800ce3a <tcp_output+0x2a6>
 800ce36:	2301      	movs	r3, #1
 800ce38:	e000      	b.n	800ce3c <tcp_output+0x2a8>
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	442b      	add	r3, r5
 800ce3e:	4423      	add	r3, r4
 800ce40:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	1ad3      	subs	r3, r2, r3
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	da02      	bge.n	800ce54 <tcp_output+0x2c0>
      pcb->snd_nxt = snd_nxt;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	68ba      	ldr	r2, [r7, #8]
 800ce52:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800ce54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce56:	891b      	ldrh	r3, [r3, #8]
 800ce58:	461c      	mov	r4, r3
 800ce5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce5c:	691b      	ldr	r3, [r3, #16]
 800ce5e:	899b      	ldrh	r3, [r3, #12]
 800ce60:	b29b      	uxth	r3, r3
 800ce62:	4618      	mov	r0, r3
 800ce64:	f7f8 fde8 	bl	8005a38 <lwip_htons>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	b2db      	uxtb	r3, r3
 800ce6c:	f003 0303 	and.w	r3, r3, #3
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d001      	beq.n	800ce78 <tcp_output+0x2e4>
 800ce74:	2301      	movs	r3, #1
 800ce76:	e000      	b.n	800ce7a <tcp_output+0x2e6>
 800ce78:	2300      	movs	r3, #0
 800ce7a:	4423      	add	r3, r4
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d049      	beq.n	800cf14 <tcp_output+0x380>
      seg->next = NULL;
 800ce80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce82:	2200      	movs	r2, #0
 800ce84:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d105      	bne.n	800ce9a <tcp_output+0x306>
        pcb->unacked = seg;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce92:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800ce94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce96:	623b      	str	r3, [r7, #32]
 800ce98:	e03f      	b.n	800cf1a <tcp_output+0x386>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800ce9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce9c:	691b      	ldr	r3, [r3, #16]
 800ce9e:	685b      	ldr	r3, [r3, #4]
 800cea0:	4618      	mov	r0, r3
 800cea2:	f7f8 fdde 	bl	8005a62 <lwip_htonl>
 800cea6:	4604      	mov	r4, r0
 800cea8:	6a3b      	ldr	r3, [r7, #32]
 800ceaa:	691b      	ldr	r3, [r3, #16]
 800ceac:	685b      	ldr	r3, [r3, #4]
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f7f8 fdd7 	bl	8005a62 <lwip_htonl>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	1ae3      	subs	r3, r4, r3
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	da24      	bge.n	800cf06 <tcp_output+0x372>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	3370      	adds	r3, #112	@ 0x70
 800cec0:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800cec2:	e002      	b.n	800ceca <tcp_output+0x336>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800cec4:	69fb      	ldr	r3, [r7, #28]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ceca:	69fb      	ldr	r3, [r7, #28]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d011      	beq.n	800cef6 <tcp_output+0x362>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ced2:	69fb      	ldr	r3, [r7, #28]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	691b      	ldr	r3, [r3, #16]
 800ced8:	685b      	ldr	r3, [r3, #4]
 800ceda:	4618      	mov	r0, r3
 800cedc:	f7f8 fdc1 	bl	8005a62 <lwip_htonl>
 800cee0:	4604      	mov	r4, r0
 800cee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cee4:	691b      	ldr	r3, [r3, #16]
 800cee6:	685b      	ldr	r3, [r3, #4]
 800cee8:	4618      	mov	r0, r3
 800ceea:	f7f8 fdba 	bl	8005a62 <lwip_htonl>
 800ceee:	4603      	mov	r3, r0
 800cef0:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	dbe6      	blt.n	800cec4 <tcp_output+0x330>
          }
          seg->next = (*cur_seg);
 800cef6:	69fb      	ldr	r3, [r7, #28]
 800cef8:	681a      	ldr	r2, [r3, #0]
 800cefa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cefc:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800cefe:	69fb      	ldr	r3, [r7, #28]
 800cf00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf02:	601a      	str	r2, [r3, #0]
 800cf04:	e009      	b.n	800cf1a <tcp_output+0x386>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800cf06:	6a3b      	ldr	r3, [r7, #32]
 800cf08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf0a:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800cf0c:	6a3b      	ldr	r3, [r7, #32]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	623b      	str	r3, [r7, #32]
 800cf12:	e002      	b.n	800cf1a <tcp_output+0x386>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800cf14:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cf16:	f7fb fd98 	bl	8008a4a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf1e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800cf20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d012      	beq.n	800cf4c <tcp_output+0x3b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800cf26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf28:	691b      	ldr	r3, [r3, #16]
 800cf2a:	685b      	ldr	r3, [r3, #4]
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f7f8 fd98 	bl	8005a62 <lwip_htonl>
 800cf32:	4602      	mov	r2, r0
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf38:	1ad3      	subs	r3, r2, r3
 800cf3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf3c:	8912      	ldrh	r2, [r2, #8]
 800cf3e:	4413      	add	r3, r2
  while (seg != NULL &&
 800cf40:	69ba      	ldr	r2, [r7, #24]
 800cf42:	429a      	cmp	r2, r3
 800cf44:	f4bf aed6 	bcs.w	800ccf4 <tcp_output+0x160>
 800cf48:	e000      	b.n	800cf4c <tcp_output+0x3b8>
      break;
 800cf4a:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d108      	bne.n	800cf66 <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2200      	movs	r2, #0
 800cf58:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800cf5c:	e004      	b.n	800cf68 <tcp_output+0x3d4>
    goto output_done;
 800cf5e:	bf00      	nop
 800cf60:	e002      	b.n	800cf68 <tcp_output+0x3d4>
    goto output_done;
 800cf62:	bf00      	nop
 800cf64:	e000      	b.n	800cf68 <tcp_output+0x3d4>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800cf66:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	8b5b      	ldrh	r3, [r3, #26]
 800cf6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cf70:	b29a      	uxth	r2, r3
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800cf76:	2300      	movs	r3, #0
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3728      	adds	r7, #40	@ 0x28
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bdb0      	pop	{r4, r5, r7, pc}

0800cf80 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b082      	sub	sp, #8
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d106      	bne.n	800cf9c <tcp_output_segment_busy+0x1c>
 800cf8e:	4b09      	ldr	r3, [pc, #36]	@ (800cfb4 <tcp_output_segment_busy+0x34>)
 800cf90:	f240 529a 	movw	r2, #1434	@ 0x59a
 800cf94:	4908      	ldr	r1, [pc, #32]	@ (800cfb8 <tcp_output_segment_busy+0x38>)
 800cf96:	4809      	ldr	r0, [pc, #36]	@ (800cfbc <tcp_output_segment_busy+0x3c>)
 800cf98:	f003 fd30 	bl	80109fc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	685b      	ldr	r3, [r3, #4]
 800cfa0:	7b9b      	ldrb	r3, [r3, #14]
 800cfa2:	2b01      	cmp	r3, #1
 800cfa4:	d001      	beq.n	800cfaa <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800cfa6:	2301      	movs	r3, #1
 800cfa8:	e000      	b.n	800cfac <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800cfaa:	2300      	movs	r3, #0
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	3708      	adds	r7, #8
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}
 800cfb4:	08013988 	.word	0x08013988
 800cfb8:	08013f80 	.word	0x08013f80
 800cfbc:	080139dc 	.word	0x080139dc

0800cfc0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800cfc0:	b5b0      	push	{r4, r5, r7, lr}
 800cfc2:	b08c      	sub	sp, #48	@ 0x30
 800cfc4:	af04      	add	r7, sp, #16
 800cfc6:	60f8      	str	r0, [r7, #12]
 800cfc8:	60b9      	str	r1, [r7, #8]
 800cfca:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d106      	bne.n	800cfe0 <tcp_output_segment+0x20>
 800cfd2:	4b64      	ldr	r3, [pc, #400]	@ (800d164 <tcp_output_segment+0x1a4>)
 800cfd4:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800cfd8:	4963      	ldr	r1, [pc, #396]	@ (800d168 <tcp_output_segment+0x1a8>)
 800cfda:	4864      	ldr	r0, [pc, #400]	@ (800d16c <tcp_output_segment+0x1ac>)
 800cfdc:	f003 fd0e 	bl	80109fc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d106      	bne.n	800cff4 <tcp_output_segment+0x34>
 800cfe6:	4b5f      	ldr	r3, [pc, #380]	@ (800d164 <tcp_output_segment+0x1a4>)
 800cfe8:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800cfec:	4960      	ldr	r1, [pc, #384]	@ (800d170 <tcp_output_segment+0x1b0>)
 800cfee:	485f      	ldr	r0, [pc, #380]	@ (800d16c <tcp_output_segment+0x1ac>)
 800cff0:	f003 fd04 	bl	80109fc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d106      	bne.n	800d008 <tcp_output_segment+0x48>
 800cffa:	4b5a      	ldr	r3, [pc, #360]	@ (800d164 <tcp_output_segment+0x1a4>)
 800cffc:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800d000:	495c      	ldr	r1, [pc, #368]	@ (800d174 <tcp_output_segment+0x1b4>)
 800d002:	485a      	ldr	r0, [pc, #360]	@ (800d16c <tcp_output_segment+0x1ac>)
 800d004:	f003 fcfa 	bl	80109fc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800d008:	68f8      	ldr	r0, [r7, #12]
 800d00a:	f7ff ffb9 	bl	800cf80 <tcp_output_segment_busy>
 800d00e:	4603      	mov	r3, r0
 800d010:	2b00      	cmp	r3, #0
 800d012:	d001      	beq.n	800d018 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800d014:	2300      	movs	r3, #0
 800d016:	e0a1      	b.n	800d15c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	691c      	ldr	r4, [r3, #16]
 800d020:	4610      	mov	r0, r2
 800d022:	f7f8 fd1e 	bl	8005a62 <lwip_htonl>
 800d026:	4603      	mov	r3, r0
 800d028:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	691c      	ldr	r4, [r3, #16]
 800d032:	4610      	mov	r0, r2
 800d034:	f7f8 fd00 	bl	8005a38 <lwip_htons>
 800d038:	4603      	mov	r3, r0
 800d03a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d040:	68ba      	ldr	r2, [r7, #8]
 800d042:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800d044:	441a      	add	r2, r3
 800d046:	68bb      	ldr	r3, [r7, #8]
 800d048:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	691b      	ldr	r3, [r3, #16]
 800d04e:	3314      	adds	r3, #20
 800d050:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	7b1b      	ldrb	r3, [r3, #12]
 800d056:	f003 0301 	and.w	r3, r3, #1
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d015      	beq.n	800d08a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d05e:	68bb      	ldr	r3, [r7, #8]
 800d060:	3304      	adds	r3, #4
 800d062:	461a      	mov	r2, r3
 800d064:	6879      	ldr	r1, [r7, #4]
 800d066:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800d06a:	f7fc f8d1 	bl	8009210 <tcp_eff_send_mss_netif>
 800d06e:	4603      	mov	r3, r0
 800d070:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d072:	8b7b      	ldrh	r3, [r7, #26]
 800d074:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800d078:	4618      	mov	r0, r3
 800d07a:	f7f8 fcf2 	bl	8005a62 <lwip_htonl>
 800d07e:	4602      	mov	r2, r0
 800d080:	69fb      	ldr	r3, [r7, #28]
 800d082:	601a      	str	r2, [r3, #0]
    opts += 1;
 800d084:	69fb      	ldr	r3, [r7, #28]
 800d086:	3304      	adds	r3, #4
 800d088:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800d08a:	68bb      	ldr	r3, [r7, #8]
 800d08c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d090:	2b00      	cmp	r3, #0
 800d092:	da02      	bge.n	800d09a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	2200      	movs	r2, #0
 800d098:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d10c      	bne.n	800d0bc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800d0a2:	4b35      	ldr	r3, [pc, #212]	@ (800d178 <tcp_output_segment+0x1b8>)
 800d0a4:	681a      	ldr	r2, [r3, #0]
 800d0a6:	68bb      	ldr	r3, [r7, #8]
 800d0a8:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	691b      	ldr	r3, [r3, #16]
 800d0ae:	685b      	ldr	r3, [r3, #4]
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f7f8 fcd6 	bl	8005a62 <lwip_htonl>
 800d0b6:	4602      	mov	r2, r0
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	691a      	ldr	r2, [r3, #16]
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	685b      	ldr	r3, [r3, #4]
 800d0c4:	685b      	ldr	r3, [r3, #4]
 800d0c6:	1ad3      	subs	r3, r2, r3
 800d0c8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	685b      	ldr	r3, [r3, #4]
 800d0ce:	8959      	ldrh	r1, [r3, #10]
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	685b      	ldr	r3, [r3, #4]
 800d0d4:	8b3a      	ldrh	r2, [r7, #24]
 800d0d6:	1a8a      	subs	r2, r1, r2
 800d0d8:	b292      	uxth	r2, r2
 800d0da:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	685b      	ldr	r3, [r3, #4]
 800d0e0:	8919      	ldrh	r1, [r3, #8]
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	685b      	ldr	r3, [r3, #4]
 800d0e6:	8b3a      	ldrh	r2, [r7, #24]
 800d0e8:	1a8a      	subs	r2, r1, r2
 800d0ea:	b292      	uxth	r2, r2
 800d0ec:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	685b      	ldr	r3, [r3, #4]
 800d0f2:	68fa      	ldr	r2, [r7, #12]
 800d0f4:	6912      	ldr	r2, [r2, #16]
 800d0f6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	691b      	ldr	r3, [r3, #16]
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	741a      	strb	r2, [r3, #16]
 800d100:	2200      	movs	r2, #0
 800d102:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	691a      	ldr	r2, [r3, #16]
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	7b1b      	ldrb	r3, [r3, #12]
 800d10c:	f003 0301 	and.w	r3, r3, #1
 800d110:	2b00      	cmp	r3, #0
 800d112:	d001      	beq.n	800d118 <tcp_output_segment+0x158>
 800d114:	2318      	movs	r3, #24
 800d116:	e000      	b.n	800d11a <tcp_output_segment+0x15a>
 800d118:	2314      	movs	r3, #20
 800d11a:	4413      	add	r3, r2
 800d11c:	69fa      	ldr	r2, [r7, #28]
 800d11e:	429a      	cmp	r2, r3
 800d120:	d006      	beq.n	800d130 <tcp_output_segment+0x170>
 800d122:	4b10      	ldr	r3, [pc, #64]	@ (800d164 <tcp_output_segment+0x1a4>)
 800d124:	f240 621c 	movw	r2, #1564	@ 0x61c
 800d128:	4914      	ldr	r1, [pc, #80]	@ (800d17c <tcp_output_segment+0x1bc>)
 800d12a:	4810      	ldr	r0, [pc, #64]	@ (800d16c <tcp_output_segment+0x1ac>)
 800d12c:	f003 fc66 	bl	80109fc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	6858      	ldr	r0, [r3, #4]
 800d134:	68b9      	ldr	r1, [r7, #8]
 800d136:	68bb      	ldr	r3, [r7, #8]
 800d138:	1d1c      	adds	r4, r3, #4
 800d13a:	68bb      	ldr	r3, [r7, #8]
 800d13c:	7add      	ldrb	r5, [r3, #11]
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	7a9b      	ldrb	r3, [r3, #10]
 800d142:	687a      	ldr	r2, [r7, #4]
 800d144:	9202      	str	r2, [sp, #8]
 800d146:	2206      	movs	r2, #6
 800d148:	9201      	str	r2, [sp, #4]
 800d14a:	9300      	str	r3, [sp, #0]
 800d14c:	462b      	mov	r3, r5
 800d14e:	4622      	mov	r2, r4
 800d150:	f002 faf6 	bl	800f740 <ip4_output_if>
 800d154:	4603      	mov	r3, r0
 800d156:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800d158:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d15c:	4618      	mov	r0, r3
 800d15e:	3720      	adds	r7, #32
 800d160:	46bd      	mov	sp, r7
 800d162:	bdb0      	pop	{r4, r5, r7, pc}
 800d164:	08013988 	.word	0x08013988
 800d168:	08013fa8 	.word	0x08013fa8
 800d16c:	080139dc 	.word	0x080139dc
 800d170:	08013fc8 	.word	0x08013fc8
 800d174:	08013fe8 	.word	0x08013fe8
 800d178:	200087e8 	.word	0x200087e8
 800d17c:	0801400c 	.word	0x0801400c

0800d180 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800d180:	b5b0      	push	{r4, r5, r7, lr}
 800d182:	b084      	sub	sp, #16
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d106      	bne.n	800d19c <tcp_rexmit_rto_prepare+0x1c>
 800d18e:	4b36      	ldr	r3, [pc, #216]	@ (800d268 <tcp_rexmit_rto_prepare+0xe8>)
 800d190:	f240 6263 	movw	r2, #1635	@ 0x663
 800d194:	4935      	ldr	r1, [pc, #212]	@ (800d26c <tcp_rexmit_rto_prepare+0xec>)
 800d196:	4836      	ldr	r0, [pc, #216]	@ (800d270 <tcp_rexmit_rto_prepare+0xf0>)
 800d198:	f003 fc30 	bl	80109fc <iprintf>

  if (pcb->unacked == NULL) {
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d102      	bne.n	800d1aa <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800d1a4:	f06f 0305 	mvn.w	r3, #5
 800d1a8:	e059      	b.n	800d25e <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d1ae:	60fb      	str	r3, [r7, #12]
 800d1b0:	e00b      	b.n	800d1ca <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800d1b2:	68f8      	ldr	r0, [r7, #12]
 800d1b4:	f7ff fee4 	bl	800cf80 <tcp_output_segment_busy>
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d002      	beq.n	800d1c4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800d1be:	f06f 0305 	mvn.w	r3, #5
 800d1c2:	e04c      	b.n	800d25e <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	60fb      	str	r3, [r7, #12]
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d1ef      	bne.n	800d1b2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800d1d2:	68f8      	ldr	r0, [r7, #12]
 800d1d4:	f7ff fed4 	bl	800cf80 <tcp_output_segment_busy>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d002      	beq.n	800d1e4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800d1de:	f06f 0305 	mvn.w	r3, #5
 800d1e2:	e03c      	b.n	800d25e <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d104      	bne.n	800d1fe <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	895a      	ldrh	r2, [r3, #10]
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	2200      	movs	r2, #0
 800d20a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	8b5b      	ldrh	r3, [r3, #26]
 800d210:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800d214:	b29a      	uxth	r2, r3
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	691b      	ldr	r3, [r3, #16]
 800d21e:	685b      	ldr	r3, [r3, #4]
 800d220:	4618      	mov	r0, r3
 800d222:	f7f8 fc1e 	bl	8005a62 <lwip_htonl>
 800d226:	4604      	mov	r4, r0
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	891b      	ldrh	r3, [r3, #8]
 800d22c:	461d      	mov	r5, r3
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	691b      	ldr	r3, [r3, #16]
 800d232:	899b      	ldrh	r3, [r3, #12]
 800d234:	b29b      	uxth	r3, r3
 800d236:	4618      	mov	r0, r3
 800d238:	f7f8 fbfe 	bl	8005a38 <lwip_htons>
 800d23c:	4603      	mov	r3, r0
 800d23e:	b2db      	uxtb	r3, r3
 800d240:	f003 0303 	and.w	r3, r3, #3
 800d244:	2b00      	cmp	r3, #0
 800d246:	d001      	beq.n	800d24c <tcp_rexmit_rto_prepare+0xcc>
 800d248:	2301      	movs	r3, #1
 800d24a:	e000      	b.n	800d24e <tcp_rexmit_rto_prepare+0xce>
 800d24c:	2300      	movs	r3, #0
 800d24e:	442b      	add	r3, r5
 800d250:	18e2      	adds	r2, r4, r3
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2200      	movs	r2, #0
 800d25a:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800d25c:	2300      	movs	r3, #0
}
 800d25e:	4618      	mov	r0, r3
 800d260:	3710      	adds	r7, #16
 800d262:	46bd      	mov	sp, r7
 800d264:	bdb0      	pop	{r4, r5, r7, pc}
 800d266:	bf00      	nop
 800d268:	08013988 	.word	0x08013988
 800d26c:	08014020 	.word	0x08014020
 800d270:	080139dc 	.word	0x080139dc

0800d274 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b082      	sub	sp, #8
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d106      	bne.n	800d290 <tcp_rexmit_rto_commit+0x1c>
 800d282:	4b0d      	ldr	r3, [pc, #52]	@ (800d2b8 <tcp_rexmit_rto_commit+0x44>)
 800d284:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800d288:	490c      	ldr	r1, [pc, #48]	@ (800d2bc <tcp_rexmit_rto_commit+0x48>)
 800d28a:	480d      	ldr	r0, [pc, #52]	@ (800d2c0 <tcp_rexmit_rto_commit+0x4c>)
 800d28c:	f003 fbb6 	bl	80109fc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d296:	2bff      	cmp	r3, #255	@ 0xff
 800d298:	d007      	beq.n	800d2aa <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d2a0:	3301      	adds	r3, #1
 800d2a2:	b2da      	uxtb	r2, r3
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f7ff fc72 	bl	800cb94 <tcp_output>
}
 800d2b0:	bf00      	nop
 800d2b2:	3708      	adds	r7, #8
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}
 800d2b8:	08013988 	.word	0x08013988
 800d2bc:	08014044 	.word	0x08014044
 800d2c0:	080139dc 	.word	0x080139dc

0800d2c4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b082      	sub	sp, #8
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d106      	bne.n	800d2e0 <tcp_rexmit_rto+0x1c>
 800d2d2:	4b0a      	ldr	r3, [pc, #40]	@ (800d2fc <tcp_rexmit_rto+0x38>)
 800d2d4:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800d2d8:	4909      	ldr	r1, [pc, #36]	@ (800d300 <tcp_rexmit_rto+0x3c>)
 800d2da:	480a      	ldr	r0, [pc, #40]	@ (800d304 <tcp_rexmit_rto+0x40>)
 800d2dc:	f003 fb8e 	bl	80109fc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f7ff ff4d 	bl	800d180 <tcp_rexmit_rto_prepare>
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d102      	bne.n	800d2f2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	f7ff ffc1 	bl	800d274 <tcp_rexmit_rto_commit>
  }
}
 800d2f2:	bf00      	nop
 800d2f4:	3708      	adds	r7, #8
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}
 800d2fa:	bf00      	nop
 800d2fc:	08013988 	.word	0x08013988
 800d300:	08014068 	.word	0x08014068
 800d304:	080139dc 	.word	0x080139dc

0800d308 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d308:	b590      	push	{r4, r7, lr}
 800d30a:	b085      	sub	sp, #20
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d106      	bne.n	800d324 <tcp_rexmit+0x1c>
 800d316:	4b2f      	ldr	r3, [pc, #188]	@ (800d3d4 <tcp_rexmit+0xcc>)
 800d318:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800d31c:	492e      	ldr	r1, [pc, #184]	@ (800d3d8 <tcp_rexmit+0xd0>)
 800d31e:	482f      	ldr	r0, [pc, #188]	@ (800d3dc <tcp_rexmit+0xd4>)
 800d320:	f003 fb6c 	bl	80109fc <iprintf>

  if (pcb->unacked == NULL) {
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d102      	bne.n	800d332 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800d32c:	f06f 0305 	mvn.w	r3, #5
 800d330:	e04c      	b.n	800d3cc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d336:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800d338:	68b8      	ldr	r0, [r7, #8]
 800d33a:	f7ff fe21 	bl	800cf80 <tcp_output_segment_busy>
 800d33e:	4603      	mov	r3, r0
 800d340:	2b00      	cmp	r3, #0
 800d342:	d002      	beq.n	800d34a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800d344:	f06f 0305 	mvn.w	r3, #5
 800d348:	e040      	b.n	800d3cc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800d34a:	68bb      	ldr	r3, [r7, #8]
 800d34c:	681a      	ldr	r2, [r3, #0]
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	336c      	adds	r3, #108	@ 0x6c
 800d356:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d358:	e002      	b.n	800d360 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d011      	beq.n	800d38c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	691b      	ldr	r3, [r3, #16]
 800d36e:	685b      	ldr	r3, [r3, #4]
 800d370:	4618      	mov	r0, r3
 800d372:	f7f8 fb76 	bl	8005a62 <lwip_htonl>
 800d376:	4604      	mov	r4, r0
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	691b      	ldr	r3, [r3, #16]
 800d37c:	685b      	ldr	r3, [r3, #4]
 800d37e:	4618      	mov	r0, r3
 800d380:	f7f8 fb6f 	bl	8005a62 <lwip_htonl>
 800d384:	4603      	mov	r3, r0
 800d386:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800d388:	2b00      	cmp	r3, #0
 800d38a:	dbe6      	blt.n	800d35a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	681a      	ldr	r2, [r3, #0]
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	68ba      	ldr	r2, [r7, #8]
 800d398:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d103      	bne.n	800d3aa <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d3b0:	2bff      	cmp	r3, #255	@ 0xff
 800d3b2:	d007      	beq.n	800d3c4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d3ba:	3301      	adds	r3, #1
 800d3bc:	b2da      	uxtb	r2, r3
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800d3ca:	2300      	movs	r3, #0
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3714      	adds	r7, #20
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd90      	pop	{r4, r7, pc}
 800d3d4:	08013988 	.word	0x08013988
 800d3d8:	08014084 	.word	0x08014084
 800d3dc:	080139dc 	.word	0x080139dc

0800d3e0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b082      	sub	sp, #8
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d106      	bne.n	800d3fc <tcp_rexmit_fast+0x1c>
 800d3ee:	4b2a      	ldr	r3, [pc, #168]	@ (800d498 <tcp_rexmit_fast+0xb8>)
 800d3f0:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800d3f4:	4929      	ldr	r1, [pc, #164]	@ (800d49c <tcp_rexmit_fast+0xbc>)
 800d3f6:	482a      	ldr	r0, [pc, #168]	@ (800d4a0 <tcp_rexmit_fast+0xc0>)
 800d3f8:	f003 fb00 	bl	80109fc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d400:	2b00      	cmp	r3, #0
 800d402:	d045      	beq.n	800d490 <tcp_rexmit_fast+0xb0>
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	8b5b      	ldrh	r3, [r3, #26]
 800d408:	f003 0304 	and.w	r3, r3, #4
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d13f      	bne.n	800d490 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800d410:	6878      	ldr	r0, [r7, #4]
 800d412:	f7ff ff79 	bl	800d308 <tcp_rexmit>
 800d416:	4603      	mov	r3, r0
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d139      	bne.n	800d490 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d428:	4293      	cmp	r3, r2
 800d42a:	bf28      	it	cs
 800d42c:	4613      	movcs	r3, r2
 800d42e:	b29b      	uxth	r3, r3
 800d430:	2b00      	cmp	r3, #0
 800d432:	da00      	bge.n	800d436 <tcp_rexmit_fast+0x56>
 800d434:	3301      	adds	r3, #1
 800d436:	105b      	asrs	r3, r3, #1
 800d438:	b29a      	uxth	r2, r3
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800d446:	461a      	mov	r2, r3
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d44c:	005b      	lsls	r3, r3, #1
 800d44e:	429a      	cmp	r2, r3
 800d450:	d206      	bcs.n	800d460 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d456:	005b      	lsls	r3, r3, #1
 800d458:	b29a      	uxth	r2, r3
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d46a:	4619      	mov	r1, r3
 800d46c:	0049      	lsls	r1, r1, #1
 800d46e:	440b      	add	r3, r1
 800d470:	b29b      	uxth	r3, r3
 800d472:	4413      	add	r3, r2
 800d474:	b29a      	uxth	r2, r3
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	8b5b      	ldrh	r3, [r3, #26]
 800d480:	f043 0304 	orr.w	r3, r3, #4
 800d484:	b29a      	uxth	r2, r3
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2200      	movs	r2, #0
 800d48e:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800d490:	bf00      	nop
 800d492:	3708      	adds	r7, #8
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}
 800d498:	08013988 	.word	0x08013988
 800d49c:	0801409c 	.word	0x0801409c
 800d4a0:	080139dc 	.word	0x080139dc

0800d4a4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b086      	sub	sp, #24
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	60f8      	str	r0, [r7, #12]
 800d4ac:	607b      	str	r3, [r7, #4]
 800d4ae:	460b      	mov	r3, r1
 800d4b0:	817b      	strh	r3, [r7, #10]
 800d4b2:	4613      	mov	r3, r2
 800d4b4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d4b6:	897a      	ldrh	r2, [r7, #10]
 800d4b8:	893b      	ldrh	r3, [r7, #8]
 800d4ba:	4413      	add	r3, r2
 800d4bc:	b29b      	uxth	r3, r3
 800d4be:	3314      	adds	r3, #20
 800d4c0:	b29b      	uxth	r3, r3
 800d4c2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d4c6:	4619      	mov	r1, r3
 800d4c8:	2022      	movs	r0, #34	@ 0x22
 800d4ca:	f7f9 fb2f 	bl	8006b2c <pbuf_alloc>
 800d4ce:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800d4d0:	697b      	ldr	r3, [r7, #20]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d04d      	beq.n	800d572 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d4d6:	897b      	ldrh	r3, [r7, #10]
 800d4d8:	3313      	adds	r3, #19
 800d4da:	697a      	ldr	r2, [r7, #20]
 800d4dc:	8952      	ldrh	r2, [r2, #10]
 800d4de:	4293      	cmp	r3, r2
 800d4e0:	db06      	blt.n	800d4f0 <tcp_output_alloc_header_common+0x4c>
 800d4e2:	4b26      	ldr	r3, [pc, #152]	@ (800d57c <tcp_output_alloc_header_common+0xd8>)
 800d4e4:	f240 7223 	movw	r2, #1827	@ 0x723
 800d4e8:	4925      	ldr	r1, [pc, #148]	@ (800d580 <tcp_output_alloc_header_common+0xdc>)
 800d4ea:	4826      	ldr	r0, [pc, #152]	@ (800d584 <tcp_output_alloc_header_common+0xe0>)
 800d4ec:	f003 fa86 	bl	80109fc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800d4f0:	697b      	ldr	r3, [r7, #20]
 800d4f2:	685b      	ldr	r3, [r3, #4]
 800d4f4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800d4f6:	8c3b      	ldrh	r3, [r7, #32]
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	f7f8 fa9d 	bl	8005a38 <lwip_htons>
 800d4fe:	4603      	mov	r3, r0
 800d500:	461a      	mov	r2, r3
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800d506:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d508:	4618      	mov	r0, r3
 800d50a:	f7f8 fa95 	bl	8005a38 <lwip_htons>
 800d50e:	4603      	mov	r3, r0
 800d510:	461a      	mov	r2, r3
 800d512:	693b      	ldr	r3, [r7, #16]
 800d514:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800d516:	693b      	ldr	r3, [r7, #16]
 800d518:	687a      	ldr	r2, [r7, #4]
 800d51a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800d51c:	68f8      	ldr	r0, [r7, #12]
 800d51e:	f7f8 faa0 	bl	8005a62 <lwip_htonl>
 800d522:	4602      	mov	r2, r0
 800d524:	693b      	ldr	r3, [r7, #16]
 800d526:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d528:	897b      	ldrh	r3, [r7, #10]
 800d52a:	089b      	lsrs	r3, r3, #2
 800d52c:	b29b      	uxth	r3, r3
 800d52e:	3305      	adds	r3, #5
 800d530:	b29b      	uxth	r3, r3
 800d532:	031b      	lsls	r3, r3, #12
 800d534:	b29a      	uxth	r2, r3
 800d536:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d53a:	b29b      	uxth	r3, r3
 800d53c:	4313      	orrs	r3, r2
 800d53e:	b29b      	uxth	r3, r3
 800d540:	4618      	mov	r0, r3
 800d542:	f7f8 fa79 	bl	8005a38 <lwip_htons>
 800d546:	4603      	mov	r3, r0
 800d548:	461a      	mov	r2, r3
 800d54a:	693b      	ldr	r3, [r7, #16]
 800d54c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800d54e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d550:	4618      	mov	r0, r3
 800d552:	f7f8 fa71 	bl	8005a38 <lwip_htons>
 800d556:	4603      	mov	r3, r0
 800d558:	461a      	mov	r2, r3
 800d55a:	693b      	ldr	r3, [r7, #16]
 800d55c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800d55e:	693b      	ldr	r3, [r7, #16]
 800d560:	2200      	movs	r2, #0
 800d562:	741a      	strb	r2, [r3, #16]
 800d564:	2200      	movs	r2, #0
 800d566:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800d568:	693b      	ldr	r3, [r7, #16]
 800d56a:	2200      	movs	r2, #0
 800d56c:	749a      	strb	r2, [r3, #18]
 800d56e:	2200      	movs	r2, #0
 800d570:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800d572:	697b      	ldr	r3, [r7, #20]
}
 800d574:	4618      	mov	r0, r3
 800d576:	3718      	adds	r7, #24
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}
 800d57c:	08013988 	.word	0x08013988
 800d580:	080140bc 	.word	0x080140bc
 800d584:	080139dc 	.word	0x080139dc

0800d588 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800d588:	b5b0      	push	{r4, r5, r7, lr}
 800d58a:	b08a      	sub	sp, #40	@ 0x28
 800d58c:	af04      	add	r7, sp, #16
 800d58e:	60f8      	str	r0, [r7, #12]
 800d590:	607b      	str	r3, [r7, #4]
 800d592:	460b      	mov	r3, r1
 800d594:	817b      	strh	r3, [r7, #10]
 800d596:	4613      	mov	r3, r2
 800d598:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d106      	bne.n	800d5ae <tcp_output_alloc_header+0x26>
 800d5a0:	4b15      	ldr	r3, [pc, #84]	@ (800d5f8 <tcp_output_alloc_header+0x70>)
 800d5a2:	f240 7242 	movw	r2, #1858	@ 0x742
 800d5a6:	4915      	ldr	r1, [pc, #84]	@ (800d5fc <tcp_output_alloc_header+0x74>)
 800d5a8:	4815      	ldr	r0, [pc, #84]	@ (800d600 <tcp_output_alloc_header+0x78>)
 800d5aa:	f003 fa27 	bl	80109fc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	8adb      	ldrh	r3, [r3, #22]
 800d5b6:	68fa      	ldr	r2, [r7, #12]
 800d5b8:	8b12      	ldrh	r2, [r2, #24]
 800d5ba:	68f9      	ldr	r1, [r7, #12]
 800d5bc:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800d5be:	893d      	ldrh	r5, [r7, #8]
 800d5c0:	897c      	ldrh	r4, [r7, #10]
 800d5c2:	9103      	str	r1, [sp, #12]
 800d5c4:	2110      	movs	r1, #16
 800d5c6:	9102      	str	r1, [sp, #8]
 800d5c8:	9201      	str	r2, [sp, #4]
 800d5ca:	9300      	str	r3, [sp, #0]
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	462a      	mov	r2, r5
 800d5d0:	4621      	mov	r1, r4
 800d5d2:	f7ff ff67 	bl	800d4a4 <tcp_output_alloc_header_common>
 800d5d6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800d5d8:	697b      	ldr	r3, [r7, #20]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d006      	beq.n	800d5ec <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5e2:	68fa      	ldr	r2, [r7, #12]
 800d5e4:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800d5e6:	441a      	add	r2, r3
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800d5ec:	697b      	ldr	r3, [r7, #20]
}
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	3718      	adds	r7, #24
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bdb0      	pop	{r4, r5, r7, pc}
 800d5f6:	bf00      	nop
 800d5f8:	08013988 	.word	0x08013988
 800d5fc:	080140ec 	.word	0x080140ec
 800d600:	080139dc 	.word	0x080139dc

0800d604 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b088      	sub	sp, #32
 800d608:	af00      	add	r7, sp, #0
 800d60a:	60f8      	str	r0, [r7, #12]
 800d60c:	60b9      	str	r1, [r7, #8]
 800d60e:	4611      	mov	r1, r2
 800d610:	461a      	mov	r2, r3
 800d612:	460b      	mov	r3, r1
 800d614:	71fb      	strb	r3, [r7, #7]
 800d616:	4613      	mov	r3, r2
 800d618:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800d61a:	2300      	movs	r3, #0
 800d61c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800d61e:	68bb      	ldr	r3, [r7, #8]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d106      	bne.n	800d632 <tcp_output_fill_options+0x2e>
 800d624:	4b12      	ldr	r3, [pc, #72]	@ (800d670 <tcp_output_fill_options+0x6c>)
 800d626:	f240 7256 	movw	r2, #1878	@ 0x756
 800d62a:	4912      	ldr	r1, [pc, #72]	@ (800d674 <tcp_output_fill_options+0x70>)
 800d62c:	4812      	ldr	r0, [pc, #72]	@ (800d678 <tcp_output_fill_options+0x74>)
 800d62e:	f003 f9e5 	bl	80109fc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	685b      	ldr	r3, [r3, #4]
 800d636:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800d638:	69bb      	ldr	r3, [r7, #24]
 800d63a:	3314      	adds	r3, #20
 800d63c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800d63e:	8bfb      	ldrh	r3, [r7, #30]
 800d640:	009b      	lsls	r3, r3, #2
 800d642:	461a      	mov	r2, r3
 800d644:	79fb      	ldrb	r3, [r7, #7]
 800d646:	009b      	lsls	r3, r3, #2
 800d648:	f003 0304 	and.w	r3, r3, #4
 800d64c:	4413      	add	r3, r2
 800d64e:	3314      	adds	r3, #20
 800d650:	69ba      	ldr	r2, [r7, #24]
 800d652:	4413      	add	r3, r2
 800d654:	697a      	ldr	r2, [r7, #20]
 800d656:	429a      	cmp	r2, r3
 800d658:	d006      	beq.n	800d668 <tcp_output_fill_options+0x64>
 800d65a:	4b05      	ldr	r3, [pc, #20]	@ (800d670 <tcp_output_fill_options+0x6c>)
 800d65c:	f240 7275 	movw	r2, #1909	@ 0x775
 800d660:	4906      	ldr	r1, [pc, #24]	@ (800d67c <tcp_output_fill_options+0x78>)
 800d662:	4805      	ldr	r0, [pc, #20]	@ (800d678 <tcp_output_fill_options+0x74>)
 800d664:	f003 f9ca 	bl	80109fc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800d668:	bf00      	nop
 800d66a:	3720      	adds	r7, #32
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}
 800d670:	08013988 	.word	0x08013988
 800d674:	08014114 	.word	0x08014114
 800d678:	080139dc 	.word	0x080139dc
 800d67c:	0801400c 	.word	0x0801400c

0800d680 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b08a      	sub	sp, #40	@ 0x28
 800d684:	af04      	add	r7, sp, #16
 800d686:	60f8      	str	r0, [r7, #12]
 800d688:	60b9      	str	r1, [r7, #8]
 800d68a:	607a      	str	r2, [r7, #4]
 800d68c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800d68e:	68bb      	ldr	r3, [r7, #8]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d106      	bne.n	800d6a2 <tcp_output_control_segment+0x22>
 800d694:	4b1c      	ldr	r3, [pc, #112]	@ (800d708 <tcp_output_control_segment+0x88>)
 800d696:	f240 7287 	movw	r2, #1927	@ 0x787
 800d69a:	491c      	ldr	r1, [pc, #112]	@ (800d70c <tcp_output_control_segment+0x8c>)
 800d69c:	481c      	ldr	r0, [pc, #112]	@ (800d710 <tcp_output_control_segment+0x90>)
 800d69e:	f003 f9ad 	bl	80109fc <iprintf>

  netif = tcp_route(pcb, src, dst);
 800d6a2:	683a      	ldr	r2, [r7, #0]
 800d6a4:	6879      	ldr	r1, [r7, #4]
 800d6a6:	68f8      	ldr	r0, [r7, #12]
 800d6a8:	f7fe fa7c 	bl	800bba4 <tcp_route>
 800d6ac:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800d6ae:	693b      	ldr	r3, [r7, #16]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d102      	bne.n	800d6ba <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800d6b4:	23fc      	movs	r3, #252	@ 0xfc
 800d6b6:	75fb      	strb	r3, [r7, #23]
 800d6b8:	e01c      	b.n	800d6f4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d006      	beq.n	800d6ce <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	7adb      	ldrb	r3, [r3, #11]
 800d6c4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	7a9b      	ldrb	r3, [r3, #10]
 800d6ca:	757b      	strb	r3, [r7, #21]
 800d6cc:	e003      	b.n	800d6d6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800d6ce:	23ff      	movs	r3, #255	@ 0xff
 800d6d0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800d6d6:	7dba      	ldrb	r2, [r7, #22]
 800d6d8:	693b      	ldr	r3, [r7, #16]
 800d6da:	9302      	str	r3, [sp, #8]
 800d6dc:	2306      	movs	r3, #6
 800d6de:	9301      	str	r3, [sp, #4]
 800d6e0:	7d7b      	ldrb	r3, [r7, #21]
 800d6e2:	9300      	str	r3, [sp, #0]
 800d6e4:	4613      	mov	r3, r2
 800d6e6:	683a      	ldr	r2, [r7, #0]
 800d6e8:	6879      	ldr	r1, [r7, #4]
 800d6ea:	68b8      	ldr	r0, [r7, #8]
 800d6ec:	f002 f828 	bl	800f740 <ip4_output_if>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800d6f4:	68b8      	ldr	r0, [r7, #8]
 800d6f6:	f7f9 fcfd 	bl	80070f4 <pbuf_free>
  return err;
 800d6fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d6fe:	4618      	mov	r0, r3
 800d700:	3718      	adds	r7, #24
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}
 800d706:	bf00      	nop
 800d708:	08013988 	.word	0x08013988
 800d70c:	0801413c 	.word	0x0801413c
 800d710:	080139dc 	.word	0x080139dc

0800d714 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800d714:	b590      	push	{r4, r7, lr}
 800d716:	b08b      	sub	sp, #44	@ 0x2c
 800d718:	af04      	add	r7, sp, #16
 800d71a:	60f8      	str	r0, [r7, #12]
 800d71c:	60b9      	str	r1, [r7, #8]
 800d71e:	607a      	str	r2, [r7, #4]
 800d720:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d106      	bne.n	800d736 <tcp_rst+0x22>
 800d728:	4b20      	ldr	r3, [pc, #128]	@ (800d7ac <tcp_rst+0x98>)
 800d72a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800d72e:	4920      	ldr	r1, [pc, #128]	@ (800d7b0 <tcp_rst+0x9c>)
 800d730:	4820      	ldr	r0, [pc, #128]	@ (800d7b4 <tcp_rst+0xa0>)
 800d732:	f003 f963 	bl	80109fc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800d736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d106      	bne.n	800d74a <tcp_rst+0x36>
 800d73c:	4b1b      	ldr	r3, [pc, #108]	@ (800d7ac <tcp_rst+0x98>)
 800d73e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800d742:	491d      	ldr	r1, [pc, #116]	@ (800d7b8 <tcp_rst+0xa4>)
 800d744:	481b      	ldr	r0, [pc, #108]	@ (800d7b4 <tcp_rst+0xa0>)
 800d746:	f003 f959 	bl	80109fc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d74a:	2300      	movs	r3, #0
 800d74c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800d74e:	f246 0308 	movw	r3, #24584	@ 0x6008
 800d752:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800d754:	7dfb      	ldrb	r3, [r7, #23]
 800d756:	b29c      	uxth	r4, r3
 800d758:	68b8      	ldr	r0, [r7, #8]
 800d75a:	f7f8 f982 	bl	8005a62 <lwip_htonl>
 800d75e:	4602      	mov	r2, r0
 800d760:	8abb      	ldrh	r3, [r7, #20]
 800d762:	9303      	str	r3, [sp, #12]
 800d764:	2314      	movs	r3, #20
 800d766:	9302      	str	r3, [sp, #8]
 800d768:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800d76a:	9301      	str	r3, [sp, #4]
 800d76c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d76e:	9300      	str	r3, [sp, #0]
 800d770:	4613      	mov	r3, r2
 800d772:	2200      	movs	r2, #0
 800d774:	4621      	mov	r1, r4
 800d776:	6878      	ldr	r0, [r7, #4]
 800d778:	f7ff fe94 	bl	800d4a4 <tcp_output_alloc_header_common>
 800d77c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800d77e:	693b      	ldr	r3, [r7, #16]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d103      	bne.n	800d78c <tcp_rst+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
 800d784:	480d      	ldr	r0, [pc, #52]	@ (800d7bc <tcp_rst+0xa8>)
 800d786:	f003 f9a9 	bl	8010adc <puts>
    return;
 800d78a:	e00b      	b.n	800d7a4 <tcp_rst+0x90>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d78c:	7dfb      	ldrb	r3, [r7, #23]
 800d78e:	2200      	movs	r2, #0
 800d790:	6939      	ldr	r1, [r7, #16]
 800d792:	68f8      	ldr	r0, [r7, #12]
 800d794:	f7ff ff36 	bl	800d604 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d79a:	683a      	ldr	r2, [r7, #0]
 800d79c:	6939      	ldr	r1, [r7, #16]
 800d79e:	68f8      	ldr	r0, [r7, #12]
 800d7a0:	f7ff ff6e 	bl	800d680 <tcp_output_control_segment>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d7a4:	371c      	adds	r7, #28
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bd90      	pop	{r4, r7, pc}
 800d7aa:	bf00      	nop
 800d7ac:	08013988 	.word	0x08013988
 800d7b0:	08014168 	.word	0x08014168
 800d7b4:	080139dc 	.word	0x080139dc
 800d7b8:	08014184 	.word	0x08014184
 800d7bc:	080141a0 	.word	0x080141a0

0800d7c0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d7c0:	b590      	push	{r4, r7, lr}
 800d7c2:	b087      	sub	sp, #28
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d106      	bne.n	800d7e4 <tcp_send_empty_ack+0x24>
 800d7d6:	4b28      	ldr	r3, [pc, #160]	@ (800d878 <tcp_send_empty_ack+0xb8>)
 800d7d8:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800d7dc:	4927      	ldr	r1, [pc, #156]	@ (800d87c <tcp_send_empty_ack+0xbc>)
 800d7de:	4828      	ldr	r0, [pc, #160]	@ (800d880 <tcp_send_empty_ack+0xc0>)
 800d7e0:	f003 f90c 	bl	80109fc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d7e4:	7dfb      	ldrb	r3, [r7, #23]
 800d7e6:	009b      	lsls	r3, r3, #2
 800d7e8:	b2db      	uxtb	r3, r3
 800d7ea:	f003 0304 	and.w	r3, r3, #4
 800d7ee:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800d7f0:	7d7b      	ldrb	r3, [r7, #21]
 800d7f2:	b29c      	uxth	r4, r3
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	f7f8 f932 	bl	8005a62 <lwip_htonl>
 800d7fe:	4603      	mov	r3, r0
 800d800:	2200      	movs	r2, #0
 800d802:	4621      	mov	r1, r4
 800d804:	6878      	ldr	r0, [r7, #4]
 800d806:	f7ff febf 	bl	800d588 <tcp_output_alloc_header>
 800d80a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d80c:	693b      	ldr	r3, [r7, #16]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d109      	bne.n	800d826 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	8b5b      	ldrh	r3, [r3, #26]
 800d816:	f043 0303 	orr.w	r3, r3, #3
 800d81a:	b29a      	uxth	r2, r3
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800d820:	f06f 0301 	mvn.w	r3, #1
 800d824:	e023      	b.n	800d86e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800d826:	7dbb      	ldrb	r3, [r7, #22]
 800d828:	7dfa      	ldrb	r2, [r7, #23]
 800d82a:	6939      	ldr	r1, [r7, #16]
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f7ff fee9 	bl	800d604 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d832:	687a      	ldr	r2, [r7, #4]
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	3304      	adds	r3, #4
 800d838:	6939      	ldr	r1, [r7, #16]
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f7ff ff20 	bl	800d680 <tcp_output_control_segment>
 800d840:	4603      	mov	r3, r0
 800d842:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800d844:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d007      	beq.n	800d85c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	8b5b      	ldrh	r3, [r3, #26]
 800d850:	f043 0303 	orr.w	r3, r3, #3
 800d854:	b29a      	uxth	r2, r3
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	835a      	strh	r2, [r3, #26]
 800d85a:	e006      	b.n	800d86a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	8b5b      	ldrh	r3, [r3, #26]
 800d860:	f023 0303 	bic.w	r3, r3, #3
 800d864:	b29a      	uxth	r2, r3
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800d86a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d86e:	4618      	mov	r0, r3
 800d870:	371c      	adds	r7, #28
 800d872:	46bd      	mov	sp, r7
 800d874:	bd90      	pop	{r4, r7, pc}
 800d876:	bf00      	nop
 800d878:	08013988 	.word	0x08013988
 800d87c:	080141cc 	.word	0x080141cc
 800d880:	080139dc 	.word	0x080139dc

0800d884 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800d884:	b590      	push	{r4, r7, lr}
 800d886:	b089      	sub	sp, #36	@ 0x24
 800d888:	af02      	add	r7, sp, #8
 800d88a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d88c:	2300      	movs	r3, #0
 800d88e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d106      	bne.n	800d8a4 <tcp_keepalive+0x20>
 800d896:	4b32      	ldr	r3, [pc, #200]	@ (800d960 <tcp_keepalive+0xdc>)
 800d898:	f640 0224 	movw	r2, #2084	@ 0x824
 800d89c:	4931      	ldr	r1, [pc, #196]	@ (800d964 <tcp_keepalive+0xe0>)
 800d89e:	4832      	ldr	r0, [pc, #200]	@ (800d968 <tcp_keepalive+0xe4>)
 800d8a0:	f003 f8ac 	bl	80109fc <iprintf>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: sending KEEPALIVE probe to "));
 800d8a4:	4831      	ldr	r0, [pc, #196]	@ (800d96c <tcp_keepalive+0xe8>)
 800d8a6:	f003 f8a9 	bl	80109fc <iprintf>
  ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	685b      	ldr	r3, [r3, #4]
 800d8ae:	b2db      	uxtb	r3, r3
 800d8b0:	4619      	mov	r1, r3
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	685b      	ldr	r3, [r3, #4]
 800d8b6:	0a1b      	lsrs	r3, r3, #8
 800d8b8:	b2db      	uxtb	r3, r3
 800d8ba:	461a      	mov	r2, r3
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	685b      	ldr	r3, [r3, #4]
 800d8c0:	0c1b      	lsrs	r3, r3, #16
 800d8c2:	b2db      	uxtb	r3, r3
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	685b      	ldr	r3, [r3, #4]
 800d8ca:	0e1b      	lsrs	r3, r3, #24
 800d8cc:	b2db      	uxtb	r3, r3
 800d8ce:	9300      	str	r3, [sp, #0]
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	4827      	ldr	r0, [pc, #156]	@ (800d970 <tcp_keepalive+0xec>)
 800d8d4:	f003 f892 	bl	80109fc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));
 800d8d8:	200a      	movs	r0, #10
 800d8da:	f003 f8a1 	bl	8010a20 <putchar>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
 800d8de:	4b25      	ldr	r3, [pc, #148]	@ (800d974 <tcp_keepalive+0xf0>)
 800d8e0:	6819      	ldr	r1, [r3, #0]
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6a1a      	ldr	r2, [r3, #32]
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800d8ec:	4822      	ldr	r0, [pc, #136]	@ (800d978 <tcp_keepalive+0xf4>)
 800d8ee:	f003 f885 	bl	80109fc <iprintf>
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800d8f2:	7dfb      	ldrb	r3, [r7, #23]
 800d8f4:	b29c      	uxth	r4, r3
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d8fa:	3b01      	subs	r3, #1
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	f7f8 f8b0 	bl	8005a62 <lwip_htonl>
 800d902:	4603      	mov	r3, r0
 800d904:	2200      	movs	r2, #0
 800d906:	4621      	mov	r1, r4
 800d908:	6878      	ldr	r0, [r7, #4]
 800d90a:	f7ff fe3d 	bl	800d588 <tcp_output_alloc_header>
 800d90e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d910:	693b      	ldr	r3, [r7, #16]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d105      	bne.n	800d922 <tcp_keepalive+0x9e>
    LWIP_DEBUGF(TCP_DEBUG,
 800d916:	4819      	ldr	r0, [pc, #100]	@ (800d97c <tcp_keepalive+0xf8>)
 800d918:	f003 f8e0 	bl	8010adc <puts>
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800d91c:	f04f 33ff 	mov.w	r3, #4294967295
 800d920:	e01a      	b.n	800d958 <tcp_keepalive+0xd4>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d922:	7dfb      	ldrb	r3, [r7, #23]
 800d924:	2200      	movs	r2, #0
 800d926:	6939      	ldr	r1, [r7, #16]
 800d928:	6878      	ldr	r0, [r7, #4]
 800d92a:	f7ff fe6b 	bl	800d604 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d92e:	687a      	ldr	r2, [r7, #4]
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	3304      	adds	r3, #4
 800d934:	6939      	ldr	r1, [r7, #16]
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	f7ff fea2 	bl	800d680 <tcp_output_control_segment>
 800d93c:	4603      	mov	r3, r0
 800d93e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d944:	1e59      	subs	r1, r3, #1
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d94a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d94e:	480c      	ldr	r0, [pc, #48]	@ (800d980 <tcp_keepalive+0xfc>)
 800d950:	f003 f854 	bl	80109fc <iprintf>
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d954:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d958:	4618      	mov	r0, r3
 800d95a:	371c      	adds	r7, #28
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd90      	pop	{r4, r7, pc}
 800d960:	08013988 	.word	0x08013988
 800d964:	080141ec 	.word	0x080141ec
 800d968:	080139dc 	.word	0x080139dc
 800d96c:	08014208 	.word	0x08014208
 800d970:	08014234 	.word	0x08014234
 800d974:	200087e8 	.word	0x200087e8
 800d978:	08014244 	.word	0x08014244
 800d97c:	08014288 	.word	0x08014288
 800d980:	080142bc 	.word	0x080142bc

0800d984 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d984:	b590      	push	{r4, r7, lr}
 800d986:	b08d      	sub	sp, #52	@ 0x34
 800d988:	af02      	add	r7, sp, #8
 800d98a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d98c:	2300      	movs	r3, #0
 800d98e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d106      	bne.n	800d9a6 <tcp_zero_window_probe+0x22>
 800d998:	4b66      	ldr	r3, [pc, #408]	@ (800db34 <tcp_zero_window_probe+0x1b0>)
 800d99a:	f640 024f 	movw	r2, #2127	@ 0x84f
 800d99e:	4966      	ldr	r1, [pc, #408]	@ (800db38 <tcp_zero_window_probe+0x1b4>)
 800d9a0:	4866      	ldr	r0, [pc, #408]	@ (800db3c <tcp_zero_window_probe+0x1b8>)
 800d9a2:	f003 f82b 	bl	80109fc <iprintf>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: sending ZERO WINDOW probe to "));
 800d9a6:	4866      	ldr	r0, [pc, #408]	@ (800db40 <tcp_zero_window_probe+0x1bc>)
 800d9a8:	f003 f828 	bl	80109fc <iprintf>
  ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	685b      	ldr	r3, [r3, #4]
 800d9b0:	b2db      	uxtb	r3, r3
 800d9b2:	4619      	mov	r1, r3
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	685b      	ldr	r3, [r3, #4]
 800d9b8:	0a1b      	lsrs	r3, r3, #8
 800d9ba:	b2db      	uxtb	r3, r3
 800d9bc:	461a      	mov	r2, r3
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	685b      	ldr	r3, [r3, #4]
 800d9c2:	0c1b      	lsrs	r3, r3, #16
 800d9c4:	b2db      	uxtb	r3, r3
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	685b      	ldr	r3, [r3, #4]
 800d9cc:	0e1b      	lsrs	r3, r3, #24
 800d9ce:	b2db      	uxtb	r3, r3
 800d9d0:	9300      	str	r3, [sp, #0]
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	485b      	ldr	r0, [pc, #364]	@ (800db44 <tcp_zero_window_probe+0x1c0>)
 800d9d6:	f003 f811 	bl	80109fc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));
 800d9da:	200a      	movs	r0, #10
 800d9dc:	f003 f820 	bl	8010a20 <putchar>

  LWIP_DEBUGF(TCP_DEBUG,
 800d9e0:	4b59      	ldr	r3, [pc, #356]	@ (800db48 <tcp_zero_window_probe+0x1c4>)
 800d9e2:	6819      	ldr	r1, [r3, #0]
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	6a1a      	ldr	r2, [r3, #32]
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800d9ee:	4857      	ldr	r0, [pc, #348]	@ (800db4c <tcp_zero_window_probe+0x1c8>)
 800d9f0:	f003 f804 	bl	80109fc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d9f8:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800d9fa:	6a3b      	ldr	r3, [r7, #32]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d101      	bne.n	800da04 <tcp_zero_window_probe+0x80>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800da00:	2300      	movs	r3, #0
 800da02:	e093      	b.n	800db2c <tcp_zero_window_probe+0x1a8>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800da0a:	2bff      	cmp	r3, #255	@ 0xff
 800da0c:	d007      	beq.n	800da1e <tcp_zero_window_probe+0x9a>
    ++pcb->persist_probe;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800da14:	3301      	adds	r3, #1
 800da16:	b2da      	uxtb	r2, r3
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800da1e:	6a3b      	ldr	r3, [r7, #32]
 800da20:	691b      	ldr	r3, [r3, #16]
 800da22:	899b      	ldrh	r3, [r3, #12]
 800da24:	b29b      	uxth	r3, r3
 800da26:	4618      	mov	r0, r3
 800da28:	f7f8 f806 	bl	8005a38 <lwip_htons>
 800da2c:	4603      	mov	r3, r0
 800da2e:	b2db      	uxtb	r3, r3
 800da30:	f003 0301 	and.w	r3, r3, #1
 800da34:	2b00      	cmp	r3, #0
 800da36:	d005      	beq.n	800da44 <tcp_zero_window_probe+0xc0>
 800da38:	6a3b      	ldr	r3, [r7, #32]
 800da3a:	891b      	ldrh	r3, [r3, #8]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d101      	bne.n	800da44 <tcp_zero_window_probe+0xc0>
 800da40:	2301      	movs	r3, #1
 800da42:	e000      	b.n	800da46 <tcp_zero_window_probe+0xc2>
 800da44:	2300      	movs	r3, #0
 800da46:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800da48:	7ffb      	ldrb	r3, [r7, #31]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	bf0c      	ite	eq
 800da4e:	2301      	moveq	r3, #1
 800da50:	2300      	movne	r3, #0
 800da52:	b2db      	uxtb	r3, r3
 800da54:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800da56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800da5a:	b299      	uxth	r1, r3
 800da5c:	6a3b      	ldr	r3, [r7, #32]
 800da5e:	691b      	ldr	r3, [r3, #16]
 800da60:	685b      	ldr	r3, [r3, #4]
 800da62:	8bba      	ldrh	r2, [r7, #28]
 800da64:	6878      	ldr	r0, [r7, #4]
 800da66:	f7ff fd8f 	bl	800d588 <tcp_output_alloc_header>
 800da6a:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800da6c:	69bb      	ldr	r3, [r7, #24]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d105      	bne.n	800da7e <tcp_zero_window_probe+0xfa>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
 800da72:	4837      	ldr	r0, [pc, #220]	@ (800db50 <tcp_zero_window_probe+0x1cc>)
 800da74:	f003 f832 	bl	8010adc <puts>
    return ERR_MEM;
 800da78:	f04f 33ff 	mov.w	r3, #4294967295
 800da7c:	e056      	b.n	800db2c <tcp_zero_window_probe+0x1a8>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800da7e:	69bb      	ldr	r3, [r7, #24]
 800da80:	685b      	ldr	r3, [r3, #4]
 800da82:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800da84:	7ffb      	ldrb	r3, [r7, #31]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d011      	beq.n	800daae <tcp_zero_window_probe+0x12a>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800da8a:	697b      	ldr	r3, [r7, #20]
 800da8c:	899b      	ldrh	r3, [r3, #12]
 800da8e:	b29b      	uxth	r3, r3
 800da90:	b21b      	sxth	r3, r3
 800da92:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800da96:	b21c      	sxth	r4, r3
 800da98:	2011      	movs	r0, #17
 800da9a:	f7f7 ffcd 	bl	8005a38 <lwip_htons>
 800da9e:	4603      	mov	r3, r0
 800daa0:	b21b      	sxth	r3, r3
 800daa2:	4323      	orrs	r3, r4
 800daa4:	b21b      	sxth	r3, r3
 800daa6:	b29a      	uxth	r2, r3
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	819a      	strh	r2, [r3, #12]
 800daac:	e010      	b.n	800dad0 <tcp_zero_window_probe+0x14c>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800daae:	69bb      	ldr	r3, [r7, #24]
 800dab0:	685b      	ldr	r3, [r3, #4]
 800dab2:	3314      	adds	r3, #20
 800dab4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800dab6:	6a3b      	ldr	r3, [r7, #32]
 800dab8:	6858      	ldr	r0, [r3, #4]
 800daba:	6a3b      	ldr	r3, [r7, #32]
 800dabc:	685b      	ldr	r3, [r3, #4]
 800dabe:	891a      	ldrh	r2, [r3, #8]
 800dac0:	6a3b      	ldr	r3, [r7, #32]
 800dac2:	891b      	ldrh	r3, [r3, #8]
 800dac4:	1ad3      	subs	r3, r2, r3
 800dac6:	b29b      	uxth	r3, r3
 800dac8:	2201      	movs	r2, #1
 800daca:	6939      	ldr	r1, [r7, #16]
 800dacc:	f7f9 fcfc 	bl	80074c8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800dad0:	6a3b      	ldr	r3, [r7, #32]
 800dad2:	691b      	ldr	r3, [r3, #16]
 800dad4:	685b      	ldr	r3, [r3, #4]
 800dad6:	4618      	mov	r0, r3
 800dad8:	f7f7 ffc3 	bl	8005a62 <lwip_htonl>
 800dadc:	4603      	mov	r3, r0
 800dade:	3301      	adds	r3, #1
 800dae0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	1ad3      	subs	r3, r2, r3
 800daea:	2b00      	cmp	r3, #0
 800daec:	da02      	bge.n	800daf4 <tcp_zero_window_probe+0x170>
    pcb->snd_nxt = snd_nxt;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	68fa      	ldr	r2, [r7, #12]
 800daf2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800daf4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800daf8:	2200      	movs	r2, #0
 800dafa:	69b9      	ldr	r1, [r7, #24]
 800dafc:	6878      	ldr	r0, [r7, #4]
 800dafe:	f7ff fd81 	bl	800d604 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800db02:	687a      	ldr	r2, [r7, #4]
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	3304      	adds	r3, #4
 800db08:	69b9      	ldr	r1, [r7, #24]
 800db0a:	6878      	ldr	r0, [r7, #4]
 800db0c:	f7ff fdb8 	bl	800d680 <tcp_output_control_segment>
 800db10:	4603      	mov	r3, r0
 800db12:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800db18:	1e59      	subs	r1, r3, #1
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800db1e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800db22:	480c      	ldr	r0, [pc, #48]	@ (800db54 <tcp_zero_window_probe+0x1d0>)
 800db24:	f002 ff6a 	bl	80109fc <iprintf>
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800db28:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	372c      	adds	r7, #44	@ 0x2c
 800db30:	46bd      	mov	sp, r7
 800db32:	bd90      	pop	{r4, r7, pc}
 800db34:	08013988 	.word	0x08013988
 800db38:	080142e8 	.word	0x080142e8
 800db3c:	080139dc 	.word	0x080139dc
 800db40:	0801430c 	.word	0x0801430c
 800db44:	08014234 	.word	0x08014234
 800db48:	200087e8 	.word	0x200087e8
 800db4c:	08014344 	.word	0x08014344
 800db50:	08014390 	.word	0x08014390
 800db54:	080143bc 	.word	0x080143bc

0800db58 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b082      	sub	sp, #8
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800db60:	f7f9 fda0 	bl	80076a4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800db64:	4b0a      	ldr	r3, [pc, #40]	@ (800db90 <tcpip_tcp_timer+0x38>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d103      	bne.n	800db74 <tcpip_tcp_timer+0x1c>
 800db6c:	4b09      	ldr	r3, [pc, #36]	@ (800db94 <tcpip_tcp_timer+0x3c>)
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d005      	beq.n	800db80 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800db74:	2200      	movs	r2, #0
 800db76:	4908      	ldr	r1, [pc, #32]	@ (800db98 <tcpip_tcp_timer+0x40>)
 800db78:	20fa      	movs	r0, #250	@ 0xfa
 800db7a:	f000 f8f3 	bl	800dd64 <sys_timeout>
 800db7e:	e003      	b.n	800db88 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800db80:	4b06      	ldr	r3, [pc, #24]	@ (800db9c <tcpip_tcp_timer+0x44>)
 800db82:	2200      	movs	r2, #0
 800db84:	601a      	str	r2, [r3, #0]
  }
}
 800db86:	bf00      	nop
 800db88:	bf00      	nop
 800db8a:	3708      	adds	r7, #8
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}
 800db90:	200087f4 	.word	0x200087f4
 800db94:	200087f8 	.word	0x200087f8
 800db98:	0800db59 	.word	0x0800db59
 800db9c:	20008844 	.word	0x20008844

0800dba0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800dba4:	4b0a      	ldr	r3, [pc, #40]	@ (800dbd0 <tcp_timer_needed+0x30>)
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d10f      	bne.n	800dbcc <tcp_timer_needed+0x2c>
 800dbac:	4b09      	ldr	r3, [pc, #36]	@ (800dbd4 <tcp_timer_needed+0x34>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d103      	bne.n	800dbbc <tcp_timer_needed+0x1c>
 800dbb4:	4b08      	ldr	r3, [pc, #32]	@ (800dbd8 <tcp_timer_needed+0x38>)
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d007      	beq.n	800dbcc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800dbbc:	4b04      	ldr	r3, [pc, #16]	@ (800dbd0 <tcp_timer_needed+0x30>)
 800dbbe:	2201      	movs	r2, #1
 800dbc0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	4905      	ldr	r1, [pc, #20]	@ (800dbdc <tcp_timer_needed+0x3c>)
 800dbc6:	20fa      	movs	r0, #250	@ 0xfa
 800dbc8:	f000 f8cc 	bl	800dd64 <sys_timeout>
  }
}
 800dbcc:	bf00      	nop
 800dbce:	bd80      	pop	{r7, pc}
 800dbd0:	20008844 	.word	0x20008844
 800dbd4:	200087f4 	.word	0x200087f4
 800dbd8:	200087f8 	.word	0x200087f8
 800dbdc:	0800db59 	.word	0x0800db59

0800dbe0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b086      	sub	sp, #24
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	60f8      	str	r0, [r7, #12]
 800dbe8:	60b9      	str	r1, [r7, #8]
 800dbea:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800dbec:	2006      	movs	r0, #6
 800dbee:	f7f8 fb9b 	bl	8006328 <memp_malloc>
 800dbf2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800dbf4:	693b      	ldr	r3, [r7, #16]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d109      	bne.n	800dc0e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800dbfa:	693b      	ldr	r3, [r7, #16]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d151      	bne.n	800dca4 <sys_timeout_abs+0xc4>
 800dc00:	4b2a      	ldr	r3, [pc, #168]	@ (800dcac <sys_timeout_abs+0xcc>)
 800dc02:	22be      	movs	r2, #190	@ 0xbe
 800dc04:	492a      	ldr	r1, [pc, #168]	@ (800dcb0 <sys_timeout_abs+0xd0>)
 800dc06:	482b      	ldr	r0, [pc, #172]	@ (800dcb4 <sys_timeout_abs+0xd4>)
 800dc08:	f002 fef8 	bl	80109fc <iprintf>
    return;
 800dc0c:	e04a      	b.n	800dca4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800dc0e:	693b      	ldr	r3, [r7, #16]
 800dc10:	2200      	movs	r2, #0
 800dc12:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800dc14:	693b      	ldr	r3, [r7, #16]
 800dc16:	68ba      	ldr	r2, [r7, #8]
 800dc18:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800dc1a:	693b      	ldr	r3, [r7, #16]
 800dc1c:	687a      	ldr	r2, [r7, #4]
 800dc1e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800dc20:	693b      	ldr	r3, [r7, #16]
 800dc22:	68fa      	ldr	r2, [r7, #12]
 800dc24:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800dc26:	4b24      	ldr	r3, [pc, #144]	@ (800dcb8 <sys_timeout_abs+0xd8>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d103      	bne.n	800dc36 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800dc2e:	4a22      	ldr	r2, [pc, #136]	@ (800dcb8 <sys_timeout_abs+0xd8>)
 800dc30:	693b      	ldr	r3, [r7, #16]
 800dc32:	6013      	str	r3, [r2, #0]
    return;
 800dc34:	e037      	b.n	800dca6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800dc36:	693b      	ldr	r3, [r7, #16]
 800dc38:	685a      	ldr	r2, [r3, #4]
 800dc3a:	4b1f      	ldr	r3, [pc, #124]	@ (800dcb8 <sys_timeout_abs+0xd8>)
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	685b      	ldr	r3, [r3, #4]
 800dc40:	1ad3      	subs	r3, r2, r3
 800dc42:	0fdb      	lsrs	r3, r3, #31
 800dc44:	f003 0301 	and.w	r3, r3, #1
 800dc48:	b2db      	uxtb	r3, r3
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d007      	beq.n	800dc5e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800dc4e:	4b1a      	ldr	r3, [pc, #104]	@ (800dcb8 <sys_timeout_abs+0xd8>)
 800dc50:	681a      	ldr	r2, [r3, #0]
 800dc52:	693b      	ldr	r3, [r7, #16]
 800dc54:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800dc56:	4a18      	ldr	r2, [pc, #96]	@ (800dcb8 <sys_timeout_abs+0xd8>)
 800dc58:	693b      	ldr	r3, [r7, #16]
 800dc5a:	6013      	str	r3, [r2, #0]
 800dc5c:	e023      	b.n	800dca6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800dc5e:	4b16      	ldr	r3, [pc, #88]	@ (800dcb8 <sys_timeout_abs+0xd8>)
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	617b      	str	r3, [r7, #20]
 800dc64:	e01a      	b.n	800dc9c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d00b      	beq.n	800dc86 <sys_timeout_abs+0xa6>
 800dc6e:	693b      	ldr	r3, [r7, #16]
 800dc70:	685a      	ldr	r2, [r3, #4]
 800dc72:	697b      	ldr	r3, [r7, #20]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	685b      	ldr	r3, [r3, #4]
 800dc78:	1ad3      	subs	r3, r2, r3
 800dc7a:	0fdb      	lsrs	r3, r3, #31
 800dc7c:	f003 0301 	and.w	r3, r3, #1
 800dc80:	b2db      	uxtb	r3, r3
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d007      	beq.n	800dc96 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800dc86:	697b      	ldr	r3, [r7, #20]
 800dc88:	681a      	ldr	r2, [r3, #0]
 800dc8a:	693b      	ldr	r3, [r7, #16]
 800dc8c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800dc8e:	697b      	ldr	r3, [r7, #20]
 800dc90:	693a      	ldr	r2, [r7, #16]
 800dc92:	601a      	str	r2, [r3, #0]
        break;
 800dc94:	e007      	b.n	800dca6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800dc96:	697b      	ldr	r3, [r7, #20]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	617b      	str	r3, [r7, #20]
 800dc9c:	697b      	ldr	r3, [r7, #20]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d1e1      	bne.n	800dc66 <sys_timeout_abs+0x86>
 800dca2:	e000      	b.n	800dca6 <sys_timeout_abs+0xc6>
    return;
 800dca4:	bf00      	nop
      }
    }
  }
}
 800dca6:	3718      	adds	r7, #24
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}
 800dcac:	080143f0 	.word	0x080143f0
 800dcb0:	08014424 	.word	0x08014424
 800dcb4:	08014464 	.word	0x08014464
 800dcb8:	2000883c 	.word	0x2000883c

0800dcbc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b086      	sub	sp, #24
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800dcc8:	697b      	ldr	r3, [r7, #20]
 800dcca:	685b      	ldr	r3, [r3, #4]
 800dccc:	4798      	blx	r3

  now = sys_now();
 800dcce:	f7f7 fca7 	bl	8005620 <sys_now>
 800dcd2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800dcd4:	697b      	ldr	r3, [r7, #20]
 800dcd6:	681a      	ldr	r2, [r3, #0]
 800dcd8:	4b0f      	ldr	r3, [pc, #60]	@ (800dd18 <lwip_cyclic_timer+0x5c>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	4413      	add	r3, r2
 800dcde:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800dce0:	68fa      	ldr	r2, [r7, #12]
 800dce2:	693b      	ldr	r3, [r7, #16]
 800dce4:	1ad3      	subs	r3, r2, r3
 800dce6:	0fdb      	lsrs	r3, r3, #31
 800dce8:	f003 0301 	and.w	r3, r3, #1
 800dcec:	b2db      	uxtb	r3, r3
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d009      	beq.n	800dd06 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800dcf2:	697b      	ldr	r3, [r7, #20]
 800dcf4:	681a      	ldr	r2, [r3, #0]
 800dcf6:	693b      	ldr	r3, [r7, #16]
 800dcf8:	4413      	add	r3, r2
 800dcfa:	687a      	ldr	r2, [r7, #4]
 800dcfc:	4907      	ldr	r1, [pc, #28]	@ (800dd1c <lwip_cyclic_timer+0x60>)
 800dcfe:	4618      	mov	r0, r3
 800dd00:	f7ff ff6e 	bl	800dbe0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800dd04:	e004      	b.n	800dd10 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800dd06:	687a      	ldr	r2, [r7, #4]
 800dd08:	4904      	ldr	r1, [pc, #16]	@ (800dd1c <lwip_cyclic_timer+0x60>)
 800dd0a:	68f8      	ldr	r0, [r7, #12]
 800dd0c:	f7ff ff68 	bl	800dbe0 <sys_timeout_abs>
}
 800dd10:	bf00      	nop
 800dd12:	3718      	adds	r7, #24
 800dd14:	46bd      	mov	sp, r7
 800dd16:	bd80      	pop	{r7, pc}
 800dd18:	20008840 	.word	0x20008840
 800dd1c:	0800dcbd 	.word	0x0800dcbd

0800dd20 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b082      	sub	sp, #8
 800dd24:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800dd26:	2301      	movs	r3, #1
 800dd28:	607b      	str	r3, [r7, #4]
 800dd2a:	e00e      	b.n	800dd4a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800dd2c:	4a0b      	ldr	r2, [pc, #44]	@ (800dd5c <sys_timeouts_init+0x3c>)
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	00db      	lsls	r3, r3, #3
 800dd38:	4a08      	ldr	r2, [pc, #32]	@ (800dd5c <sys_timeouts_init+0x3c>)
 800dd3a:	4413      	add	r3, r2
 800dd3c:	461a      	mov	r2, r3
 800dd3e:	4908      	ldr	r1, [pc, #32]	@ (800dd60 <sys_timeouts_init+0x40>)
 800dd40:	f000 f810 	bl	800dd64 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	3301      	adds	r3, #1
 800dd48:	607b      	str	r3, [r7, #4]
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2b02      	cmp	r3, #2
 800dd4e:	d9ed      	bls.n	800dd2c <sys_timeouts_init+0xc>
  }
}
 800dd50:	bf00      	nop
 800dd52:	bf00      	nop
 800dd54:	3708      	adds	r7, #8
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}
 800dd5a:	bf00      	nop
 800dd5c:	08015038 	.word	0x08015038
 800dd60:	0800dcbd 	.word	0x0800dcbd

0800dd64 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b086      	sub	sp, #24
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	60f8      	str	r0, [r7, #12]
 800dd6c:	60b9      	str	r1, [r7, #8]
 800dd6e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd76:	d306      	bcc.n	800dd86 <sys_timeout+0x22>
 800dd78:	4b0a      	ldr	r3, [pc, #40]	@ (800dda4 <sys_timeout+0x40>)
 800dd7a:	f240 1229 	movw	r2, #297	@ 0x129
 800dd7e:	490a      	ldr	r1, [pc, #40]	@ (800dda8 <sys_timeout+0x44>)
 800dd80:	480a      	ldr	r0, [pc, #40]	@ (800ddac <sys_timeout+0x48>)
 800dd82:	f002 fe3b 	bl	80109fc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800dd86:	f7f7 fc4b 	bl	8005620 <sys_now>
 800dd8a:	4602      	mov	r2, r0
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	4413      	add	r3, r2
 800dd90:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800dd92:	687a      	ldr	r2, [r7, #4]
 800dd94:	68b9      	ldr	r1, [r7, #8]
 800dd96:	6978      	ldr	r0, [r7, #20]
 800dd98:	f7ff ff22 	bl	800dbe0 <sys_timeout_abs>
#endif
}
 800dd9c:	bf00      	nop
 800dd9e:	3718      	adds	r7, #24
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}
 800dda4:	080143f0 	.word	0x080143f0
 800dda8:	0801448c 	.word	0x0801448c
 800ddac:	08014464 	.word	0x08014464

0800ddb0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b084      	sub	sp, #16
 800ddb4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800ddb6:	f7f7 fc33 	bl	8005620 <sys_now>
 800ddba:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800ddbc:	4b1a      	ldr	r3, [pc, #104]	@ (800de28 <sys_check_timeouts+0x78>)
 800ddbe:	781b      	ldrb	r3, [r3, #0]
 800ddc0:	b2db      	uxtb	r3, r3
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d001      	beq.n	800ddca <sys_check_timeouts+0x1a>
 800ddc6:	f7f8 fe5b 	bl	8006a80 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800ddca:	4b18      	ldr	r3, [pc, #96]	@ (800de2c <sys_check_timeouts+0x7c>)
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d022      	beq.n	800de1c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	685b      	ldr	r3, [r3, #4]
 800ddda:	68fa      	ldr	r2, [r7, #12]
 800dddc:	1ad3      	subs	r3, r2, r3
 800ddde:	0fdb      	lsrs	r3, r3, #31
 800dde0:	f003 0301 	and.w	r3, r3, #1
 800dde4:	b2db      	uxtb	r3, r3
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d11a      	bne.n	800de20 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800ddea:	68bb      	ldr	r3, [r7, #8]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	4a0f      	ldr	r2, [pc, #60]	@ (800de2c <sys_check_timeouts+0x7c>)
 800ddf0:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800ddf2:	68bb      	ldr	r3, [r7, #8]
 800ddf4:	689b      	ldr	r3, [r3, #8]
 800ddf6:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800ddf8:	68bb      	ldr	r3, [r7, #8]
 800ddfa:	68db      	ldr	r3, [r3, #12]
 800ddfc:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	685b      	ldr	r3, [r3, #4]
 800de02:	4a0b      	ldr	r2, [pc, #44]	@ (800de30 <sys_check_timeouts+0x80>)
 800de04:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800de06:	68b9      	ldr	r1, [r7, #8]
 800de08:	2006      	movs	r0, #6
 800de0a:	f7f8 fafd 	bl	8006408 <memp_free>
    if (handler != NULL) {
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d0d3      	beq.n	800ddbc <sys_check_timeouts+0xc>
      handler(arg);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	6838      	ldr	r0, [r7, #0]
 800de18:	4798      	blx	r3
  do {
 800de1a:	e7cf      	b.n	800ddbc <sys_check_timeouts+0xc>
      return;
 800de1c:	bf00      	nop
 800de1e:	e000      	b.n	800de22 <sys_check_timeouts+0x72>
      return;
 800de20:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800de22:	3710      	adds	r7, #16
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}
 800de28:	200087e5 	.word	0x200087e5
 800de2c:	2000883c 	.word	0x2000883c
 800de30:	20008840 	.word	0x20008840

0800de34 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800de38:	f002 fcce 	bl	80107d8 <rand>
 800de3c:	4603      	mov	r3, r0
 800de3e:	b29b      	uxth	r3, r3
 800de40:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800de44:	b29b      	uxth	r3, r3
 800de46:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800de4a:	b29a      	uxth	r2, r3
 800de4c:	4b01      	ldr	r3, [pc, #4]	@ (800de54 <udp_init+0x20>)
 800de4e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800de50:	bf00      	nop
 800de52:	bd80      	pop	{r7, pc}
 800de54:	20000028 	.word	0x20000028

0800de58 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b084      	sub	sp, #16
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	60f8      	str	r0, [r7, #12]
 800de60:	60b9      	str	r1, [r7, #8]
 800de62:	4613      	mov	r3, r2
 800de64:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d105      	bne.n	800de78 <udp_input_local_match+0x20>
 800de6c:	4b27      	ldr	r3, [pc, #156]	@ (800df0c <udp_input_local_match+0xb4>)
 800de6e:	2287      	movs	r2, #135	@ 0x87
 800de70:	4927      	ldr	r1, [pc, #156]	@ (800df10 <udp_input_local_match+0xb8>)
 800de72:	4828      	ldr	r0, [pc, #160]	@ (800df14 <udp_input_local_match+0xbc>)
 800de74:	f002 fdc2 	bl	80109fc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800de78:	68bb      	ldr	r3, [r7, #8]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d105      	bne.n	800de8a <udp_input_local_match+0x32>
 800de7e:	4b23      	ldr	r3, [pc, #140]	@ (800df0c <udp_input_local_match+0xb4>)
 800de80:	2288      	movs	r2, #136	@ 0x88
 800de82:	4925      	ldr	r1, [pc, #148]	@ (800df18 <udp_input_local_match+0xc0>)
 800de84:	4823      	ldr	r0, [pc, #140]	@ (800df14 <udp_input_local_match+0xbc>)
 800de86:	f002 fdb9 	bl	80109fc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	7a1b      	ldrb	r3, [r3, #8]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d00b      	beq.n	800deaa <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	7a1a      	ldrb	r2, [r3, #8]
 800de96:	4b21      	ldr	r3, [pc, #132]	@ (800df1c <udp_input_local_match+0xc4>)
 800de98:	685b      	ldr	r3, [r3, #4]
 800de9a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800de9e:	3301      	adds	r3, #1
 800dea0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dea2:	429a      	cmp	r2, r3
 800dea4:	d001      	beq.n	800deaa <udp_input_local_match+0x52>
    return 0;
 800dea6:	2300      	movs	r3, #0
 800dea8:	e02b      	b.n	800df02 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800deaa:	79fb      	ldrb	r3, [r7, #7]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d018      	beq.n	800dee2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d013      	beq.n	800dede <udp_input_local_match+0x86>
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d00f      	beq.n	800dede <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800debe:	4b17      	ldr	r3, [pc, #92]	@ (800df1c <udp_input_local_match+0xc4>)
 800dec0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800dec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dec6:	d00a      	beq.n	800dede <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	681a      	ldr	r2, [r3, #0]
 800decc:	4b13      	ldr	r3, [pc, #76]	@ (800df1c <udp_input_local_match+0xc4>)
 800dece:	695b      	ldr	r3, [r3, #20]
 800ded0:	405a      	eors	r2, r3
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	3308      	adds	r3, #8
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d110      	bne.n	800df00 <udp_input_local_match+0xa8>
          return 1;
 800dede:	2301      	movs	r3, #1
 800dee0:	e00f      	b.n	800df02 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d009      	beq.n	800defc <udp_input_local_match+0xa4>
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d005      	beq.n	800defc <udp_input_local_match+0xa4>
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	681a      	ldr	r2, [r3, #0]
 800def4:	4b09      	ldr	r3, [pc, #36]	@ (800df1c <udp_input_local_match+0xc4>)
 800def6:	695b      	ldr	r3, [r3, #20]
 800def8:	429a      	cmp	r2, r3
 800defa:	d101      	bne.n	800df00 <udp_input_local_match+0xa8>
        return 1;
 800defc:	2301      	movs	r3, #1
 800defe:	e000      	b.n	800df02 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800df00:	2300      	movs	r3, #0
}
 800df02:	4618      	mov	r0, r3
 800df04:	3710      	adds	r7, #16
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}
 800df0a:	bf00      	nop
 800df0c:	080144d8 	.word	0x080144d8
 800df10:	08014508 	.word	0x08014508
 800df14:	0801452c 	.word	0x0801452c
 800df18:	08014554 	.word	0x08014554
 800df1c:	20005238 	.word	0x20005238

0800df20 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800df20:	b590      	push	{r4, r7, lr}
 800df22:	b08d      	sub	sp, #52	@ 0x34
 800df24:	af02      	add	r7, sp, #8
 800df26:	6078      	str	r0, [r7, #4]
 800df28:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800df2a:	2300      	movs	r3, #0
 800df2c:	77fb      	strb	r3, [r7, #31]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d105      	bne.n	800df40 <udp_input+0x20>
 800df34:	4b7c      	ldr	r3, [pc, #496]	@ (800e128 <udp_input+0x208>)
 800df36:	22cf      	movs	r2, #207	@ 0xcf
 800df38:	497c      	ldr	r1, [pc, #496]	@ (800e12c <udp_input+0x20c>)
 800df3a:	487d      	ldr	r0, [pc, #500]	@ (800e130 <udp_input+0x210>)
 800df3c:	f002 fd5e 	bl	80109fc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d105      	bne.n	800df52 <udp_input+0x32>
 800df46:	4b78      	ldr	r3, [pc, #480]	@ (800e128 <udp_input+0x208>)
 800df48:	22d0      	movs	r2, #208	@ 0xd0
 800df4a:	497a      	ldr	r1, [pc, #488]	@ (800e134 <udp_input+0x214>)
 800df4c:	4878      	ldr	r0, [pc, #480]	@ (800e130 <udp_input+0x210>)
 800df4e:	f002 fd55 	bl	80109fc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	895b      	ldrh	r3, [r3, #10]
 800df56:	2b07      	cmp	r3, #7
 800df58:	d803      	bhi.n	800df62 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800df5a:	6878      	ldr	r0, [r7, #4]
 800df5c:	f7f9 f8ca 	bl	80070f4 <pbuf_free>
    goto end;
 800df60:	e0de      	b.n	800e120 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	685b      	ldr	r3, [r3, #4]
 800df66:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800df68:	4b73      	ldr	r3, [pc, #460]	@ (800e138 <udp_input+0x218>)
 800df6a:	695b      	ldr	r3, [r3, #20]
 800df6c:	4a72      	ldr	r2, [pc, #456]	@ (800e138 <udp_input+0x218>)
 800df6e:	6812      	ldr	r2, [r2, #0]
 800df70:	4611      	mov	r1, r2
 800df72:	4618      	mov	r0, r3
 800df74:	f001 fcbc 	bl	800f8f0 <ip4_addr_isbroadcast_u32>
 800df78:	4603      	mov	r3, r0
 800df7a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800df7c:	697b      	ldr	r3, [r7, #20]
 800df7e:	881b      	ldrh	r3, [r3, #0]
 800df80:	b29b      	uxth	r3, r3
 800df82:	4618      	mov	r0, r3
 800df84:	f7f7 fd58 	bl	8005a38 <lwip_htons>
 800df88:	4603      	mov	r3, r0
 800df8a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800df8c:	697b      	ldr	r3, [r7, #20]
 800df8e:	885b      	ldrh	r3, [r3, #2]
 800df90:	b29b      	uxth	r3, r3
 800df92:	4618      	mov	r0, r3
 800df94:	f7f7 fd50 	bl	8005a38 <lwip_htons>
 800df98:	4603      	mov	r3, r0
 800df9a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800df9c:	2300      	movs	r3, #0
 800df9e:	623b      	str	r3, [r7, #32]
  prev = NULL;
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	627b      	str	r3, [r7, #36]	@ 0x24
  uncon_pcb = NULL;
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	61bb      	str	r3, [r7, #24]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800dfa8:	4b64      	ldr	r3, [pc, #400]	@ (800e13c <udp_input+0x21c>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	623b      	str	r3, [r7, #32]
 800dfae:	e054      	b.n	800e05a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800dfb0:	6a3b      	ldr	r3, [r7, #32]
 800dfb2:	8a5b      	ldrh	r3, [r3, #18]
 800dfb4:	89fa      	ldrh	r2, [r7, #14]
 800dfb6:	429a      	cmp	r2, r3
 800dfb8:	d14a      	bne.n	800e050 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800dfba:	7cfb      	ldrb	r3, [r7, #19]
 800dfbc:	461a      	mov	r2, r3
 800dfbe:	6839      	ldr	r1, [r7, #0]
 800dfc0:	6a38      	ldr	r0, [r7, #32]
 800dfc2:	f7ff ff49 	bl	800de58 <udp_input_local_match>
 800dfc6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d041      	beq.n	800e050 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800dfcc:	6a3b      	ldr	r3, [r7, #32]
 800dfce:	7c1b      	ldrb	r3, [r3, #16]
 800dfd0:	f003 0304 	and.w	r3, r3, #4
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d11d      	bne.n	800e014 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800dfd8:	69bb      	ldr	r3, [r7, #24]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d102      	bne.n	800dfe4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800dfde:	6a3b      	ldr	r3, [r7, #32]
 800dfe0:	61bb      	str	r3, [r7, #24]
 800dfe2:	e017      	b.n	800e014 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800dfe4:	7cfb      	ldrb	r3, [r7, #19]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d014      	beq.n	800e014 <udp_input+0xf4>
 800dfea:	4b53      	ldr	r3, [pc, #332]	@ (800e138 <udp_input+0x218>)
 800dfec:	695b      	ldr	r3, [r3, #20]
 800dfee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dff2:	d10f      	bne.n	800e014 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800dff4:	69bb      	ldr	r3, [r7, #24]
 800dff6:	681a      	ldr	r2, [r3, #0]
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	3304      	adds	r3, #4
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	429a      	cmp	r2, r3
 800e000:	d008      	beq.n	800e014 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800e002:	6a3b      	ldr	r3, [r7, #32]
 800e004:	681a      	ldr	r2, [r3, #0]
 800e006:	683b      	ldr	r3, [r7, #0]
 800e008:	3304      	adds	r3, #4
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	429a      	cmp	r2, r3
 800e00e:	d101      	bne.n	800e014 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800e010:	6a3b      	ldr	r3, [r7, #32]
 800e012:	61bb      	str	r3, [r7, #24]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800e014:	6a3b      	ldr	r3, [r7, #32]
 800e016:	8a9b      	ldrh	r3, [r3, #20]
 800e018:	8a3a      	ldrh	r2, [r7, #16]
 800e01a:	429a      	cmp	r2, r3
 800e01c:	d118      	bne.n	800e050 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e01e:	6a3b      	ldr	r3, [r7, #32]
 800e020:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800e022:	2b00      	cmp	r3, #0
 800e024:	d005      	beq.n	800e032 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800e026:	6a3b      	ldr	r3, [r7, #32]
 800e028:	685a      	ldr	r2, [r3, #4]
 800e02a:	4b43      	ldr	r3, [pc, #268]	@ (800e138 <udp_input+0x218>)
 800e02c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e02e:	429a      	cmp	r2, r3
 800e030:	d10e      	bne.n	800e050 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800e032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e034:	2b00      	cmp	r3, #0
 800e036:	d014      	beq.n	800e062 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800e038:	6a3b      	ldr	r3, [r7, #32]
 800e03a:	68da      	ldr	r2, [r3, #12]
 800e03c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e03e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800e040:	4b3e      	ldr	r3, [pc, #248]	@ (800e13c <udp_input+0x21c>)
 800e042:	681a      	ldr	r2, [r3, #0]
 800e044:	6a3b      	ldr	r3, [r7, #32]
 800e046:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800e048:	4a3c      	ldr	r2, [pc, #240]	@ (800e13c <udp_input+0x21c>)
 800e04a:	6a3b      	ldr	r3, [r7, #32]
 800e04c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800e04e:	e008      	b.n	800e062 <udp_input+0x142>
      }
    }

    prev = pcb;
 800e050:	6a3b      	ldr	r3, [r7, #32]
 800e052:	627b      	str	r3, [r7, #36]	@ 0x24
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e054:	6a3b      	ldr	r3, [r7, #32]
 800e056:	68db      	ldr	r3, [r3, #12]
 800e058:	623b      	str	r3, [r7, #32]
 800e05a:	6a3b      	ldr	r3, [r7, #32]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d1a7      	bne.n	800dfb0 <udp_input+0x90>
 800e060:	e000      	b.n	800e064 <udp_input+0x144>
        break;
 800e062:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800e064:	6a3b      	ldr	r3, [r7, #32]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d101      	bne.n	800e06e <udp_input+0x14e>
    pcb = uncon_pcb;
 800e06a:	69bb      	ldr	r3, [r7, #24]
 800e06c:	623b      	str	r3, [r7, #32]
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800e06e:	6a3b      	ldr	r3, [r7, #32]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d002      	beq.n	800e07a <udp_input+0x15a>
    for_us = 1;
 800e074:	2301      	movs	r3, #1
 800e076:	77fb      	strb	r3, [r7, #31]
 800e078:	e00a      	b.n	800e090 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	3304      	adds	r3, #4
 800e07e:	681a      	ldr	r2, [r3, #0]
 800e080:	4b2d      	ldr	r3, [pc, #180]	@ (800e138 <udp_input+0x218>)
 800e082:	695b      	ldr	r3, [r3, #20]
 800e084:	429a      	cmp	r2, r3
 800e086:	bf0c      	ite	eq
 800e088:	2301      	moveq	r3, #1
 800e08a:	2300      	movne	r3, #0
 800e08c:	b2db      	uxtb	r3, r3
 800e08e:	77fb      	strb	r3, [r7, #31]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800e090:	7ffb      	ldrb	r3, [r7, #31]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d041      	beq.n	800e11a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800e096:	2108      	movs	r1, #8
 800e098:	6878      	ldr	r0, [r7, #4]
 800e09a:	f7f8 ffa5 	bl	8006fe8 <pbuf_remove_header>
 800e09e:	4603      	mov	r3, r0
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d00a      	beq.n	800e0ba <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800e0a4:	4b20      	ldr	r3, [pc, #128]	@ (800e128 <udp_input+0x208>)
 800e0a6:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800e0aa:	4925      	ldr	r1, [pc, #148]	@ (800e140 <udp_input+0x220>)
 800e0ac:	4820      	ldr	r0, [pc, #128]	@ (800e130 <udp_input+0x210>)
 800e0ae:	f002 fca5 	bl	80109fc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800e0b2:	6878      	ldr	r0, [r7, #4]
 800e0b4:	f7f9 f81e 	bl	80070f4 <pbuf_free>
      goto end;
 800e0b8:	e032      	b.n	800e120 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800e0ba:	6a3b      	ldr	r3, [r7, #32]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d012      	beq.n	800e0e6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800e0c0:	6a3b      	ldr	r3, [r7, #32]
 800e0c2:	699b      	ldr	r3, [r3, #24]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d00a      	beq.n	800e0de <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800e0c8:	6a3b      	ldr	r3, [r7, #32]
 800e0ca:	699c      	ldr	r4, [r3, #24]
 800e0cc:	6a3b      	ldr	r3, [r7, #32]
 800e0ce:	69d8      	ldr	r0, [r3, #28]
 800e0d0:	8a3b      	ldrh	r3, [r7, #16]
 800e0d2:	9300      	str	r3, [sp, #0]
 800e0d4:	4b1b      	ldr	r3, [pc, #108]	@ (800e144 <udp_input+0x224>)
 800e0d6:	687a      	ldr	r2, [r7, #4]
 800e0d8:	6a39      	ldr	r1, [r7, #32]
 800e0da:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800e0dc:	e021      	b.n	800e122 <udp_input+0x202>
        pbuf_free(p);
 800e0de:	6878      	ldr	r0, [r7, #4]
 800e0e0:	f7f9 f808 	bl	80070f4 <pbuf_free>
        goto end;
 800e0e4:	e01c      	b.n	800e120 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e0e6:	7cfb      	ldrb	r3, [r7, #19]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d112      	bne.n	800e112 <udp_input+0x1f2>
 800e0ec:	4b12      	ldr	r3, [pc, #72]	@ (800e138 <udp_input+0x218>)
 800e0ee:	695b      	ldr	r3, [r3, #20]
 800e0f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e0f4:	2be0      	cmp	r3, #224	@ 0xe0
 800e0f6:	d00c      	beq.n	800e112 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e0f8:	4b0f      	ldr	r3, [pc, #60]	@ (800e138 <udp_input+0x218>)
 800e0fa:	899b      	ldrh	r3, [r3, #12]
 800e0fc:	3308      	adds	r3, #8
 800e0fe:	b29b      	uxth	r3, r3
 800e100:	b21b      	sxth	r3, r3
 800e102:	4619      	mov	r1, r3
 800e104:	6878      	ldr	r0, [r7, #4]
 800e106:	f7f8 ffe2 	bl	80070ce <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e10a:	2103      	movs	r1, #3
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f001 f8cf 	bl	800f2b0 <icmp_dest_unreach>
      pbuf_free(p);
 800e112:	6878      	ldr	r0, [r7, #4]
 800e114:	f7f8 ffee 	bl	80070f4 <pbuf_free>
  return;
 800e118:	e003      	b.n	800e122 <udp_input+0x202>
    pbuf_free(p);
 800e11a:	6878      	ldr	r0, [r7, #4]
 800e11c:	f7f8 ffea 	bl	80070f4 <pbuf_free>
  return;
 800e120:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800e122:	372c      	adds	r7, #44	@ 0x2c
 800e124:	46bd      	mov	sp, r7
 800e126:	bd90      	pop	{r4, r7, pc}
 800e128:	080144d8 	.word	0x080144d8
 800e12c:	0801457c 	.word	0x0801457c
 800e130:	0801452c 	.word	0x0801452c
 800e134:	08014594 	.word	0x08014594
 800e138:	20005238 	.word	0x20005238
 800e13c:	20008848 	.word	0x20008848
 800e140:	080145b0 	.word	0x080145b0
 800e144:	20005248 	.word	0x20005248

0800e148 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e148:	b480      	push	{r7}
 800e14a:	b085      	sub	sp, #20
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
 800e150:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d01e      	beq.n	800e196 <udp_netif_ip_addr_changed+0x4e>
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d01a      	beq.n	800e196 <udp_netif_ip_addr_changed+0x4e>
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d017      	beq.n	800e196 <udp_netif_ip_addr_changed+0x4e>
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d013      	beq.n	800e196 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e16e:	4b0d      	ldr	r3, [pc, #52]	@ (800e1a4 <udp_netif_ip_addr_changed+0x5c>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	60fb      	str	r3, [r7, #12]
 800e174:	e00c      	b.n	800e190 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	681a      	ldr	r2, [r3, #0]
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	429a      	cmp	r2, r3
 800e180:	d103      	bne.n	800e18a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	681a      	ldr	r2, [r3, #0]
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	68db      	ldr	r3, [r3, #12]
 800e18e:	60fb      	str	r3, [r7, #12]
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d1ef      	bne.n	800e176 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800e196:	bf00      	nop
 800e198:	3714      	adds	r7, #20
 800e19a:	46bd      	mov	sp, r7
 800e19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a0:	4770      	bx	lr
 800e1a2:	bf00      	nop
 800e1a4:	20008848 	.word	0x20008848

0800e1a8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b082      	sub	sp, #8
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800e1b0:	492b      	ldr	r1, [pc, #172]	@ (800e260 <etharp_free_entry+0xb8>)
 800e1b2:	687a      	ldr	r2, [r7, #4]
 800e1b4:	4613      	mov	r3, r2
 800e1b6:	005b      	lsls	r3, r3, #1
 800e1b8:	4413      	add	r3, r2
 800e1ba:	00db      	lsls	r3, r3, #3
 800e1bc:	440b      	add	r3, r1
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d013      	beq.n	800e1ec <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800e1c4:	4926      	ldr	r1, [pc, #152]	@ (800e260 <etharp_free_entry+0xb8>)
 800e1c6:	687a      	ldr	r2, [r7, #4]
 800e1c8:	4613      	mov	r3, r2
 800e1ca:	005b      	lsls	r3, r3, #1
 800e1cc:	4413      	add	r3, r2
 800e1ce:	00db      	lsls	r3, r3, #3
 800e1d0:	440b      	add	r3, r1
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f7f8 ff8d 	bl	80070f4 <pbuf_free>
    arp_table[i].q = NULL;
 800e1da:	4921      	ldr	r1, [pc, #132]	@ (800e260 <etharp_free_entry+0xb8>)
 800e1dc:	687a      	ldr	r2, [r7, #4]
 800e1de:	4613      	mov	r3, r2
 800e1e0:	005b      	lsls	r3, r3, #1
 800e1e2:	4413      	add	r3, r2
 800e1e4:	00db      	lsls	r3, r3, #3
 800e1e6:	440b      	add	r3, r1
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800e1ec:	491c      	ldr	r1, [pc, #112]	@ (800e260 <etharp_free_entry+0xb8>)
 800e1ee:	687a      	ldr	r2, [r7, #4]
 800e1f0:	4613      	mov	r3, r2
 800e1f2:	005b      	lsls	r3, r3, #1
 800e1f4:	4413      	add	r3, r2
 800e1f6:	00db      	lsls	r3, r3, #3
 800e1f8:	440b      	add	r3, r1
 800e1fa:	3314      	adds	r3, #20
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 800e200:	4917      	ldr	r1, [pc, #92]	@ (800e260 <etharp_free_entry+0xb8>)
 800e202:	687a      	ldr	r2, [r7, #4]
 800e204:	4613      	mov	r3, r2
 800e206:	005b      	lsls	r3, r3, #1
 800e208:	4413      	add	r3, r2
 800e20a:	00db      	lsls	r3, r3, #3
 800e20c:	440b      	add	r3, r1
 800e20e:	3312      	adds	r3, #18
 800e210:	2200      	movs	r2, #0
 800e212:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 800e214:	4912      	ldr	r1, [pc, #72]	@ (800e260 <etharp_free_entry+0xb8>)
 800e216:	687a      	ldr	r2, [r7, #4]
 800e218:	4613      	mov	r3, r2
 800e21a:	005b      	lsls	r3, r3, #1
 800e21c:	4413      	add	r3, r2
 800e21e:	00db      	lsls	r3, r3, #3
 800e220:	440b      	add	r3, r1
 800e222:	3308      	adds	r3, #8
 800e224:	2200      	movs	r2, #0
 800e226:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 800e228:	490d      	ldr	r1, [pc, #52]	@ (800e260 <etharp_free_entry+0xb8>)
 800e22a:	687a      	ldr	r2, [r7, #4]
 800e22c:	4613      	mov	r3, r2
 800e22e:	005b      	lsls	r3, r3, #1
 800e230:	4413      	add	r3, r2
 800e232:	00db      	lsls	r3, r3, #3
 800e234:	440b      	add	r3, r1
 800e236:	3304      	adds	r3, #4
 800e238:	2200      	movs	r2, #0
 800e23a:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 800e23c:	4908      	ldr	r1, [pc, #32]	@ (800e260 <etharp_free_entry+0xb8>)
 800e23e:	687a      	ldr	r2, [r7, #4]
 800e240:	4613      	mov	r3, r2
 800e242:	005b      	lsls	r3, r3, #1
 800e244:	4413      	add	r3, r2
 800e246:	00db      	lsls	r3, r3, #3
 800e248:	440b      	add	r3, r1
 800e24a:	3308      	adds	r3, #8
 800e24c:	4a05      	ldr	r2, [pc, #20]	@ (800e264 <etharp_free_entry+0xbc>)
 800e24e:	3304      	adds	r3, #4
 800e250:	6810      	ldr	r0, [r2, #0]
 800e252:	6018      	str	r0, [r3, #0]
 800e254:	8892      	ldrh	r2, [r2, #4]
 800e256:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 800e258:	bf00      	nop
 800e25a:	3708      	adds	r7, #8
 800e25c:	46bd      	mov	sp, r7
 800e25e:	bd80      	pop	{r7, pc}
 800e260:	2000884c 	.word	0x2000884c
 800e264:	0801505c 	.word	0x0801505c

0800e268 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b082      	sub	sp, #8
 800e26c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e26e:	2300      	movs	r3, #0
 800e270:	607b      	str	r3, [r7, #4]
 800e272:	e096      	b.n	800e3a2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800e274:	494f      	ldr	r1, [pc, #316]	@ (800e3b4 <etharp_tmr+0x14c>)
 800e276:	687a      	ldr	r2, [r7, #4]
 800e278:	4613      	mov	r3, r2
 800e27a:	005b      	lsls	r3, r3, #1
 800e27c:	4413      	add	r3, r2
 800e27e:	00db      	lsls	r3, r3, #3
 800e280:	440b      	add	r3, r1
 800e282:	3314      	adds	r3, #20
 800e284:	781b      	ldrb	r3, [r3, #0]
 800e286:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800e288:	78fb      	ldrb	r3, [r7, #3]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	f000 8086 	beq.w	800e39c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800e290:	4948      	ldr	r1, [pc, #288]	@ (800e3b4 <etharp_tmr+0x14c>)
 800e292:	687a      	ldr	r2, [r7, #4]
 800e294:	4613      	mov	r3, r2
 800e296:	005b      	lsls	r3, r3, #1
 800e298:	4413      	add	r3, r2
 800e29a:	00db      	lsls	r3, r3, #3
 800e29c:	440b      	add	r3, r1
 800e29e:	3312      	adds	r3, #18
 800e2a0:	881b      	ldrh	r3, [r3, #0]
 800e2a2:	3301      	adds	r3, #1
 800e2a4:	b298      	uxth	r0, r3
 800e2a6:	4943      	ldr	r1, [pc, #268]	@ (800e3b4 <etharp_tmr+0x14c>)
 800e2a8:	687a      	ldr	r2, [r7, #4]
 800e2aa:	4613      	mov	r3, r2
 800e2ac:	005b      	lsls	r3, r3, #1
 800e2ae:	4413      	add	r3, r2
 800e2b0:	00db      	lsls	r3, r3, #3
 800e2b2:	440b      	add	r3, r1
 800e2b4:	3312      	adds	r3, #18
 800e2b6:	4602      	mov	r2, r0
 800e2b8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e2ba:	493e      	ldr	r1, [pc, #248]	@ (800e3b4 <etharp_tmr+0x14c>)
 800e2bc:	687a      	ldr	r2, [r7, #4]
 800e2be:	4613      	mov	r3, r2
 800e2c0:	005b      	lsls	r3, r3, #1
 800e2c2:	4413      	add	r3, r2
 800e2c4:	00db      	lsls	r3, r3, #3
 800e2c6:	440b      	add	r3, r1
 800e2c8:	3312      	adds	r3, #18
 800e2ca:	881b      	ldrh	r3, [r3, #0]
 800e2cc:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800e2d0:	d215      	bcs.n	800e2fe <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e2d2:	4938      	ldr	r1, [pc, #224]	@ (800e3b4 <etharp_tmr+0x14c>)
 800e2d4:	687a      	ldr	r2, [r7, #4]
 800e2d6:	4613      	mov	r3, r2
 800e2d8:	005b      	lsls	r3, r3, #1
 800e2da:	4413      	add	r3, r2
 800e2dc:	00db      	lsls	r3, r3, #3
 800e2de:	440b      	add	r3, r1
 800e2e0:	3314      	adds	r3, #20
 800e2e2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e2e4:	2b01      	cmp	r3, #1
 800e2e6:	d10e      	bne.n	800e306 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800e2e8:	4932      	ldr	r1, [pc, #200]	@ (800e3b4 <etharp_tmr+0x14c>)
 800e2ea:	687a      	ldr	r2, [r7, #4]
 800e2ec:	4613      	mov	r3, r2
 800e2ee:	005b      	lsls	r3, r3, #1
 800e2f0:	4413      	add	r3, r2
 800e2f2:	00db      	lsls	r3, r3, #3
 800e2f4:	440b      	add	r3, r1
 800e2f6:	3312      	adds	r3, #18
 800e2f8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e2fa:	2b04      	cmp	r3, #4
 800e2fc:	d903      	bls.n	800e306 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800e2fe:	6878      	ldr	r0, [r7, #4]
 800e300:	f7ff ff52 	bl	800e1a8 <etharp_free_entry>
 800e304:	e04a      	b.n	800e39c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800e306:	492b      	ldr	r1, [pc, #172]	@ (800e3b4 <etharp_tmr+0x14c>)
 800e308:	687a      	ldr	r2, [r7, #4]
 800e30a:	4613      	mov	r3, r2
 800e30c:	005b      	lsls	r3, r3, #1
 800e30e:	4413      	add	r3, r2
 800e310:	00db      	lsls	r3, r3, #3
 800e312:	440b      	add	r3, r1
 800e314:	3314      	adds	r3, #20
 800e316:	781b      	ldrb	r3, [r3, #0]
 800e318:	2b03      	cmp	r3, #3
 800e31a:	d10a      	bne.n	800e332 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800e31c:	4925      	ldr	r1, [pc, #148]	@ (800e3b4 <etharp_tmr+0x14c>)
 800e31e:	687a      	ldr	r2, [r7, #4]
 800e320:	4613      	mov	r3, r2
 800e322:	005b      	lsls	r3, r3, #1
 800e324:	4413      	add	r3, r2
 800e326:	00db      	lsls	r3, r3, #3
 800e328:	440b      	add	r3, r1
 800e32a:	3314      	adds	r3, #20
 800e32c:	2204      	movs	r2, #4
 800e32e:	701a      	strb	r2, [r3, #0]
 800e330:	e034      	b.n	800e39c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800e332:	4920      	ldr	r1, [pc, #128]	@ (800e3b4 <etharp_tmr+0x14c>)
 800e334:	687a      	ldr	r2, [r7, #4]
 800e336:	4613      	mov	r3, r2
 800e338:	005b      	lsls	r3, r3, #1
 800e33a:	4413      	add	r3, r2
 800e33c:	00db      	lsls	r3, r3, #3
 800e33e:	440b      	add	r3, r1
 800e340:	3314      	adds	r3, #20
 800e342:	781b      	ldrb	r3, [r3, #0]
 800e344:	2b04      	cmp	r3, #4
 800e346:	d10a      	bne.n	800e35e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800e348:	491a      	ldr	r1, [pc, #104]	@ (800e3b4 <etharp_tmr+0x14c>)
 800e34a:	687a      	ldr	r2, [r7, #4]
 800e34c:	4613      	mov	r3, r2
 800e34e:	005b      	lsls	r3, r3, #1
 800e350:	4413      	add	r3, r2
 800e352:	00db      	lsls	r3, r3, #3
 800e354:	440b      	add	r3, r1
 800e356:	3314      	adds	r3, #20
 800e358:	2202      	movs	r2, #2
 800e35a:	701a      	strb	r2, [r3, #0]
 800e35c:	e01e      	b.n	800e39c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e35e:	4915      	ldr	r1, [pc, #84]	@ (800e3b4 <etharp_tmr+0x14c>)
 800e360:	687a      	ldr	r2, [r7, #4]
 800e362:	4613      	mov	r3, r2
 800e364:	005b      	lsls	r3, r3, #1
 800e366:	4413      	add	r3, r2
 800e368:	00db      	lsls	r3, r3, #3
 800e36a:	440b      	add	r3, r1
 800e36c:	3314      	adds	r3, #20
 800e36e:	781b      	ldrb	r3, [r3, #0]
 800e370:	2b01      	cmp	r3, #1
 800e372:	d113      	bne.n	800e39c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800e374:	490f      	ldr	r1, [pc, #60]	@ (800e3b4 <etharp_tmr+0x14c>)
 800e376:	687a      	ldr	r2, [r7, #4]
 800e378:	4613      	mov	r3, r2
 800e37a:	005b      	lsls	r3, r3, #1
 800e37c:	4413      	add	r3, r2
 800e37e:	00db      	lsls	r3, r3, #3
 800e380:	440b      	add	r3, r1
 800e382:	3308      	adds	r3, #8
 800e384:	6818      	ldr	r0, [r3, #0]
 800e386:	687a      	ldr	r2, [r7, #4]
 800e388:	4613      	mov	r3, r2
 800e38a:	005b      	lsls	r3, r3, #1
 800e38c:	4413      	add	r3, r2
 800e38e:	00db      	lsls	r3, r3, #3
 800e390:	4a08      	ldr	r2, [pc, #32]	@ (800e3b4 <etharp_tmr+0x14c>)
 800e392:	4413      	add	r3, r2
 800e394:	3304      	adds	r3, #4
 800e396:	4619      	mov	r1, r3
 800e398:	f000 fe6e 	bl	800f078 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	3301      	adds	r3, #1
 800e3a0:	607b      	str	r3, [r7, #4]
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	2b09      	cmp	r3, #9
 800e3a6:	f77f af65 	ble.w	800e274 <etharp_tmr+0xc>
      }
    }
  }
}
 800e3aa:	bf00      	nop
 800e3ac:	bf00      	nop
 800e3ae:	3708      	adds	r7, #8
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}
 800e3b4:	2000884c 	.word	0x2000884c

0800e3b8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b08a      	sub	sp, #40	@ 0x28
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	60f8      	str	r0, [r7, #12]
 800e3c0:	460b      	mov	r3, r1
 800e3c2:	607a      	str	r2, [r7, #4]
 800e3c4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800e3c6:	230a      	movs	r3, #10
 800e3c8:	843b      	strh	r3, [r7, #32]
 800e3ca:	230a      	movs	r3, #10
 800e3cc:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t empty = ARP_TABLE_SIZE;
 800e3ce:	230a      	movs	r3, #10
 800e3d0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t i = 0;
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800e3d6:	230a      	movs	r3, #10
 800e3d8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800e3da:	2300      	movs	r3, #0
 800e3dc:	83bb      	strh	r3, [r7, #28]
 800e3de:	2300      	movs	r3, #0
 800e3e0:	837b      	strh	r3, [r7, #26]
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e3ea:	e0ae      	b.n	800e54a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800e3ec:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800e3f0:	49a6      	ldr	r1, [pc, #664]	@ (800e68c <etharp_find_entry+0x2d4>)
 800e3f2:	4613      	mov	r3, r2
 800e3f4:	005b      	lsls	r3, r3, #1
 800e3f6:	4413      	add	r3, r2
 800e3f8:	00db      	lsls	r3, r3, #3
 800e3fa:	440b      	add	r3, r1
 800e3fc:	3314      	adds	r3, #20
 800e3fe:	781b      	ldrb	r3, [r3, #0]
 800e400:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800e402:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800e406:	2b0a      	cmp	r3, #10
 800e408:	d105      	bne.n	800e416 <etharp_find_entry+0x5e>
 800e40a:	7dfb      	ldrb	r3, [r7, #23]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d102      	bne.n	800e416 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800e410:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e412:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800e414:	e095      	b.n	800e542 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800e416:	7dfb      	ldrb	r3, [r7, #23]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	f000 8092 	beq.w	800e542 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800e41e:	7dfb      	ldrb	r3, [r7, #23]
 800e420:	2b01      	cmp	r3, #1
 800e422:	d009      	beq.n	800e438 <etharp_find_entry+0x80>
 800e424:	7dfb      	ldrb	r3, [r7, #23]
 800e426:	2b01      	cmp	r3, #1
 800e428:	d806      	bhi.n	800e438 <etharp_find_entry+0x80>
 800e42a:	4b99      	ldr	r3, [pc, #612]	@ (800e690 <etharp_find_entry+0x2d8>)
 800e42c:	f240 1223 	movw	r2, #291	@ 0x123
 800e430:	4998      	ldr	r1, [pc, #608]	@ (800e694 <etharp_find_entry+0x2dc>)
 800e432:	4899      	ldr	r0, [pc, #612]	@ (800e698 <etharp_find_entry+0x2e0>)
 800e434:	f002 fae2 	bl	80109fc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d020      	beq.n	800e480 <etharp_find_entry+0xc8>
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	6819      	ldr	r1, [r3, #0]
 800e442:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800e446:	4891      	ldr	r0, [pc, #580]	@ (800e68c <etharp_find_entry+0x2d4>)
 800e448:	4613      	mov	r3, r2
 800e44a:	005b      	lsls	r3, r3, #1
 800e44c:	4413      	add	r3, r2
 800e44e:	00db      	lsls	r3, r3, #3
 800e450:	4403      	add	r3, r0
 800e452:	3304      	adds	r3, #4
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	4299      	cmp	r1, r3
 800e458:	d112      	bne.n	800e480 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d00c      	beq.n	800e47a <etharp_find_entry+0xc2>
 800e460:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800e464:	4989      	ldr	r1, [pc, #548]	@ (800e68c <etharp_find_entry+0x2d4>)
 800e466:	4613      	mov	r3, r2
 800e468:	005b      	lsls	r3, r3, #1
 800e46a:	4413      	add	r3, r2
 800e46c:	00db      	lsls	r3, r3, #3
 800e46e:	440b      	add	r3, r1
 800e470:	3308      	adds	r3, #8
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	687a      	ldr	r2, [r7, #4]
 800e476:	429a      	cmp	r2, r3
 800e478:	d102      	bne.n	800e480 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800e47a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800e47e:	e100      	b.n	800e682 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800e480:	7dfb      	ldrb	r3, [r7, #23]
 800e482:	2b01      	cmp	r3, #1
 800e484:	d140      	bne.n	800e508 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800e486:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800e48a:	4980      	ldr	r1, [pc, #512]	@ (800e68c <etharp_find_entry+0x2d4>)
 800e48c:	4613      	mov	r3, r2
 800e48e:	005b      	lsls	r3, r3, #1
 800e490:	4413      	add	r3, r2
 800e492:	00db      	lsls	r3, r3, #3
 800e494:	440b      	add	r3, r1
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d01a      	beq.n	800e4d2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800e49c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800e4a0:	497a      	ldr	r1, [pc, #488]	@ (800e68c <etharp_find_entry+0x2d4>)
 800e4a2:	4613      	mov	r3, r2
 800e4a4:	005b      	lsls	r3, r3, #1
 800e4a6:	4413      	add	r3, r2
 800e4a8:	00db      	lsls	r3, r3, #3
 800e4aa:	440b      	add	r3, r1
 800e4ac:	3312      	adds	r3, #18
 800e4ae:	881b      	ldrh	r3, [r3, #0]
 800e4b0:	8bba      	ldrh	r2, [r7, #28]
 800e4b2:	429a      	cmp	r2, r3
 800e4b4:	d845      	bhi.n	800e542 <etharp_find_entry+0x18a>
            old_queue = i;
 800e4b6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e4b8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800e4ba:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800e4be:	4973      	ldr	r1, [pc, #460]	@ (800e68c <etharp_find_entry+0x2d4>)
 800e4c0:	4613      	mov	r3, r2
 800e4c2:	005b      	lsls	r3, r3, #1
 800e4c4:	4413      	add	r3, r2
 800e4c6:	00db      	lsls	r3, r3, #3
 800e4c8:	440b      	add	r3, r1
 800e4ca:	3312      	adds	r3, #18
 800e4cc:	881b      	ldrh	r3, [r3, #0]
 800e4ce:	83bb      	strh	r3, [r7, #28]
 800e4d0:	e037      	b.n	800e542 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800e4d2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800e4d6:	496d      	ldr	r1, [pc, #436]	@ (800e68c <etharp_find_entry+0x2d4>)
 800e4d8:	4613      	mov	r3, r2
 800e4da:	005b      	lsls	r3, r3, #1
 800e4dc:	4413      	add	r3, r2
 800e4de:	00db      	lsls	r3, r3, #3
 800e4e0:	440b      	add	r3, r1
 800e4e2:	3312      	adds	r3, #18
 800e4e4:	881b      	ldrh	r3, [r3, #0]
 800e4e6:	8b7a      	ldrh	r2, [r7, #26]
 800e4e8:	429a      	cmp	r2, r3
 800e4ea:	d82a      	bhi.n	800e542 <etharp_find_entry+0x18a>
            old_pending = i;
 800e4ec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e4ee:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 800e4f0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800e4f4:	4965      	ldr	r1, [pc, #404]	@ (800e68c <etharp_find_entry+0x2d4>)
 800e4f6:	4613      	mov	r3, r2
 800e4f8:	005b      	lsls	r3, r3, #1
 800e4fa:	4413      	add	r3, r2
 800e4fc:	00db      	lsls	r3, r3, #3
 800e4fe:	440b      	add	r3, r1
 800e500:	3312      	adds	r3, #18
 800e502:	881b      	ldrh	r3, [r3, #0]
 800e504:	837b      	strh	r3, [r7, #26]
 800e506:	e01c      	b.n	800e542 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800e508:	7dfb      	ldrb	r3, [r7, #23]
 800e50a:	2b01      	cmp	r3, #1
 800e50c:	d919      	bls.n	800e542 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800e50e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800e512:	495e      	ldr	r1, [pc, #376]	@ (800e68c <etharp_find_entry+0x2d4>)
 800e514:	4613      	mov	r3, r2
 800e516:	005b      	lsls	r3, r3, #1
 800e518:	4413      	add	r3, r2
 800e51a:	00db      	lsls	r3, r3, #3
 800e51c:	440b      	add	r3, r1
 800e51e:	3312      	adds	r3, #18
 800e520:	881b      	ldrh	r3, [r3, #0]
 800e522:	8b3a      	ldrh	r2, [r7, #24]
 800e524:	429a      	cmp	r2, r3
 800e526:	d80c      	bhi.n	800e542 <etharp_find_entry+0x18a>
            old_stable = i;
 800e528:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e52a:	847b      	strh	r3, [r7, #34]	@ 0x22
            age_stable = arp_table[i].ctime;
 800e52c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800e530:	4956      	ldr	r1, [pc, #344]	@ (800e68c <etharp_find_entry+0x2d4>)
 800e532:	4613      	mov	r3, r2
 800e534:	005b      	lsls	r3, r3, #1
 800e536:	4413      	add	r3, r2
 800e538:	00db      	lsls	r3, r3, #3
 800e53a:	440b      	add	r3, r1
 800e53c:	3312      	adds	r3, #18
 800e53e:	881b      	ldrh	r3, [r3, #0]
 800e540:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e542:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e544:	3301      	adds	r3, #1
 800e546:	b29b      	uxth	r3, r3
 800e548:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e54a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800e54e:	2b09      	cmp	r3, #9
 800e550:	f77f af4c 	ble.w	800e3ec <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800e554:	7afb      	ldrb	r3, [r7, #11]
 800e556:	f003 0302 	and.w	r3, r3, #2
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d108      	bne.n	800e570 <etharp_find_entry+0x1b8>
 800e55e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800e562:	2b0a      	cmp	r3, #10
 800e564:	d107      	bne.n	800e576 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800e566:	7afb      	ldrb	r3, [r7, #11]
 800e568:	f003 0301 	and.w	r3, r3, #1
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d102      	bne.n	800e576 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800e570:	f04f 33ff 	mov.w	r3, #4294967295
 800e574:	e085      	b.n	800e682 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800e576:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800e57a:	2b09      	cmp	r3, #9
 800e57c:	dc02      	bgt.n	800e584 <etharp_find_entry+0x1cc>
    i = empty;
 800e57e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e580:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e582:	e039      	b.n	800e5f8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800e584:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800e588:	2b09      	cmp	r3, #9
 800e58a:	dc14      	bgt.n	800e5b6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800e58c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e58e:	84fb      	strh	r3, [r7, #38]	@ 0x26
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800e590:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800e594:	493d      	ldr	r1, [pc, #244]	@ (800e68c <etharp_find_entry+0x2d4>)
 800e596:	4613      	mov	r3, r2
 800e598:	005b      	lsls	r3, r3, #1
 800e59a:	4413      	add	r3, r2
 800e59c:	00db      	lsls	r3, r3, #3
 800e59e:	440b      	add	r3, r1
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d018      	beq.n	800e5d8 <etharp_find_entry+0x220>
 800e5a6:	4b3a      	ldr	r3, [pc, #232]	@ (800e690 <etharp_find_entry+0x2d8>)
 800e5a8:	f240 126d 	movw	r2, #365	@ 0x16d
 800e5ac:	493b      	ldr	r1, [pc, #236]	@ (800e69c <etharp_find_entry+0x2e4>)
 800e5ae:	483a      	ldr	r0, [pc, #232]	@ (800e698 <etharp_find_entry+0x2e0>)
 800e5b0:	f002 fa24 	bl	80109fc <iprintf>
 800e5b4:	e010      	b.n	800e5d8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800e5b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e5ba:	2b09      	cmp	r3, #9
 800e5bc:	dc02      	bgt.n	800e5c4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800e5be:	8c3b      	ldrh	r3, [r7, #32]
 800e5c0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e5c2:	e009      	b.n	800e5d8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800e5c4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800e5c8:	2b09      	cmp	r3, #9
 800e5ca:	dc02      	bgt.n	800e5d2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800e5cc:	8bfb      	ldrh	r3, [r7, #30]
 800e5ce:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e5d0:	e002      	b.n	800e5d8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800e5d2:	f04f 33ff 	mov.w	r3, #4294967295
 800e5d6:	e054      	b.n	800e682 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e5d8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800e5dc:	2b09      	cmp	r3, #9
 800e5de:	dd06      	ble.n	800e5ee <etharp_find_entry+0x236>
 800e5e0:	4b2b      	ldr	r3, [pc, #172]	@ (800e690 <etharp_find_entry+0x2d8>)
 800e5e2:	f240 127f 	movw	r2, #383	@ 0x17f
 800e5e6:	492e      	ldr	r1, [pc, #184]	@ (800e6a0 <etharp_find_entry+0x2e8>)
 800e5e8:	482b      	ldr	r0, [pc, #172]	@ (800e698 <etharp_find_entry+0x2e0>)
 800e5ea:	f002 fa07 	bl	80109fc <iprintf>
    etharp_free_entry(i);
 800e5ee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f7ff fdd8 	bl	800e1a8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e5f8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800e5fc:	2b09      	cmp	r3, #9
 800e5fe:	dd06      	ble.n	800e60e <etharp_find_entry+0x256>
 800e600:	4b23      	ldr	r3, [pc, #140]	@ (800e690 <etharp_find_entry+0x2d8>)
 800e602:	f240 1283 	movw	r2, #387	@ 0x183
 800e606:	4926      	ldr	r1, [pc, #152]	@ (800e6a0 <etharp_find_entry+0x2e8>)
 800e608:	4823      	ldr	r0, [pc, #140]	@ (800e698 <etharp_find_entry+0x2e0>)
 800e60a:	f002 f9f7 	bl	80109fc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800e60e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800e612:	491e      	ldr	r1, [pc, #120]	@ (800e68c <etharp_find_entry+0x2d4>)
 800e614:	4613      	mov	r3, r2
 800e616:	005b      	lsls	r3, r3, #1
 800e618:	4413      	add	r3, r2
 800e61a:	00db      	lsls	r3, r3, #3
 800e61c:	440b      	add	r3, r1
 800e61e:	3314      	adds	r3, #20
 800e620:	781b      	ldrb	r3, [r3, #0]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d006      	beq.n	800e634 <etharp_find_entry+0x27c>
 800e626:	4b1a      	ldr	r3, [pc, #104]	@ (800e690 <etharp_find_entry+0x2d8>)
 800e628:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800e62c:	491d      	ldr	r1, [pc, #116]	@ (800e6a4 <etharp_find_entry+0x2ec>)
 800e62e:	481a      	ldr	r0, [pc, #104]	@ (800e698 <etharp_find_entry+0x2e0>)
 800e630:	f002 f9e4 	bl	80109fc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d00b      	beq.n	800e652 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800e63a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	6819      	ldr	r1, [r3, #0]
 800e642:	4812      	ldr	r0, [pc, #72]	@ (800e68c <etharp_find_entry+0x2d4>)
 800e644:	4613      	mov	r3, r2
 800e646:	005b      	lsls	r3, r3, #1
 800e648:	4413      	add	r3, r2
 800e64a:	00db      	lsls	r3, r3, #3
 800e64c:	4403      	add	r3, r0
 800e64e:	3304      	adds	r3, #4
 800e650:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800e652:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800e656:	490d      	ldr	r1, [pc, #52]	@ (800e68c <etharp_find_entry+0x2d4>)
 800e658:	4613      	mov	r3, r2
 800e65a:	005b      	lsls	r3, r3, #1
 800e65c:	4413      	add	r3, r2
 800e65e:	00db      	lsls	r3, r3, #3
 800e660:	440b      	add	r3, r1
 800e662:	3312      	adds	r3, #18
 800e664:	2200      	movs	r2, #0
 800e666:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800e668:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800e66c:	4907      	ldr	r1, [pc, #28]	@ (800e68c <etharp_find_entry+0x2d4>)
 800e66e:	4613      	mov	r3, r2
 800e670:	005b      	lsls	r3, r3, #1
 800e672:	4413      	add	r3, r2
 800e674:	00db      	lsls	r3, r3, #3
 800e676:	440b      	add	r3, r1
 800e678:	3308      	adds	r3, #8
 800e67a:	687a      	ldr	r2, [r7, #4]
 800e67c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800e67e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 800e682:	4618      	mov	r0, r3
 800e684:	3728      	adds	r7, #40	@ 0x28
 800e686:	46bd      	mov	sp, r7
 800e688:	bd80      	pop	{r7, pc}
 800e68a:	bf00      	nop
 800e68c:	2000884c 	.word	0x2000884c
 800e690:	0801483c 	.word	0x0801483c
 800e694:	08014874 	.word	0x08014874
 800e698:	080148b4 	.word	0x080148b4
 800e69c:	080148dc 	.word	0x080148dc
 800e6a0:	080148f4 	.word	0x080148f4
 800e6a4:	08014908 	.word	0x08014908

0800e6a8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b088      	sub	sp, #32
 800e6ac:	af02      	add	r7, sp, #8
 800e6ae:	60f8      	str	r0, [r7, #12]
 800e6b0:	60b9      	str	r1, [r7, #8]
 800e6b2:	607a      	str	r2, [r7, #4]
 800e6b4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800e6bc:	2b06      	cmp	r3, #6
 800e6be:	d006      	beq.n	800e6ce <etharp_update_arp_entry+0x26>
 800e6c0:	4b48      	ldr	r3, [pc, #288]	@ (800e7e4 <etharp_update_arp_entry+0x13c>)
 800e6c2:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800e6c6:	4948      	ldr	r1, [pc, #288]	@ (800e7e8 <etharp_update_arp_entry+0x140>)
 800e6c8:	4848      	ldr	r0, [pc, #288]	@ (800e7ec <etharp_update_arp_entry+0x144>)
 800e6ca:	f002 f997 	bl	80109fc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800e6ce:	68bb      	ldr	r3, [r7, #8]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d012      	beq.n	800e6fa <etharp_update_arp_entry+0x52>
 800e6d4:	68bb      	ldr	r3, [r7, #8]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d00e      	beq.n	800e6fa <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e6dc:	68bb      	ldr	r3, [r7, #8]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	68f9      	ldr	r1, [r7, #12]
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f001 f904 	bl	800f8f0 <ip4_addr_isbroadcast_u32>
 800e6e8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d105      	bne.n	800e6fa <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800e6ee:	68bb      	ldr	r3, [r7, #8]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e6f6:	2be0      	cmp	r3, #224	@ 0xe0
 800e6f8:	d102      	bne.n	800e700 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e6fa:	f06f 030f 	mvn.w	r3, #15
 800e6fe:	e06c      	b.n	800e7da <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800e700:	78fb      	ldrb	r3, [r7, #3]
 800e702:	68fa      	ldr	r2, [r7, #12]
 800e704:	4619      	mov	r1, r3
 800e706:	68b8      	ldr	r0, [r7, #8]
 800e708:	f7ff fe56 	bl	800e3b8 <etharp_find_entry>
 800e70c:	4603      	mov	r3, r0
 800e70e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800e710:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e714:	2b00      	cmp	r3, #0
 800e716:	da02      	bge.n	800e71e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800e718:	8afb      	ldrh	r3, [r7, #22]
 800e71a:	b25b      	sxtb	r3, r3
 800e71c:	e05d      	b.n	800e7da <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800e71e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e722:	4933      	ldr	r1, [pc, #204]	@ (800e7f0 <etharp_update_arp_entry+0x148>)
 800e724:	4613      	mov	r3, r2
 800e726:	005b      	lsls	r3, r3, #1
 800e728:	4413      	add	r3, r2
 800e72a:	00db      	lsls	r3, r3, #3
 800e72c:	440b      	add	r3, r1
 800e72e:	3314      	adds	r3, #20
 800e730:	2202      	movs	r2, #2
 800e732:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800e734:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e738:	492d      	ldr	r1, [pc, #180]	@ (800e7f0 <etharp_update_arp_entry+0x148>)
 800e73a:	4613      	mov	r3, r2
 800e73c:	005b      	lsls	r3, r3, #1
 800e73e:	4413      	add	r3, r2
 800e740:	00db      	lsls	r3, r3, #3
 800e742:	440b      	add	r3, r1
 800e744:	3308      	adds	r3, #8
 800e746:	68fa      	ldr	r2, [r7, #12]
 800e748:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800e74a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e74e:	4613      	mov	r3, r2
 800e750:	005b      	lsls	r3, r3, #1
 800e752:	4413      	add	r3, r2
 800e754:	00db      	lsls	r3, r3, #3
 800e756:	3308      	adds	r3, #8
 800e758:	4a25      	ldr	r2, [pc, #148]	@ (800e7f0 <etharp_update_arp_entry+0x148>)
 800e75a:	4413      	add	r3, r2
 800e75c:	3304      	adds	r3, #4
 800e75e:	2206      	movs	r2, #6
 800e760:	6879      	ldr	r1, [r7, #4]
 800e762:	4618      	mov	r0, r3
 800e764:	f002 fb1f 	bl	8010da6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800e768:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e76c:	4920      	ldr	r1, [pc, #128]	@ (800e7f0 <etharp_update_arp_entry+0x148>)
 800e76e:	4613      	mov	r3, r2
 800e770:	005b      	lsls	r3, r3, #1
 800e772:	4413      	add	r3, r2
 800e774:	00db      	lsls	r3, r3, #3
 800e776:	440b      	add	r3, r1
 800e778:	3312      	adds	r3, #18
 800e77a:	2200      	movs	r2, #0
 800e77c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800e77e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e782:	491b      	ldr	r1, [pc, #108]	@ (800e7f0 <etharp_update_arp_entry+0x148>)
 800e784:	4613      	mov	r3, r2
 800e786:	005b      	lsls	r3, r3, #1
 800e788:	4413      	add	r3, r2
 800e78a:	00db      	lsls	r3, r3, #3
 800e78c:	440b      	add	r3, r1
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d021      	beq.n	800e7d8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800e794:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e798:	4915      	ldr	r1, [pc, #84]	@ (800e7f0 <etharp_update_arp_entry+0x148>)
 800e79a:	4613      	mov	r3, r2
 800e79c:	005b      	lsls	r3, r3, #1
 800e79e:	4413      	add	r3, r2
 800e7a0:	00db      	lsls	r3, r3, #3
 800e7a2:	440b      	add	r3, r1
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800e7a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e7ac:	4910      	ldr	r1, [pc, #64]	@ (800e7f0 <etharp_update_arp_entry+0x148>)
 800e7ae:	4613      	mov	r3, r2
 800e7b0:	005b      	lsls	r3, r3, #1
 800e7b2:	4413      	add	r3, r2
 800e7b4:	00db      	lsls	r3, r3, #3
 800e7b6:	440b      	add	r3, r1
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800e7c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e7c6:	9300      	str	r3, [sp, #0]
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	6939      	ldr	r1, [r7, #16]
 800e7cc:	68f8      	ldr	r0, [r7, #12]
 800e7ce:	f001 ff9d 	bl	801070c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800e7d2:	6938      	ldr	r0, [r7, #16]
 800e7d4:	f7f8 fc8e 	bl	80070f4 <pbuf_free>
  }
  return ERR_OK;
 800e7d8:	2300      	movs	r3, #0
}
 800e7da:	4618      	mov	r0, r3
 800e7dc:	3718      	adds	r7, #24
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}
 800e7e2:	bf00      	nop
 800e7e4:	0801483c 	.word	0x0801483c
 800e7e8:	08014934 	.word	0x08014934
 800e7ec:	080148b4 	.word	0x080148b4
 800e7f0:	2000884c 	.word	0x2000884c

0800e7f4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b084      	sub	sp, #16
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	60fb      	str	r3, [r7, #12]
 800e800:	e01e      	b.n	800e840 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800e802:	4913      	ldr	r1, [pc, #76]	@ (800e850 <etharp_cleanup_netif+0x5c>)
 800e804:	68fa      	ldr	r2, [r7, #12]
 800e806:	4613      	mov	r3, r2
 800e808:	005b      	lsls	r3, r3, #1
 800e80a:	4413      	add	r3, r2
 800e80c:	00db      	lsls	r3, r3, #3
 800e80e:	440b      	add	r3, r1
 800e810:	3314      	adds	r3, #20
 800e812:	781b      	ldrb	r3, [r3, #0]
 800e814:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800e816:	7afb      	ldrb	r3, [r7, #11]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d00e      	beq.n	800e83a <etharp_cleanup_netif+0x46>
 800e81c:	490c      	ldr	r1, [pc, #48]	@ (800e850 <etharp_cleanup_netif+0x5c>)
 800e81e:	68fa      	ldr	r2, [r7, #12]
 800e820:	4613      	mov	r3, r2
 800e822:	005b      	lsls	r3, r3, #1
 800e824:	4413      	add	r3, r2
 800e826:	00db      	lsls	r3, r3, #3
 800e828:	440b      	add	r3, r1
 800e82a:	3308      	adds	r3, #8
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	687a      	ldr	r2, [r7, #4]
 800e830:	429a      	cmp	r2, r3
 800e832:	d102      	bne.n	800e83a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800e834:	68f8      	ldr	r0, [r7, #12]
 800e836:	f7ff fcb7 	bl	800e1a8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	3301      	adds	r3, #1
 800e83e:	60fb      	str	r3, [r7, #12]
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	2b09      	cmp	r3, #9
 800e844:	dddd      	ble.n	800e802 <etharp_cleanup_netif+0xe>
    }
  }
}
 800e846:	bf00      	nop
 800e848:	bf00      	nop
 800e84a:	3710      	adds	r7, #16
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}
 800e850:	2000884c 	.word	0x2000884c

0800e854 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800e854:	b5b0      	push	{r4, r5, r7, lr}
 800e856:	b08a      	sub	sp, #40	@ 0x28
 800e858:	af04      	add	r7, sp, #16
 800e85a:	6078      	str	r0, [r7, #4]
 800e85c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e85e:	683b      	ldr	r3, [r7, #0]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d107      	bne.n	800e874 <etharp_input+0x20>
 800e864:	4b3d      	ldr	r3, [pc, #244]	@ (800e95c <etharp_input+0x108>)
 800e866:	f240 228a 	movw	r2, #650	@ 0x28a
 800e86a:	493d      	ldr	r1, [pc, #244]	@ (800e960 <etharp_input+0x10c>)
 800e86c:	483d      	ldr	r0, [pc, #244]	@ (800e964 <etharp_input+0x110>)
 800e86e:	f002 f8c5 	bl	80109fc <iprintf>
 800e872:	e06f      	b.n	800e954 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	685b      	ldr	r3, [r3, #4]
 800e878:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e87a:	697b      	ldr	r3, [r7, #20]
 800e87c:	881b      	ldrh	r3, [r3, #0]
 800e87e:	b29b      	uxth	r3, r3
 800e880:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e884:	d10c      	bne.n	800e8a0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e886:	697b      	ldr	r3, [r7, #20]
 800e888:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e88a:	2b06      	cmp	r3, #6
 800e88c:	d108      	bne.n	800e8a0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e88e:	697b      	ldr	r3, [r7, #20]
 800e890:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e892:	2b04      	cmp	r3, #4
 800e894:	d104      	bne.n	800e8a0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800e896:	697b      	ldr	r3, [r7, #20]
 800e898:	885b      	ldrh	r3, [r3, #2]
 800e89a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e89c:	2b08      	cmp	r3, #8
 800e89e:	d003      	beq.n	800e8a8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800e8a0:	6878      	ldr	r0, [r7, #4]
 800e8a2:	f7f8 fc27 	bl	80070f4 <pbuf_free>
    return;
 800e8a6:	e055      	b.n	800e954 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800e8a8:	697b      	ldr	r3, [r7, #20]
 800e8aa:	330e      	adds	r3, #14
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800e8b0:	697b      	ldr	r3, [r7, #20]
 800e8b2:	3318      	adds	r3, #24
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e8b8:	683b      	ldr	r3, [r7, #0]
 800e8ba:	3304      	adds	r3, #4
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d102      	bne.n	800e8c8 <etharp_input+0x74>
    for_us = 0;
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	74fb      	strb	r3, [r7, #19]
 800e8c6:	e009      	b.n	800e8dc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800e8c8:	68ba      	ldr	r2, [r7, #8]
 800e8ca:	683b      	ldr	r3, [r7, #0]
 800e8cc:	3304      	adds	r3, #4
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	429a      	cmp	r2, r3
 800e8d2:	bf0c      	ite	eq
 800e8d4:	2301      	moveq	r3, #1
 800e8d6:	2300      	movne	r3, #0
 800e8d8:	b2db      	uxtb	r3, r3
 800e8da:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e8dc:	697b      	ldr	r3, [r7, #20]
 800e8de:	f103 0208 	add.w	r2, r3, #8
 800e8e2:	7cfb      	ldrb	r3, [r7, #19]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d001      	beq.n	800e8ec <etharp_input+0x98>
 800e8e8:	2301      	movs	r3, #1
 800e8ea:	e000      	b.n	800e8ee <etharp_input+0x9a>
 800e8ec:	2302      	movs	r3, #2
 800e8ee:	f107 010c 	add.w	r1, r7, #12
 800e8f2:	6838      	ldr	r0, [r7, #0]
 800e8f4:	f7ff fed8 	bl	800e6a8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800e8f8:	697b      	ldr	r3, [r7, #20]
 800e8fa:	88db      	ldrh	r3, [r3, #6]
 800e8fc:	b29b      	uxth	r3, r3
 800e8fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e902:	d003      	beq.n	800e90c <etharp_input+0xb8>
 800e904:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e908:	d01e      	beq.n	800e948 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800e90a:	e020      	b.n	800e94e <etharp_input+0xfa>
      if (for_us) {
 800e90c:	7cfb      	ldrb	r3, [r7, #19]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d01c      	beq.n	800e94c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800e912:	683b      	ldr	r3, [r7, #0]
 800e914:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800e918:	697b      	ldr	r3, [r7, #20]
 800e91a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800e928:	697a      	ldr	r2, [r7, #20]
 800e92a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800e92c:	2102      	movs	r1, #2
 800e92e:	9103      	str	r1, [sp, #12]
 800e930:	f107 010c 	add.w	r1, r7, #12
 800e934:	9102      	str	r1, [sp, #8]
 800e936:	9201      	str	r2, [sp, #4]
 800e938:	9300      	str	r3, [sp, #0]
 800e93a:	462b      	mov	r3, r5
 800e93c:	4622      	mov	r2, r4
 800e93e:	4601      	mov	r1, r0
 800e940:	6838      	ldr	r0, [r7, #0]
 800e942:	f000 faeb 	bl	800ef1c <etharp_raw>
      break;
 800e946:	e001      	b.n	800e94c <etharp_input+0xf8>
      break;
 800e948:	bf00      	nop
 800e94a:	e000      	b.n	800e94e <etharp_input+0xfa>
      break;
 800e94c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800e94e:	6878      	ldr	r0, [r7, #4]
 800e950:	f7f8 fbd0 	bl	80070f4 <pbuf_free>
}
 800e954:	3718      	adds	r7, #24
 800e956:	46bd      	mov	sp, r7
 800e958:	bdb0      	pop	{r4, r5, r7, pc}
 800e95a:	bf00      	nop
 800e95c:	0801483c 	.word	0x0801483c
 800e960:	0801498c 	.word	0x0801498c
 800e964:	080148b4 	.word	0x080148b4

0800e968 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b086      	sub	sp, #24
 800e96c:	af02      	add	r7, sp, #8
 800e96e:	60f8      	str	r0, [r7, #12]
 800e970:	60b9      	str	r1, [r7, #8]
 800e972:	4613      	mov	r3, r2
 800e974:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800e976:	79fa      	ldrb	r2, [r7, #7]
 800e978:	4944      	ldr	r1, [pc, #272]	@ (800ea8c <etharp_output_to_arp_index+0x124>)
 800e97a:	4613      	mov	r3, r2
 800e97c:	005b      	lsls	r3, r3, #1
 800e97e:	4413      	add	r3, r2
 800e980:	00db      	lsls	r3, r3, #3
 800e982:	440b      	add	r3, r1
 800e984:	3314      	adds	r3, #20
 800e986:	781b      	ldrb	r3, [r3, #0]
 800e988:	2b01      	cmp	r3, #1
 800e98a:	d806      	bhi.n	800e99a <etharp_output_to_arp_index+0x32>
 800e98c:	4b40      	ldr	r3, [pc, #256]	@ (800ea90 <etharp_output_to_arp_index+0x128>)
 800e98e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800e992:	4940      	ldr	r1, [pc, #256]	@ (800ea94 <etharp_output_to_arp_index+0x12c>)
 800e994:	4840      	ldr	r0, [pc, #256]	@ (800ea98 <etharp_output_to_arp_index+0x130>)
 800e996:	f002 f831 	bl	80109fc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800e99a:	79fa      	ldrb	r2, [r7, #7]
 800e99c:	493b      	ldr	r1, [pc, #236]	@ (800ea8c <etharp_output_to_arp_index+0x124>)
 800e99e:	4613      	mov	r3, r2
 800e9a0:	005b      	lsls	r3, r3, #1
 800e9a2:	4413      	add	r3, r2
 800e9a4:	00db      	lsls	r3, r3, #3
 800e9a6:	440b      	add	r3, r1
 800e9a8:	3314      	adds	r3, #20
 800e9aa:	781b      	ldrb	r3, [r3, #0]
 800e9ac:	2b02      	cmp	r3, #2
 800e9ae:	d153      	bne.n	800ea58 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800e9b0:	79fa      	ldrb	r2, [r7, #7]
 800e9b2:	4936      	ldr	r1, [pc, #216]	@ (800ea8c <etharp_output_to_arp_index+0x124>)
 800e9b4:	4613      	mov	r3, r2
 800e9b6:	005b      	lsls	r3, r3, #1
 800e9b8:	4413      	add	r3, r2
 800e9ba:	00db      	lsls	r3, r3, #3
 800e9bc:	440b      	add	r3, r1
 800e9be:	3312      	adds	r3, #18
 800e9c0:	881b      	ldrh	r3, [r3, #0]
 800e9c2:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800e9c6:	d919      	bls.n	800e9fc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800e9c8:	79fa      	ldrb	r2, [r7, #7]
 800e9ca:	4613      	mov	r3, r2
 800e9cc:	005b      	lsls	r3, r3, #1
 800e9ce:	4413      	add	r3, r2
 800e9d0:	00db      	lsls	r3, r3, #3
 800e9d2:	4a2e      	ldr	r2, [pc, #184]	@ (800ea8c <etharp_output_to_arp_index+0x124>)
 800e9d4:	4413      	add	r3, r2
 800e9d6:	3304      	adds	r3, #4
 800e9d8:	4619      	mov	r1, r3
 800e9da:	68f8      	ldr	r0, [r7, #12]
 800e9dc:	f000 fb4c 	bl	800f078 <etharp_request>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d138      	bne.n	800ea58 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e9e6:	79fa      	ldrb	r2, [r7, #7]
 800e9e8:	4928      	ldr	r1, [pc, #160]	@ (800ea8c <etharp_output_to_arp_index+0x124>)
 800e9ea:	4613      	mov	r3, r2
 800e9ec:	005b      	lsls	r3, r3, #1
 800e9ee:	4413      	add	r3, r2
 800e9f0:	00db      	lsls	r3, r3, #3
 800e9f2:	440b      	add	r3, r1
 800e9f4:	3314      	adds	r3, #20
 800e9f6:	2203      	movs	r2, #3
 800e9f8:	701a      	strb	r2, [r3, #0]
 800e9fa:	e02d      	b.n	800ea58 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800e9fc:	79fa      	ldrb	r2, [r7, #7]
 800e9fe:	4923      	ldr	r1, [pc, #140]	@ (800ea8c <etharp_output_to_arp_index+0x124>)
 800ea00:	4613      	mov	r3, r2
 800ea02:	005b      	lsls	r3, r3, #1
 800ea04:	4413      	add	r3, r2
 800ea06:	00db      	lsls	r3, r3, #3
 800ea08:	440b      	add	r3, r1
 800ea0a:	3312      	adds	r3, #18
 800ea0c:	881b      	ldrh	r3, [r3, #0]
 800ea0e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800ea12:	d321      	bcc.n	800ea58 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800ea14:	79fa      	ldrb	r2, [r7, #7]
 800ea16:	4613      	mov	r3, r2
 800ea18:	005b      	lsls	r3, r3, #1
 800ea1a:	4413      	add	r3, r2
 800ea1c:	00db      	lsls	r3, r3, #3
 800ea1e:	4a1b      	ldr	r2, [pc, #108]	@ (800ea8c <etharp_output_to_arp_index+0x124>)
 800ea20:	4413      	add	r3, r2
 800ea22:	1d19      	adds	r1, r3, #4
 800ea24:	79fa      	ldrb	r2, [r7, #7]
 800ea26:	4613      	mov	r3, r2
 800ea28:	005b      	lsls	r3, r3, #1
 800ea2a:	4413      	add	r3, r2
 800ea2c:	00db      	lsls	r3, r3, #3
 800ea2e:	3308      	adds	r3, #8
 800ea30:	4a16      	ldr	r2, [pc, #88]	@ (800ea8c <etharp_output_to_arp_index+0x124>)
 800ea32:	4413      	add	r3, r2
 800ea34:	3304      	adds	r3, #4
 800ea36:	461a      	mov	r2, r3
 800ea38:	68f8      	ldr	r0, [r7, #12]
 800ea3a:	f000 fafb 	bl	800f034 <etharp_request_dst>
 800ea3e:	4603      	mov	r3, r0
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d109      	bne.n	800ea58 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ea44:	79fa      	ldrb	r2, [r7, #7]
 800ea46:	4911      	ldr	r1, [pc, #68]	@ (800ea8c <etharp_output_to_arp_index+0x124>)
 800ea48:	4613      	mov	r3, r2
 800ea4a:	005b      	lsls	r3, r3, #1
 800ea4c:	4413      	add	r3, r2
 800ea4e:	00db      	lsls	r3, r3, #3
 800ea50:	440b      	add	r3, r1
 800ea52:	3314      	adds	r3, #20
 800ea54:	2203      	movs	r2, #3
 800ea56:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800ea5e:	79fa      	ldrb	r2, [r7, #7]
 800ea60:	4613      	mov	r3, r2
 800ea62:	005b      	lsls	r3, r3, #1
 800ea64:	4413      	add	r3, r2
 800ea66:	00db      	lsls	r3, r3, #3
 800ea68:	3308      	adds	r3, #8
 800ea6a:	4a08      	ldr	r2, [pc, #32]	@ (800ea8c <etharp_output_to_arp_index+0x124>)
 800ea6c:	4413      	add	r3, r2
 800ea6e:	3304      	adds	r3, #4
 800ea70:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ea74:	9200      	str	r2, [sp, #0]
 800ea76:	460a      	mov	r2, r1
 800ea78:	68b9      	ldr	r1, [r7, #8]
 800ea7a:	68f8      	ldr	r0, [r7, #12]
 800ea7c:	f001 fe46 	bl	801070c <ethernet_output>
 800ea80:	4603      	mov	r3, r0
}
 800ea82:	4618      	mov	r0, r3
 800ea84:	3710      	adds	r7, #16
 800ea86:	46bd      	mov	sp, r7
 800ea88:	bd80      	pop	{r7, pc}
 800ea8a:	bf00      	nop
 800ea8c:	2000884c 	.word	0x2000884c
 800ea90:	0801483c 	.word	0x0801483c
 800ea94:	080149ac 	.word	0x080149ac
 800ea98:	080148b4 	.word	0x080148b4

0800ea9c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b08a      	sub	sp, #40	@ 0x28
 800eaa0:	af02      	add	r7, sp, #8
 800eaa2:	60f8      	str	r0, [r7, #12]
 800eaa4:	60b9      	str	r1, [r7, #8]
 800eaa6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d106      	bne.n	800eac0 <etharp_output+0x24>
 800eab2:	4b73      	ldr	r3, [pc, #460]	@ (800ec80 <etharp_output+0x1e4>)
 800eab4:	f240 321e 	movw	r2, #798	@ 0x31e
 800eab8:	4972      	ldr	r1, [pc, #456]	@ (800ec84 <etharp_output+0x1e8>)
 800eaba:	4873      	ldr	r0, [pc, #460]	@ (800ec88 <etharp_output+0x1ec>)
 800eabc:	f001 ff9e 	bl	80109fc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800eac0:	68bb      	ldr	r3, [r7, #8]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d106      	bne.n	800ead4 <etharp_output+0x38>
 800eac6:	4b6e      	ldr	r3, [pc, #440]	@ (800ec80 <etharp_output+0x1e4>)
 800eac8:	f240 321f 	movw	r2, #799	@ 0x31f
 800eacc:	496f      	ldr	r1, [pc, #444]	@ (800ec8c <etharp_output+0x1f0>)
 800eace:	486e      	ldr	r0, [pc, #440]	@ (800ec88 <etharp_output+0x1ec>)
 800ead0:	f001 ff94 	bl	80109fc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d106      	bne.n	800eae8 <etharp_output+0x4c>
 800eada:	4b69      	ldr	r3, [pc, #420]	@ (800ec80 <etharp_output+0x1e4>)
 800eadc:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800eae0:	496b      	ldr	r1, [pc, #428]	@ (800ec90 <etharp_output+0x1f4>)
 800eae2:	4869      	ldr	r0, [pc, #420]	@ (800ec88 <etharp_output+0x1ec>)
 800eae4:	f001 ff8a 	bl	80109fc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	68f9      	ldr	r1, [r7, #12]
 800eaee:	4618      	mov	r0, r3
 800eaf0:	f000 fefe 	bl	800f8f0 <ip4_addr_isbroadcast_u32>
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d002      	beq.n	800eb00 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800eafa:	4b66      	ldr	r3, [pc, #408]	@ (800ec94 <etharp_output+0x1f8>)
 800eafc:	61fb      	str	r3, [r7, #28]
 800eafe:	e0af      	b.n	800ec60 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800eb08:	2be0      	cmp	r3, #224	@ 0xe0
 800eb0a:	d118      	bne.n	800eb3e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800eb0c:	2301      	movs	r3, #1
 800eb0e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800eb10:	2300      	movs	r3, #0
 800eb12:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800eb14:	235e      	movs	r3, #94	@ 0x5e
 800eb16:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	3301      	adds	r3, #1
 800eb1c:	781b      	ldrb	r3, [r3, #0]
 800eb1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eb22:	b2db      	uxtb	r3, r3
 800eb24:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	3302      	adds	r3, #2
 800eb2a:	781b      	ldrb	r3, [r3, #0]
 800eb2c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	3303      	adds	r3, #3
 800eb32:	781b      	ldrb	r3, [r3, #0]
 800eb34:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800eb36:	f107 0310 	add.w	r3, r7, #16
 800eb3a:	61fb      	str	r3, [r7, #28]
 800eb3c:	e090      	b.n	800ec60 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681a      	ldr	r2, [r3, #0]
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	3304      	adds	r3, #4
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	405a      	eors	r2, r3
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	3308      	adds	r3, #8
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	4013      	ands	r3, r2
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d012      	beq.n	800eb7c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800eb5c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800eb60:	4293      	cmp	r3, r2
 800eb62:	d00b      	beq.n	800eb7c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	330c      	adds	r3, #12
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d003      	beq.n	800eb76 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	330c      	adds	r3, #12
 800eb72:	61bb      	str	r3, [r7, #24]
 800eb74:	e002      	b.n	800eb7c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800eb76:	f06f 0303 	mvn.w	r3, #3
 800eb7a:	e07d      	b.n	800ec78 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800eb7c:	4b46      	ldr	r3, [pc, #280]	@ (800ec98 <etharp_output+0x1fc>)
 800eb7e:	781b      	ldrb	r3, [r3, #0]
 800eb80:	4619      	mov	r1, r3
 800eb82:	4a46      	ldr	r2, [pc, #280]	@ (800ec9c <etharp_output+0x200>)
 800eb84:	460b      	mov	r3, r1
 800eb86:	005b      	lsls	r3, r3, #1
 800eb88:	440b      	add	r3, r1
 800eb8a:	00db      	lsls	r3, r3, #3
 800eb8c:	4413      	add	r3, r2
 800eb8e:	3314      	adds	r3, #20
 800eb90:	781b      	ldrb	r3, [r3, #0]
 800eb92:	2b01      	cmp	r3, #1
 800eb94:	d925      	bls.n	800ebe2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800eb96:	4b40      	ldr	r3, [pc, #256]	@ (800ec98 <etharp_output+0x1fc>)
 800eb98:	781b      	ldrb	r3, [r3, #0]
 800eb9a:	4619      	mov	r1, r3
 800eb9c:	4a3f      	ldr	r2, [pc, #252]	@ (800ec9c <etharp_output+0x200>)
 800eb9e:	460b      	mov	r3, r1
 800eba0:	005b      	lsls	r3, r3, #1
 800eba2:	440b      	add	r3, r1
 800eba4:	00db      	lsls	r3, r3, #3
 800eba6:	4413      	add	r3, r2
 800eba8:	3308      	adds	r3, #8
 800ebaa:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ebac:	68fa      	ldr	r2, [r7, #12]
 800ebae:	429a      	cmp	r2, r3
 800ebb0:	d117      	bne.n	800ebe2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800ebb2:	69bb      	ldr	r3, [r7, #24]
 800ebb4:	681a      	ldr	r2, [r3, #0]
 800ebb6:	4b38      	ldr	r3, [pc, #224]	@ (800ec98 <etharp_output+0x1fc>)
 800ebb8:	781b      	ldrb	r3, [r3, #0]
 800ebba:	4618      	mov	r0, r3
 800ebbc:	4937      	ldr	r1, [pc, #220]	@ (800ec9c <etharp_output+0x200>)
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	005b      	lsls	r3, r3, #1
 800ebc2:	4403      	add	r3, r0
 800ebc4:	00db      	lsls	r3, r3, #3
 800ebc6:	440b      	add	r3, r1
 800ebc8:	3304      	adds	r3, #4
 800ebca:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ebcc:	429a      	cmp	r2, r3
 800ebce:	d108      	bne.n	800ebe2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800ebd0:	4b31      	ldr	r3, [pc, #196]	@ (800ec98 <etharp_output+0x1fc>)
 800ebd2:	781b      	ldrb	r3, [r3, #0]
 800ebd4:	461a      	mov	r2, r3
 800ebd6:	68b9      	ldr	r1, [r7, #8]
 800ebd8:	68f8      	ldr	r0, [r7, #12]
 800ebda:	f7ff fec5 	bl	800e968 <etharp_output_to_arp_index>
 800ebde:	4603      	mov	r3, r0
 800ebe0:	e04a      	b.n	800ec78 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	75fb      	strb	r3, [r7, #23]
 800ebe6:	e031      	b.n	800ec4c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ebe8:	7dfa      	ldrb	r2, [r7, #23]
 800ebea:	492c      	ldr	r1, [pc, #176]	@ (800ec9c <etharp_output+0x200>)
 800ebec:	4613      	mov	r3, r2
 800ebee:	005b      	lsls	r3, r3, #1
 800ebf0:	4413      	add	r3, r2
 800ebf2:	00db      	lsls	r3, r3, #3
 800ebf4:	440b      	add	r3, r1
 800ebf6:	3314      	adds	r3, #20
 800ebf8:	781b      	ldrb	r3, [r3, #0]
 800ebfa:	2b01      	cmp	r3, #1
 800ebfc:	d923      	bls.n	800ec46 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800ebfe:	7dfa      	ldrb	r2, [r7, #23]
 800ec00:	4926      	ldr	r1, [pc, #152]	@ (800ec9c <etharp_output+0x200>)
 800ec02:	4613      	mov	r3, r2
 800ec04:	005b      	lsls	r3, r3, #1
 800ec06:	4413      	add	r3, r2
 800ec08:	00db      	lsls	r3, r3, #3
 800ec0a:	440b      	add	r3, r1
 800ec0c:	3308      	adds	r3, #8
 800ec0e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ec10:	68fa      	ldr	r2, [r7, #12]
 800ec12:	429a      	cmp	r2, r3
 800ec14:	d117      	bne.n	800ec46 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800ec16:	69bb      	ldr	r3, [r7, #24]
 800ec18:	6819      	ldr	r1, [r3, #0]
 800ec1a:	7dfa      	ldrb	r2, [r7, #23]
 800ec1c:	481f      	ldr	r0, [pc, #124]	@ (800ec9c <etharp_output+0x200>)
 800ec1e:	4613      	mov	r3, r2
 800ec20:	005b      	lsls	r3, r3, #1
 800ec22:	4413      	add	r3, r2
 800ec24:	00db      	lsls	r3, r3, #3
 800ec26:	4403      	add	r3, r0
 800ec28:	3304      	adds	r3, #4
 800ec2a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800ec2c:	4299      	cmp	r1, r3
 800ec2e:	d10a      	bne.n	800ec46 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800ec30:	4a19      	ldr	r2, [pc, #100]	@ (800ec98 <etharp_output+0x1fc>)
 800ec32:	7dfb      	ldrb	r3, [r7, #23]
 800ec34:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800ec36:	7dfb      	ldrb	r3, [r7, #23]
 800ec38:	461a      	mov	r2, r3
 800ec3a:	68b9      	ldr	r1, [r7, #8]
 800ec3c:	68f8      	ldr	r0, [r7, #12]
 800ec3e:	f7ff fe93 	bl	800e968 <etharp_output_to_arp_index>
 800ec42:	4603      	mov	r3, r0
 800ec44:	e018      	b.n	800ec78 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ec46:	7dfb      	ldrb	r3, [r7, #23]
 800ec48:	3301      	adds	r3, #1
 800ec4a:	75fb      	strb	r3, [r7, #23]
 800ec4c:	7dfb      	ldrb	r3, [r7, #23]
 800ec4e:	2b09      	cmp	r3, #9
 800ec50:	d9ca      	bls.n	800ebe8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800ec52:	68ba      	ldr	r2, [r7, #8]
 800ec54:	69b9      	ldr	r1, [r7, #24]
 800ec56:	68f8      	ldr	r0, [r7, #12]
 800ec58:	f000 f822 	bl	800eca0 <etharp_query>
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	e00b      	b.n	800ec78 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800ec66:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ec6a:	9300      	str	r3, [sp, #0]
 800ec6c:	69fb      	ldr	r3, [r7, #28]
 800ec6e:	68b9      	ldr	r1, [r7, #8]
 800ec70:	68f8      	ldr	r0, [r7, #12]
 800ec72:	f001 fd4b 	bl	801070c <ethernet_output>
 800ec76:	4603      	mov	r3, r0
}
 800ec78:	4618      	mov	r0, r3
 800ec7a:	3720      	adds	r7, #32
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	bd80      	pop	{r7, pc}
 800ec80:	0801483c 	.word	0x0801483c
 800ec84:	0801498c 	.word	0x0801498c
 800ec88:	080148b4 	.word	0x080148b4
 800ec8c:	080149dc 	.word	0x080149dc
 800ec90:	0801497c 	.word	0x0801497c
 800ec94:	08015054 	.word	0x08015054
 800ec98:	2000893c 	.word	0x2000893c
 800ec9c:	2000884c 	.word	0x2000884c

0800eca0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b08c      	sub	sp, #48	@ 0x30
 800eca4:	af02      	add	r7, sp, #8
 800eca6:	60f8      	str	r0, [r7, #12]
 800eca8:	60b9      	str	r1, [r7, #8]
 800ecaa:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	3326      	adds	r3, #38	@ 0x26
 800ecb0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800ecb2:	23ff      	movs	r3, #255	@ 0xff
 800ecb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800ecb8:	2300      	movs	r3, #0
 800ecba:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ecbc:	68bb      	ldr	r3, [r7, #8]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	68f9      	ldr	r1, [r7, #12]
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	f000 fe14 	bl	800f8f0 <ip4_addr_isbroadcast_u32>
 800ecc8:	4603      	mov	r3, r0
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d10c      	bne.n	800ece8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ecce:	68bb      	ldr	r3, [r7, #8]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ecd6:	2be0      	cmp	r3, #224	@ 0xe0
 800ecd8:	d006      	beq.n	800ece8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ecda:	68bb      	ldr	r3, [r7, #8]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d003      	beq.n	800ece8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800ece0:	68bb      	ldr	r3, [r7, #8]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d102      	bne.n	800ecee <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ece8:	f06f 030f 	mvn.w	r3, #15
 800ecec:	e101      	b.n	800eef2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800ecee:	68fa      	ldr	r2, [r7, #12]
 800ecf0:	2101      	movs	r1, #1
 800ecf2:	68b8      	ldr	r0, [r7, #8]
 800ecf4:	f7ff fb60 	bl	800e3b8 <etharp_find_entry>
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800ecfc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	da02      	bge.n	800ed0a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800ed04:	8a7b      	ldrh	r3, [r7, #18]
 800ed06:	b25b      	sxtb	r3, r3
 800ed08:	e0f3      	b.n	800eef2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800ed0a:	8a7b      	ldrh	r3, [r7, #18]
 800ed0c:	2b7e      	cmp	r3, #126	@ 0x7e
 800ed0e:	d906      	bls.n	800ed1e <etharp_query+0x7e>
 800ed10:	4b7a      	ldr	r3, [pc, #488]	@ (800eefc <etharp_query+0x25c>)
 800ed12:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800ed16:	497a      	ldr	r1, [pc, #488]	@ (800ef00 <etharp_query+0x260>)
 800ed18:	487a      	ldr	r0, [pc, #488]	@ (800ef04 <etharp_query+0x264>)
 800ed1a:	f001 fe6f 	bl	80109fc <iprintf>
  i = (netif_addr_idx_t)i_err;
 800ed1e:	8a7b      	ldrh	r3, [r7, #18]
 800ed20:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800ed22:	7c7a      	ldrb	r2, [r7, #17]
 800ed24:	4978      	ldr	r1, [pc, #480]	@ (800ef08 <etharp_query+0x268>)
 800ed26:	4613      	mov	r3, r2
 800ed28:	005b      	lsls	r3, r3, #1
 800ed2a:	4413      	add	r3, r2
 800ed2c:	00db      	lsls	r3, r3, #3
 800ed2e:	440b      	add	r3, r1
 800ed30:	3314      	adds	r3, #20
 800ed32:	781b      	ldrb	r3, [r3, #0]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d115      	bne.n	800ed64 <etharp_query+0xc4>
    is_new_entry = 1;
 800ed38:	2301      	movs	r3, #1
 800ed3a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800ed3c:	7c7a      	ldrb	r2, [r7, #17]
 800ed3e:	4972      	ldr	r1, [pc, #456]	@ (800ef08 <etharp_query+0x268>)
 800ed40:	4613      	mov	r3, r2
 800ed42:	005b      	lsls	r3, r3, #1
 800ed44:	4413      	add	r3, r2
 800ed46:	00db      	lsls	r3, r3, #3
 800ed48:	440b      	add	r3, r1
 800ed4a:	3314      	adds	r3, #20
 800ed4c:	2201      	movs	r2, #1
 800ed4e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800ed50:	7c7a      	ldrb	r2, [r7, #17]
 800ed52:	496d      	ldr	r1, [pc, #436]	@ (800ef08 <etharp_query+0x268>)
 800ed54:	4613      	mov	r3, r2
 800ed56:	005b      	lsls	r3, r3, #1
 800ed58:	4413      	add	r3, r2
 800ed5a:	00db      	lsls	r3, r3, #3
 800ed5c:	440b      	add	r3, r1
 800ed5e:	3308      	adds	r3, #8
 800ed60:	68fa      	ldr	r2, [r7, #12]
 800ed62:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800ed64:	7c7a      	ldrb	r2, [r7, #17]
 800ed66:	4968      	ldr	r1, [pc, #416]	@ (800ef08 <etharp_query+0x268>)
 800ed68:	4613      	mov	r3, r2
 800ed6a:	005b      	lsls	r3, r3, #1
 800ed6c:	4413      	add	r3, r2
 800ed6e:	00db      	lsls	r3, r3, #3
 800ed70:	440b      	add	r3, r1
 800ed72:	3314      	adds	r3, #20
 800ed74:	781b      	ldrb	r3, [r3, #0]
 800ed76:	2b01      	cmp	r3, #1
 800ed78:	d011      	beq.n	800ed9e <etharp_query+0xfe>
 800ed7a:	7c7a      	ldrb	r2, [r7, #17]
 800ed7c:	4962      	ldr	r1, [pc, #392]	@ (800ef08 <etharp_query+0x268>)
 800ed7e:	4613      	mov	r3, r2
 800ed80:	005b      	lsls	r3, r3, #1
 800ed82:	4413      	add	r3, r2
 800ed84:	00db      	lsls	r3, r3, #3
 800ed86:	440b      	add	r3, r1
 800ed88:	3314      	adds	r3, #20
 800ed8a:	781b      	ldrb	r3, [r3, #0]
 800ed8c:	2b01      	cmp	r3, #1
 800ed8e:	d806      	bhi.n	800ed9e <etharp_query+0xfe>
 800ed90:	4b5a      	ldr	r3, [pc, #360]	@ (800eefc <etharp_query+0x25c>)
 800ed92:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800ed96:	495d      	ldr	r1, [pc, #372]	@ (800ef0c <etharp_query+0x26c>)
 800ed98:	485a      	ldr	r0, [pc, #360]	@ (800ef04 <etharp_query+0x264>)
 800ed9a:	f001 fe2f 	bl	80109fc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800ed9e:	6a3b      	ldr	r3, [r7, #32]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d102      	bne.n	800edaa <etharp_query+0x10a>
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d10c      	bne.n	800edc4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800edaa:	68b9      	ldr	r1, [r7, #8]
 800edac:	68f8      	ldr	r0, [r7, #12]
 800edae:	f000 f963 	bl	800f078 <etharp_request>
 800edb2:	4603      	mov	r3, r0
 800edb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d102      	bne.n	800edc4 <etharp_query+0x124>
      return result;
 800edbe:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800edc2:	e096      	b.n	800eef2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d106      	bne.n	800edd8 <etharp_query+0x138>
 800edca:	4b4c      	ldr	r3, [pc, #304]	@ (800eefc <etharp_query+0x25c>)
 800edcc:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800edd0:	494f      	ldr	r1, [pc, #316]	@ (800ef10 <etharp_query+0x270>)
 800edd2:	484c      	ldr	r0, [pc, #304]	@ (800ef04 <etharp_query+0x264>)
 800edd4:	f001 fe12 	bl	80109fc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800edd8:	7c7a      	ldrb	r2, [r7, #17]
 800edda:	494b      	ldr	r1, [pc, #300]	@ (800ef08 <etharp_query+0x268>)
 800eddc:	4613      	mov	r3, r2
 800edde:	005b      	lsls	r3, r3, #1
 800ede0:	4413      	add	r3, r2
 800ede2:	00db      	lsls	r3, r3, #3
 800ede4:	440b      	add	r3, r1
 800ede6:	3314      	adds	r3, #20
 800ede8:	781b      	ldrb	r3, [r3, #0]
 800edea:	2b01      	cmp	r3, #1
 800edec:	d917      	bls.n	800ee1e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800edee:	4a49      	ldr	r2, [pc, #292]	@ (800ef14 <etharp_query+0x274>)
 800edf0:	7c7b      	ldrb	r3, [r7, #17]
 800edf2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800edf4:	7c7a      	ldrb	r2, [r7, #17]
 800edf6:	4613      	mov	r3, r2
 800edf8:	005b      	lsls	r3, r3, #1
 800edfa:	4413      	add	r3, r2
 800edfc:	00db      	lsls	r3, r3, #3
 800edfe:	3308      	adds	r3, #8
 800ee00:	4a41      	ldr	r2, [pc, #260]	@ (800ef08 <etharp_query+0x268>)
 800ee02:	4413      	add	r3, r2
 800ee04:	3304      	adds	r3, #4
 800ee06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ee0a:	9200      	str	r2, [sp, #0]
 800ee0c:	697a      	ldr	r2, [r7, #20]
 800ee0e:	6879      	ldr	r1, [r7, #4]
 800ee10:	68f8      	ldr	r0, [r7, #12]
 800ee12:	f001 fc7b 	bl	801070c <ethernet_output>
 800ee16:	4603      	mov	r3, r0
 800ee18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ee1c:	e067      	b.n	800eeee <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ee1e:	7c7a      	ldrb	r2, [r7, #17]
 800ee20:	4939      	ldr	r1, [pc, #228]	@ (800ef08 <etharp_query+0x268>)
 800ee22:	4613      	mov	r3, r2
 800ee24:	005b      	lsls	r3, r3, #1
 800ee26:	4413      	add	r3, r2
 800ee28:	00db      	lsls	r3, r3, #3
 800ee2a:	440b      	add	r3, r1
 800ee2c:	3314      	adds	r3, #20
 800ee2e:	781b      	ldrb	r3, [r3, #0]
 800ee30:	2b01      	cmp	r3, #1
 800ee32:	d15c      	bne.n	800eeee <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800ee34:	2300      	movs	r3, #0
 800ee36:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ee3c:	e01c      	b.n	800ee78 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800ee3e:	69fb      	ldr	r3, [r7, #28]
 800ee40:	895a      	ldrh	r2, [r3, #10]
 800ee42:	69fb      	ldr	r3, [r7, #28]
 800ee44:	891b      	ldrh	r3, [r3, #8]
 800ee46:	429a      	cmp	r2, r3
 800ee48:	d10a      	bne.n	800ee60 <etharp_query+0x1c0>
 800ee4a:	69fb      	ldr	r3, [r7, #28]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d006      	beq.n	800ee60 <etharp_query+0x1c0>
 800ee52:	4b2a      	ldr	r3, [pc, #168]	@ (800eefc <etharp_query+0x25c>)
 800ee54:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800ee58:	492f      	ldr	r1, [pc, #188]	@ (800ef18 <etharp_query+0x278>)
 800ee5a:	482a      	ldr	r0, [pc, #168]	@ (800ef04 <etharp_query+0x264>)
 800ee5c:	f001 fdce 	bl	80109fc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800ee60:	69fb      	ldr	r3, [r7, #28]
 800ee62:	7b1b      	ldrb	r3, [r3, #12]
 800ee64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d002      	beq.n	800ee72 <etharp_query+0x1d2>
        copy_needed = 1;
 800ee6c:	2301      	movs	r3, #1
 800ee6e:	61bb      	str	r3, [r7, #24]
        break;
 800ee70:	e005      	b.n	800ee7e <etharp_query+0x1de>
      }
      p = p->next;
 800ee72:	69fb      	ldr	r3, [r7, #28]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ee78:	69fb      	ldr	r3, [r7, #28]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d1df      	bne.n	800ee3e <etharp_query+0x19e>
    }
    if (copy_needed) {
 800ee7e:	69bb      	ldr	r3, [r7, #24]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d007      	beq.n	800ee94 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800ee84:	687a      	ldr	r2, [r7, #4]
 800ee86:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800ee8a:	200e      	movs	r0, #14
 800ee8c:	f7f8 fb8e 	bl	80075ac <pbuf_clone>
 800ee90:	61f8      	str	r0, [r7, #28]
 800ee92:	e004      	b.n	800ee9e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800ee98:	69f8      	ldr	r0, [r7, #28]
 800ee9a:	f7f8 f9cb 	bl	8007234 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800ee9e:	69fb      	ldr	r3, [r7, #28]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d021      	beq.n	800eee8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800eea4:	7c7a      	ldrb	r2, [r7, #17]
 800eea6:	4918      	ldr	r1, [pc, #96]	@ (800ef08 <etharp_query+0x268>)
 800eea8:	4613      	mov	r3, r2
 800eeaa:	005b      	lsls	r3, r3, #1
 800eeac:	4413      	add	r3, r2
 800eeae:	00db      	lsls	r3, r3, #3
 800eeb0:	440b      	add	r3, r1
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d00a      	beq.n	800eece <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800eeb8:	7c7a      	ldrb	r2, [r7, #17]
 800eeba:	4913      	ldr	r1, [pc, #76]	@ (800ef08 <etharp_query+0x268>)
 800eebc:	4613      	mov	r3, r2
 800eebe:	005b      	lsls	r3, r3, #1
 800eec0:	4413      	add	r3, r2
 800eec2:	00db      	lsls	r3, r3, #3
 800eec4:	440b      	add	r3, r1
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	4618      	mov	r0, r3
 800eeca:	f7f8 f913 	bl	80070f4 <pbuf_free>
      }
      arp_table[i].q = p;
 800eece:	7c7a      	ldrb	r2, [r7, #17]
 800eed0:	490d      	ldr	r1, [pc, #52]	@ (800ef08 <etharp_query+0x268>)
 800eed2:	4613      	mov	r3, r2
 800eed4:	005b      	lsls	r3, r3, #1
 800eed6:	4413      	add	r3, r2
 800eed8:	00db      	lsls	r3, r3, #3
 800eeda:	440b      	add	r3, r1
 800eedc:	69fa      	ldr	r2, [r7, #28]
 800eede:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800eee0:	2300      	movs	r3, #0
 800eee2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800eee6:	e002      	b.n	800eeee <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800eee8:	23ff      	movs	r3, #255	@ 0xff
 800eeea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800eeee:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800eef2:	4618      	mov	r0, r3
 800eef4:	3728      	adds	r7, #40	@ 0x28
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd80      	pop	{r7, pc}
 800eefa:	bf00      	nop
 800eefc:	0801483c 	.word	0x0801483c
 800ef00:	080149e8 	.word	0x080149e8
 800ef04:	080148b4 	.word	0x080148b4
 800ef08:	2000884c 	.word	0x2000884c
 800ef0c:	080149f8 	.word	0x080149f8
 800ef10:	080149dc 	.word	0x080149dc
 800ef14:	2000893c 	.word	0x2000893c
 800ef18:	08014a20 	.word	0x08014a20

0800ef1c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b08a      	sub	sp, #40	@ 0x28
 800ef20:	af02      	add	r7, sp, #8
 800ef22:	60f8      	str	r0, [r7, #12]
 800ef24:	60b9      	str	r1, [r7, #8]
 800ef26:	607a      	str	r2, [r7, #4]
 800ef28:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d106      	bne.n	800ef42 <etharp_raw+0x26>
 800ef34:	4b3a      	ldr	r3, [pc, #232]	@ (800f020 <etharp_raw+0x104>)
 800ef36:	f240 4257 	movw	r2, #1111	@ 0x457
 800ef3a:	493a      	ldr	r1, [pc, #232]	@ (800f024 <etharp_raw+0x108>)
 800ef3c:	483a      	ldr	r0, [pc, #232]	@ (800f028 <etharp_raw+0x10c>)
 800ef3e:	f001 fd5d 	bl	80109fc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800ef42:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ef46:	211c      	movs	r1, #28
 800ef48:	200e      	movs	r0, #14
 800ef4a:	f7f7 fdef 	bl	8006b2c <pbuf_alloc>
 800ef4e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800ef50:	69bb      	ldr	r3, [r7, #24]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d102      	bne.n	800ef5c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800ef56:	f04f 33ff 	mov.w	r3, #4294967295
 800ef5a:	e05d      	b.n	800f018 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800ef5c:	69bb      	ldr	r3, [r7, #24]
 800ef5e:	895b      	ldrh	r3, [r3, #10]
 800ef60:	2b1b      	cmp	r3, #27
 800ef62:	d806      	bhi.n	800ef72 <etharp_raw+0x56>
 800ef64:	4b2e      	ldr	r3, [pc, #184]	@ (800f020 <etharp_raw+0x104>)
 800ef66:	f240 4262 	movw	r2, #1122	@ 0x462
 800ef6a:	4930      	ldr	r1, [pc, #192]	@ (800f02c <etharp_raw+0x110>)
 800ef6c:	482e      	ldr	r0, [pc, #184]	@ (800f028 <etharp_raw+0x10c>)
 800ef6e:	f001 fd45 	bl	80109fc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800ef72:	69bb      	ldr	r3, [r7, #24]
 800ef74:	685b      	ldr	r3, [r3, #4]
 800ef76:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800ef78:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	f7f6 fd5c 	bl	8005a38 <lwip_htons>
 800ef80:	4603      	mov	r3, r0
 800ef82:	461a      	mov	r2, r3
 800ef84:	697b      	ldr	r3, [r7, #20]
 800ef86:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ef8e:	2b06      	cmp	r3, #6
 800ef90:	d006      	beq.n	800efa0 <etharp_raw+0x84>
 800ef92:	4b23      	ldr	r3, [pc, #140]	@ (800f020 <etharp_raw+0x104>)
 800ef94:	f240 4269 	movw	r2, #1129	@ 0x469
 800ef98:	4925      	ldr	r1, [pc, #148]	@ (800f030 <etharp_raw+0x114>)
 800ef9a:	4823      	ldr	r0, [pc, #140]	@ (800f028 <etharp_raw+0x10c>)
 800ef9c:	f001 fd2e 	bl	80109fc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800efa0:	697b      	ldr	r3, [r7, #20]
 800efa2:	3308      	adds	r3, #8
 800efa4:	2206      	movs	r2, #6
 800efa6:	6839      	ldr	r1, [r7, #0]
 800efa8:	4618      	mov	r0, r3
 800efaa:	f001 fefc 	bl	8010da6 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800efae:	697b      	ldr	r3, [r7, #20]
 800efb0:	3312      	adds	r3, #18
 800efb2:	2206      	movs	r2, #6
 800efb4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800efb6:	4618      	mov	r0, r3
 800efb8:	f001 fef5 	bl	8010da6 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800efbc:	697b      	ldr	r3, [r7, #20]
 800efbe:	330e      	adds	r3, #14
 800efc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800efc2:	6812      	ldr	r2, [r2, #0]
 800efc4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800efc6:	697b      	ldr	r3, [r7, #20]
 800efc8:	3318      	adds	r3, #24
 800efca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800efcc:	6812      	ldr	r2, [r2, #0]
 800efce:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800efd0:	697b      	ldr	r3, [r7, #20]
 800efd2:	2200      	movs	r2, #0
 800efd4:	701a      	strb	r2, [r3, #0]
 800efd6:	2200      	movs	r2, #0
 800efd8:	f042 0201 	orr.w	r2, r2, #1
 800efdc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800efde:	697b      	ldr	r3, [r7, #20]
 800efe0:	2200      	movs	r2, #0
 800efe2:	f042 0208 	orr.w	r2, r2, #8
 800efe6:	709a      	strb	r2, [r3, #2]
 800efe8:	2200      	movs	r2, #0
 800efea:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800efec:	697b      	ldr	r3, [r7, #20]
 800efee:	2206      	movs	r2, #6
 800eff0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800eff2:	697b      	ldr	r3, [r7, #20]
 800eff4:	2204      	movs	r2, #4
 800eff6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800eff8:	f640 0306 	movw	r3, #2054	@ 0x806
 800effc:	9300      	str	r3, [sp, #0]
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	68ba      	ldr	r2, [r7, #8]
 800f002:	69b9      	ldr	r1, [r7, #24]
 800f004:	68f8      	ldr	r0, [r7, #12]
 800f006:	f001 fb81 	bl	801070c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800f00a:	69b8      	ldr	r0, [r7, #24]
 800f00c:	f7f8 f872 	bl	80070f4 <pbuf_free>
  p = NULL;
 800f010:	2300      	movs	r3, #0
 800f012:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800f014:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f018:	4618      	mov	r0, r3
 800f01a:	3720      	adds	r7, #32
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}
 800f020:	0801483c 	.word	0x0801483c
 800f024:	0801498c 	.word	0x0801498c
 800f028:	080148b4 	.word	0x080148b4
 800f02c:	08014a3c 	.word	0x08014a3c
 800f030:	08014a70 	.word	0x08014a70

0800f034 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800f034:	b580      	push	{r7, lr}
 800f036:	b088      	sub	sp, #32
 800f038:	af04      	add	r7, sp, #16
 800f03a:	60f8      	str	r0, [r7, #12]
 800f03c:	60b9      	str	r1, [r7, #8]
 800f03e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f050:	2201      	movs	r2, #1
 800f052:	9203      	str	r2, [sp, #12]
 800f054:	68ba      	ldr	r2, [r7, #8]
 800f056:	9202      	str	r2, [sp, #8]
 800f058:	4a06      	ldr	r2, [pc, #24]	@ (800f074 <etharp_request_dst+0x40>)
 800f05a:	9201      	str	r2, [sp, #4]
 800f05c:	9300      	str	r3, [sp, #0]
 800f05e:	4603      	mov	r3, r0
 800f060:	687a      	ldr	r2, [r7, #4]
 800f062:	68f8      	ldr	r0, [r7, #12]
 800f064:	f7ff ff5a 	bl	800ef1c <etharp_raw>
 800f068:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800f06a:	4618      	mov	r0, r3
 800f06c:	3710      	adds	r7, #16
 800f06e:	46bd      	mov	sp, r7
 800f070:	bd80      	pop	{r7, pc}
 800f072:	bf00      	nop
 800f074:	0801505c 	.word	0x0801505c

0800f078 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800f078:	b580      	push	{r7, lr}
 800f07a:	b082      	sub	sp, #8
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
 800f080:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800f082:	4a05      	ldr	r2, [pc, #20]	@ (800f098 <etharp_request+0x20>)
 800f084:	6839      	ldr	r1, [r7, #0]
 800f086:	6878      	ldr	r0, [r7, #4]
 800f088:	f7ff ffd4 	bl	800f034 <etharp_request_dst>
 800f08c:	4603      	mov	r3, r0
}
 800f08e:	4618      	mov	r0, r3
 800f090:	3708      	adds	r7, #8
 800f092:	46bd      	mov	sp, r7
 800f094:	bd80      	pop	{r7, pc}
 800f096:	bf00      	nop
 800f098:	08015054 	.word	0x08015054

0800f09c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b08e      	sub	sp, #56	@ 0x38
 800f0a0:	af04      	add	r7, sp, #16
 800f0a2:	6078      	str	r0, [r7, #4]
 800f0a4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800f0a6:	4b7c      	ldr	r3, [pc, #496]	@ (800f298 <icmp_input+0x1fc>)
 800f0a8:	689b      	ldr	r3, [r3, #8]
 800f0aa:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800f0ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0ae:	781b      	ldrb	r3, [r3, #0]
 800f0b0:	f003 030f 	and.w	r3, r3, #15
 800f0b4:	b2db      	uxtb	r3, r3
 800f0b6:	009b      	lsls	r3, r3, #2
 800f0b8:	b2db      	uxtb	r3, r3
 800f0ba:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800f0bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f0be:	2b13      	cmp	r3, #19
 800f0c0:	f240 80d2 	bls.w	800f268 <icmp_input+0x1cc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	895b      	ldrh	r3, [r3, #10]
 800f0c8:	2b03      	cmp	r3, #3
 800f0ca:	f240 80cf 	bls.w	800f26c <icmp_input+0x1d0>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	685b      	ldr	r3, [r3, #4]
 800f0d2:	781b      	ldrb	r3, [r3, #0]
 800f0d4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	685b      	ldr	r3, [r3, #4]
 800f0dc:	785b      	ldrb	r3, [r3, #1]
 800f0de:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800f0e2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	f000 80b7 	beq.w	800f25a <icmp_input+0x1be>
 800f0ec:	2b08      	cmp	r3, #8
 800f0ee:	f040 80b7 	bne.w	800f260 <icmp_input+0x1c4>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800f0f2:	4b6a      	ldr	r3, [pc, #424]	@ (800f29c <icmp_input+0x200>)
 800f0f4:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f0f6:	4b68      	ldr	r3, [pc, #416]	@ (800f298 <icmp_input+0x1fc>)
 800f0f8:	695b      	ldr	r3, [r3, #20]
 800f0fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f0fe:	2be0      	cmp	r3, #224	@ 0xe0
 800f100:	f000 80bb 	beq.w	800f27a <icmp_input+0x1de>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800f104:	4b64      	ldr	r3, [pc, #400]	@ (800f298 <icmp_input+0x1fc>)
 800f106:	695b      	ldr	r3, [r3, #20]
 800f108:	4a63      	ldr	r2, [pc, #396]	@ (800f298 <icmp_input+0x1fc>)
 800f10a:	6812      	ldr	r2, [r2, #0]
 800f10c:	4611      	mov	r1, r2
 800f10e:	4618      	mov	r0, r3
 800f110:	f000 fbee 	bl	800f8f0 <ip4_addr_isbroadcast_u32>
 800f114:	4603      	mov	r3, r0
 800f116:	2b00      	cmp	r3, #0
 800f118:	f040 80b1 	bne.w	800f27e <icmp_input+0x1e2>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	891b      	ldrh	r3, [r3, #8]
 800f120:	2b07      	cmp	r3, #7
 800f122:	f240 80a5 	bls.w	800f270 <icmp_input+0x1d4>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f126:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f128:	330e      	adds	r3, #14
 800f12a:	4619      	mov	r1, r3
 800f12c:	6878      	ldr	r0, [r7, #4]
 800f12e:	f7f7 ff4b 	bl	8006fc8 <pbuf_add_header>
 800f132:	4603      	mov	r3, r0
 800f134:	2b00      	cmp	r3, #0
 800f136:	d04b      	beq.n	800f1d0 <icmp_input+0x134>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	891a      	ldrh	r2, [r3, #8]
 800f13c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f13e:	4413      	add	r3, r2
 800f140:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	891b      	ldrh	r3, [r3, #8]
 800f146:	8b7a      	ldrh	r2, [r7, #26]
 800f148:	429a      	cmp	r2, r3
 800f14a:	f0c0 809a 	bcc.w	800f282 <icmp_input+0x1e6>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800f14e:	8b7b      	ldrh	r3, [r7, #26]
 800f150:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f154:	4619      	mov	r1, r3
 800f156:	200e      	movs	r0, #14
 800f158:	f7f7 fce8 	bl	8006b2c <pbuf_alloc>
 800f15c:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800f15e:	697b      	ldr	r3, [r7, #20]
 800f160:	2b00      	cmp	r3, #0
 800f162:	f000 8090 	beq.w	800f286 <icmp_input+0x1ea>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800f166:	697b      	ldr	r3, [r7, #20]
 800f168:	895b      	ldrh	r3, [r3, #10]
 800f16a:	461a      	mov	r2, r3
 800f16c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f16e:	3308      	adds	r3, #8
 800f170:	429a      	cmp	r2, r3
 800f172:	d203      	bcs.n	800f17c <icmp_input+0xe0>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800f174:	6978      	ldr	r0, [r7, #20]
 800f176:	f7f7 ffbd 	bl	80070f4 <pbuf_free>
          goto icmperr;
 800f17a:	e085      	b.n	800f288 <icmp_input+0x1ec>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800f17c:	697b      	ldr	r3, [r7, #20]
 800f17e:	685b      	ldr	r3, [r3, #4]
 800f180:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800f182:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f184:	4618      	mov	r0, r3
 800f186:	f001 fe0e 	bl	8010da6 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800f18a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f18c:	4619      	mov	r1, r3
 800f18e:	6978      	ldr	r0, [r7, #20]
 800f190:	f7f7 ff2a 	bl	8006fe8 <pbuf_remove_header>
 800f194:	4603      	mov	r3, r0
 800f196:	2b00      	cmp	r3, #0
 800f198:	d009      	beq.n	800f1ae <icmp_input+0x112>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800f19a:	4b41      	ldr	r3, [pc, #260]	@ (800f2a0 <icmp_input+0x204>)
 800f19c:	22b6      	movs	r2, #182	@ 0xb6
 800f19e:	4941      	ldr	r1, [pc, #260]	@ (800f2a4 <icmp_input+0x208>)
 800f1a0:	4841      	ldr	r0, [pc, #260]	@ (800f2a8 <icmp_input+0x20c>)
 800f1a2:	f001 fc2b 	bl	80109fc <iprintf>
          pbuf_free(r);
 800f1a6:	6978      	ldr	r0, [r7, #20]
 800f1a8:	f7f7 ffa4 	bl	80070f4 <pbuf_free>
          goto icmperr;
 800f1ac:	e06c      	b.n	800f288 <icmp_input+0x1ec>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800f1ae:	6879      	ldr	r1, [r7, #4]
 800f1b0:	6978      	ldr	r0, [r7, #20]
 800f1b2:	f7f8 f8b7 	bl	8007324 <pbuf_copy>
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d003      	beq.n	800f1c4 <icmp_input+0x128>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800f1bc:	6978      	ldr	r0, [r7, #20]
 800f1be:	f7f7 ff99 	bl	80070f4 <pbuf_free>
          goto icmperr;
 800f1c2:	e061      	b.n	800f288 <icmp_input+0x1ec>
        }
        /* free the original p */
        pbuf_free(p);
 800f1c4:	6878      	ldr	r0, [r7, #4]
 800f1c6:	f7f7 ff95 	bl	80070f4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800f1ca:	697b      	ldr	r3, [r7, #20]
 800f1cc:	607b      	str	r3, [r7, #4]
 800f1ce:	e00f      	b.n	800f1f0 <icmp_input+0x154>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f1d0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f1d2:	330e      	adds	r3, #14
 800f1d4:	4619      	mov	r1, r3
 800f1d6:	6878      	ldr	r0, [r7, #4]
 800f1d8:	f7f7 ff06 	bl	8006fe8 <pbuf_remove_header>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d006      	beq.n	800f1f0 <icmp_input+0x154>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800f1e2:	4b2f      	ldr	r3, [pc, #188]	@ (800f2a0 <icmp_input+0x204>)
 800f1e4:	22c7      	movs	r2, #199	@ 0xc7
 800f1e6:	4931      	ldr	r1, [pc, #196]	@ (800f2ac <icmp_input+0x210>)
 800f1e8:	482f      	ldr	r0, [pc, #188]	@ (800f2a8 <icmp_input+0x20c>)
 800f1ea:	f001 fc07 	bl	80109fc <iprintf>
          goto icmperr;
 800f1ee:	e04b      	b.n	800f288 <icmp_input+0x1ec>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	685b      	ldr	r3, [r3, #4]
 800f1f4:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800f1f6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f1f8:	4619      	mov	r1, r3
 800f1fa:	6878      	ldr	r0, [r7, #4]
 800f1fc:	f7f7 fee4 	bl	8006fc8 <pbuf_add_header>
 800f200:	4603      	mov	r3, r0
 800f202:	2b00      	cmp	r3, #0
 800f204:	d12b      	bne.n	800f25e <icmp_input+0x1c2>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	685b      	ldr	r3, [r3, #4]
 800f20a:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800f20c:	69fb      	ldr	r3, [r7, #28]
 800f20e:	681a      	ldr	r2, [r3, #0]
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800f214:	4b20      	ldr	r3, [pc, #128]	@ (800f298 <icmp_input+0x1fc>)
 800f216:	691a      	ldr	r2, [r3, #16]
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800f21c:	693b      	ldr	r3, [r7, #16]
 800f21e:	2200      	movs	r2, #0
 800f220:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800f222:	693b      	ldr	r3, [r7, #16]
 800f224:	2200      	movs	r2, #0
 800f226:	709a      	strb	r2, [r3, #2]
 800f228:	2200      	movs	r2, #0
 800f22a:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	22ff      	movs	r2, #255	@ 0xff
 800f230:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	2200      	movs	r2, #0
 800f236:	729a      	strb	r2, [r3, #10]
 800f238:	2200      	movs	r2, #0
 800f23a:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	9302      	str	r3, [sp, #8]
 800f240:	2301      	movs	r3, #1
 800f242:	9301      	str	r3, [sp, #4]
 800f244:	2300      	movs	r3, #0
 800f246:	9300      	str	r3, [sp, #0]
 800f248:	23ff      	movs	r3, #255	@ 0xff
 800f24a:	2200      	movs	r2, #0
 800f24c:	69f9      	ldr	r1, [r7, #28]
 800f24e:	6878      	ldr	r0, [r7, #4]
 800f250:	f000 fa76 	bl	800f740 <ip4_output_if>
 800f254:	4603      	mov	r3, r0
 800f256:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800f258:	e001      	b.n	800f25e <icmp_input+0x1c2>
      break;
 800f25a:	bf00      	nop
 800f25c:	e000      	b.n	800f260 <icmp_input+0x1c4>
      break;
 800f25e:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800f260:	6878      	ldr	r0, [r7, #4]
 800f262:	f7f7 ff47 	bl	80070f4 <pbuf_free>
  return;
 800f266:	e013      	b.n	800f290 <icmp_input+0x1f4>
    goto lenerr;
 800f268:	bf00      	nop
 800f26a:	e002      	b.n	800f272 <icmp_input+0x1d6>
    goto lenerr;
 800f26c:	bf00      	nop
 800f26e:	e000      	b.n	800f272 <icmp_input+0x1d6>
        goto lenerr;
 800f270:	bf00      	nop
lenerr:
  pbuf_free(p);
 800f272:	6878      	ldr	r0, [r7, #4]
 800f274:	f7f7 ff3e 	bl	80070f4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f278:	e00a      	b.n	800f290 <icmp_input+0x1f4>
        goto icmperr;
 800f27a:	bf00      	nop
 800f27c:	e004      	b.n	800f288 <icmp_input+0x1ec>
        goto icmperr;
 800f27e:	bf00      	nop
 800f280:	e002      	b.n	800f288 <icmp_input+0x1ec>
          goto icmperr;
 800f282:	bf00      	nop
 800f284:	e000      	b.n	800f288 <icmp_input+0x1ec>
          goto icmperr;
 800f286:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800f288:	6878      	ldr	r0, [r7, #4]
 800f28a:	f7f7 ff33 	bl	80070f4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f28e:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800f290:	3728      	adds	r7, #40	@ 0x28
 800f292:	46bd      	mov	sp, r7
 800f294:	bd80      	pop	{r7, pc}
 800f296:	bf00      	nop
 800f298:	20005238 	.word	0x20005238
 800f29c:	2000524c 	.word	0x2000524c
 800f2a0:	08014ab4 	.word	0x08014ab4
 800f2a4:	08014aec 	.word	0x08014aec
 800f2a8:	08014b24 	.word	0x08014b24
 800f2ac:	08014b4c 	.word	0x08014b4c

0800f2b0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b082      	sub	sp, #8
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
 800f2b8:	460b      	mov	r3, r1
 800f2ba:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800f2bc:	78fb      	ldrb	r3, [r7, #3]
 800f2be:	461a      	mov	r2, r3
 800f2c0:	2103      	movs	r1, #3
 800f2c2:	6878      	ldr	r0, [r7, #4]
 800f2c4:	f000 f814 	bl	800f2f0 <icmp_send_response>
}
 800f2c8:	bf00      	nop
 800f2ca:	3708      	adds	r7, #8
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	bd80      	pop	{r7, pc}

0800f2d0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b082      	sub	sp, #8
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
 800f2d8:	460b      	mov	r3, r1
 800f2da:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800f2dc:	78fb      	ldrb	r3, [r7, #3]
 800f2de:	461a      	mov	r2, r3
 800f2e0:	210b      	movs	r1, #11
 800f2e2:	6878      	ldr	r0, [r7, #4]
 800f2e4:	f000 f804 	bl	800f2f0 <icmp_send_response>
}
 800f2e8:	bf00      	nop
 800f2ea:	3708      	adds	r7, #8
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	bd80      	pop	{r7, pc}

0800f2f0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b08c      	sub	sp, #48	@ 0x30
 800f2f4:	af04      	add	r7, sp, #16
 800f2f6:	6078      	str	r0, [r7, #4]
 800f2f8:	460b      	mov	r3, r1
 800f2fa:	70fb      	strb	r3, [r7, #3]
 800f2fc:	4613      	mov	r3, r2
 800f2fe:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800f300:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f304:	2124      	movs	r1, #36	@ 0x24
 800f306:	2022      	movs	r0, #34	@ 0x22
 800f308:	f7f7 fc10 	bl	8006b2c <pbuf_alloc>
 800f30c:	61b8      	str	r0, [r7, #24]
                 PBUF_RAM);
  if (q == NULL) {
 800f30e:	69bb      	ldr	r3, [r7, #24]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d04c      	beq.n	800f3ae <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800f314:	69bb      	ldr	r3, [r7, #24]
 800f316:	895b      	ldrh	r3, [r3, #10]
 800f318:	2b23      	cmp	r3, #35	@ 0x23
 800f31a:	d806      	bhi.n	800f32a <icmp_send_response+0x3a>
 800f31c:	4b26      	ldr	r3, [pc, #152]	@ (800f3b8 <icmp_send_response+0xc8>)
 800f31e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800f322:	4926      	ldr	r1, [pc, #152]	@ (800f3bc <icmp_send_response+0xcc>)
 800f324:	4826      	ldr	r0, [pc, #152]	@ (800f3c0 <icmp_send_response+0xd0>)
 800f326:	f001 fb69 	bl	80109fc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	685b      	ldr	r3, [r3, #4]
 800f32e:	617b      	str	r3, [r7, #20]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800f330:	69bb      	ldr	r3, [r7, #24]
 800f332:	685b      	ldr	r3, [r3, #4]
 800f334:	613b      	str	r3, [r7, #16]
  icmphdr->type = type;
 800f336:	693b      	ldr	r3, [r7, #16]
 800f338:	78fa      	ldrb	r2, [r7, #3]
 800f33a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800f33c:	693b      	ldr	r3, [r7, #16]
 800f33e:	78ba      	ldrb	r2, [r7, #2]
 800f340:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800f342:	693b      	ldr	r3, [r7, #16]
 800f344:	2200      	movs	r2, #0
 800f346:	711a      	strb	r2, [r3, #4]
 800f348:	2200      	movs	r2, #0
 800f34a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800f34c:	693b      	ldr	r3, [r7, #16]
 800f34e:	2200      	movs	r2, #0
 800f350:	719a      	strb	r2, [r3, #6]
 800f352:	2200      	movs	r2, #0
 800f354:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800f356:	69bb      	ldr	r3, [r7, #24]
 800f358:	685b      	ldr	r3, [r3, #4]
 800f35a:	f103 0008 	add.w	r0, r3, #8
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	685b      	ldr	r3, [r3, #4]
 800f362:	221c      	movs	r2, #28
 800f364:	4619      	mov	r1, r3
 800f366:	f001 fd1e 	bl	8010da6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800f36a:	697b      	ldr	r3, [r7, #20]
 800f36c:	68db      	ldr	r3, [r3, #12]
 800f36e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800f370:	f107 030c 	add.w	r3, r7, #12
 800f374:	4618      	mov	r0, r3
 800f376:	f000 f825 	bl	800f3c4 <ip4_route>
 800f37a:	61f8      	str	r0, [r7, #28]
#endif
  if (netif != NULL) {
 800f37c:	69fb      	ldr	r3, [r7, #28]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d011      	beq.n	800f3a6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800f382:	693b      	ldr	r3, [r7, #16]
 800f384:	2200      	movs	r2, #0
 800f386:	709a      	strb	r2, [r3, #2]
 800f388:	2200      	movs	r2, #0
 800f38a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800f38c:	f107 020c 	add.w	r2, r7, #12
 800f390:	69fb      	ldr	r3, [r7, #28]
 800f392:	9302      	str	r3, [sp, #8]
 800f394:	2301      	movs	r3, #1
 800f396:	9301      	str	r3, [sp, #4]
 800f398:	2300      	movs	r3, #0
 800f39a:	9300      	str	r3, [sp, #0]
 800f39c:	23ff      	movs	r3, #255	@ 0xff
 800f39e:	2100      	movs	r1, #0
 800f3a0:	69b8      	ldr	r0, [r7, #24]
 800f3a2:	f000 f9cd 	bl	800f740 <ip4_output_if>
  }
  pbuf_free(q);
 800f3a6:	69b8      	ldr	r0, [r7, #24]
 800f3a8:	f7f7 fea4 	bl	80070f4 <pbuf_free>
 800f3ac:	e000      	b.n	800f3b0 <icmp_send_response+0xc0>
    return;
 800f3ae:	bf00      	nop
}
 800f3b0:	3720      	adds	r7, #32
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	bd80      	pop	{r7, pc}
 800f3b6:	bf00      	nop
 800f3b8:	08014ab4 	.word	0x08014ab4
 800f3bc:	08014b80 	.word	0x08014b80
 800f3c0:	08014b24 	.word	0x08014b24

0800f3c4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800f3c4:	b480      	push	{r7}
 800f3c6:	b085      	sub	sp, #20
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800f3cc:	4b33      	ldr	r3, [pc, #204]	@ (800f49c <ip4_route+0xd8>)
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	60fb      	str	r3, [r7, #12]
 800f3d2:	e036      	b.n	800f442 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f3da:	f003 0301 	and.w	r3, r3, #1
 800f3de:	b2db      	uxtb	r3, r3
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d02b      	beq.n	800f43c <ip4_route+0x78>
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f3ea:	089b      	lsrs	r3, r3, #2
 800f3ec:	f003 0301 	and.w	r3, r3, #1
 800f3f0:	b2db      	uxtb	r3, r3
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d022      	beq.n	800f43c <ip4_route+0x78>
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	3304      	adds	r3, #4
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d01d      	beq.n	800f43c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	681a      	ldr	r2, [r3, #0]
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	3304      	adds	r3, #4
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	405a      	eors	r2, r3
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	3308      	adds	r3, #8
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	4013      	ands	r3, r2
 800f414:	2b00      	cmp	r3, #0
 800f416:	d101      	bne.n	800f41c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	e038      	b.n	800f48e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f422:	f003 0302 	and.w	r3, r3, #2
 800f426:	2b00      	cmp	r3, #0
 800f428:	d108      	bne.n	800f43c <ip4_route+0x78>
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681a      	ldr	r2, [r3, #0]
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	330c      	adds	r3, #12
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	429a      	cmp	r2, r3
 800f436:	d101      	bne.n	800f43c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	e028      	b.n	800f48e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	60fb      	str	r3, [r7, #12]
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d1c5      	bne.n	800f3d4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f448:	4b15      	ldr	r3, [pc, #84]	@ (800f4a0 <ip4_route+0xdc>)
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d01a      	beq.n	800f486 <ip4_route+0xc2>
 800f450:	4b13      	ldr	r3, [pc, #76]	@ (800f4a0 <ip4_route+0xdc>)
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f458:	f003 0301 	and.w	r3, r3, #1
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d012      	beq.n	800f486 <ip4_route+0xc2>
 800f460:	4b0f      	ldr	r3, [pc, #60]	@ (800f4a0 <ip4_route+0xdc>)
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f468:	f003 0304 	and.w	r3, r3, #4
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d00a      	beq.n	800f486 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f470:	4b0b      	ldr	r3, [pc, #44]	@ (800f4a0 <ip4_route+0xdc>)
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	3304      	adds	r3, #4
 800f476:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d004      	beq.n	800f486 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	b2db      	uxtb	r3, r3
 800f482:	2b7f      	cmp	r3, #127	@ 0x7f
 800f484:	d101      	bne.n	800f48a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800f486:	2300      	movs	r3, #0
 800f488:	e001      	b.n	800f48e <ip4_route+0xca>
  }

  return netif_default;
 800f48a:	4b05      	ldr	r3, [pc, #20]	@ (800f4a0 <ip4_route+0xdc>)
 800f48c:	681b      	ldr	r3, [r3, #0]
}
 800f48e:	4618      	mov	r0, r3
 800f490:	3714      	adds	r7, #20
 800f492:	46bd      	mov	sp, r7
 800f494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f498:	4770      	bx	lr
 800f49a:	bf00      	nop
 800f49c:	200087dc 	.word	0x200087dc
 800f4a0:	200087e0 	.word	0x200087e0

0800f4a4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b082      	sub	sp, #8
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f4b2:	f003 0301 	and.w	r3, r3, #1
 800f4b6:	b2db      	uxtb	r3, r3
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d016      	beq.n	800f4ea <ip4_input_accept+0x46>
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	3304      	adds	r3, #4
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d011      	beq.n	800f4ea <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f4c6:	4b0b      	ldr	r3, [pc, #44]	@ (800f4f4 <ip4_input_accept+0x50>)
 800f4c8:	695a      	ldr	r2, [r3, #20]
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	3304      	adds	r3, #4
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	429a      	cmp	r2, r3
 800f4d2:	d008      	beq.n	800f4e6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800f4d4:	4b07      	ldr	r3, [pc, #28]	@ (800f4f4 <ip4_input_accept+0x50>)
 800f4d6:	695b      	ldr	r3, [r3, #20]
 800f4d8:	6879      	ldr	r1, [r7, #4]
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f000 fa08 	bl	800f8f0 <ip4_addr_isbroadcast_u32>
 800f4e0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d001      	beq.n	800f4ea <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800f4e6:	2301      	movs	r3, #1
 800f4e8:	e000      	b.n	800f4ec <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800f4ea:	2300      	movs	r3, #0
}
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	3708      	adds	r7, #8
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd80      	pop	{r7, pc}
 800f4f4:	20005238 	.word	0x20005238

0800f4f8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b086      	sub	sp, #24
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	6078      	str	r0, [r7, #4]
 800f500:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	685b      	ldr	r3, [r3, #4]
 800f506:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 800f508:	693b      	ldr	r3, [r7, #16]
 800f50a:	781b      	ldrb	r3, [r3, #0]
 800f50c:	091b      	lsrs	r3, r3, #4
 800f50e:	b2db      	uxtb	r3, r3
 800f510:	2b04      	cmp	r3, #4
 800f512:	d004      	beq.n	800f51e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800f514:	6878      	ldr	r0, [r7, #4]
 800f516:	f7f7 fded 	bl	80070f4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800f51a:	2300      	movs	r3, #0
 800f51c:	e107      	b.n	800f72e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800f51e:	693b      	ldr	r3, [r7, #16]
 800f520:	781b      	ldrb	r3, [r3, #0]
 800f522:	f003 030f 	and.w	r3, r3, #15
 800f526:	b2db      	uxtb	r3, r3
 800f528:	009b      	lsls	r3, r3, #2
 800f52a:	b2db      	uxtb	r3, r3
 800f52c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800f52e:	693b      	ldr	r3, [r7, #16]
 800f530:	885b      	ldrh	r3, [r3, #2]
 800f532:	b29b      	uxth	r3, r3
 800f534:	4618      	mov	r0, r3
 800f536:	f7f6 fa7f 	bl	8005a38 <lwip_htons>
 800f53a:	4603      	mov	r3, r0
 800f53c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	891b      	ldrh	r3, [r3, #8]
 800f542:	89ba      	ldrh	r2, [r7, #12]
 800f544:	429a      	cmp	r2, r3
 800f546:	d204      	bcs.n	800f552 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800f548:	89bb      	ldrh	r3, [r7, #12]
 800f54a:	4619      	mov	r1, r3
 800f54c:	6878      	ldr	r0, [r7, #4]
 800f54e:	f7f7 fc4b 	bl	8006de8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	895b      	ldrh	r3, [r3, #10]
 800f556:	89fa      	ldrh	r2, [r7, #14]
 800f558:	429a      	cmp	r2, r3
 800f55a:	d807      	bhi.n	800f56c <ip4_input+0x74>
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	891b      	ldrh	r3, [r3, #8]
 800f560:	89ba      	ldrh	r2, [r7, #12]
 800f562:	429a      	cmp	r2, r3
 800f564:	d802      	bhi.n	800f56c <ip4_input+0x74>
 800f566:	89fb      	ldrh	r3, [r7, #14]
 800f568:	2b13      	cmp	r3, #19
 800f56a:	d804      	bhi.n	800f576 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800f56c:	6878      	ldr	r0, [r7, #4]
 800f56e:	f7f7 fdc1 	bl	80070f4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800f572:	2300      	movs	r3, #0
 800f574:	e0db      	b.n	800f72e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800f576:	693b      	ldr	r3, [r7, #16]
 800f578:	691b      	ldr	r3, [r3, #16]
 800f57a:	4a6f      	ldr	r2, [pc, #444]	@ (800f738 <ip4_input+0x240>)
 800f57c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800f57e:	693b      	ldr	r3, [r7, #16]
 800f580:	68db      	ldr	r3, [r3, #12]
 800f582:	4a6d      	ldr	r2, [pc, #436]	@ (800f738 <ip4_input+0x240>)
 800f584:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f586:	4b6c      	ldr	r3, [pc, #432]	@ (800f738 <ip4_input+0x240>)
 800f588:	695b      	ldr	r3, [r3, #20]
 800f58a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f58e:	2be0      	cmp	r3, #224	@ 0xe0
 800f590:	d112      	bne.n	800f5b8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800f592:	683b      	ldr	r3, [r7, #0]
 800f594:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f598:	f003 0301 	and.w	r3, r3, #1
 800f59c:	b2db      	uxtb	r3, r3
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d007      	beq.n	800f5b2 <ip4_input+0xba>
 800f5a2:	683b      	ldr	r3, [r7, #0]
 800f5a4:	3304      	adds	r3, #4
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d002      	beq.n	800f5b2 <ip4_input+0xba>
      netif = inp;
 800f5ac:	683b      	ldr	r3, [r7, #0]
 800f5ae:	617b      	str	r3, [r7, #20]
 800f5b0:	e02a      	b.n	800f608 <ip4_input+0x110>
    } else {
      netif = NULL;
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	617b      	str	r3, [r7, #20]
 800f5b6:	e027      	b.n	800f608 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800f5b8:	6838      	ldr	r0, [r7, #0]
 800f5ba:	f7ff ff73 	bl	800f4a4 <ip4_input_accept>
 800f5be:	4603      	mov	r3, r0
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d002      	beq.n	800f5ca <ip4_input+0xd2>
      netif = inp;
 800f5c4:	683b      	ldr	r3, [r7, #0]
 800f5c6:	617b      	str	r3, [r7, #20]
 800f5c8:	e01e      	b.n	800f608 <ip4_input+0x110>
    } else {
      netif = NULL;
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	617b      	str	r3, [r7, #20]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800f5ce:	4b5a      	ldr	r3, [pc, #360]	@ (800f738 <ip4_input+0x240>)
 800f5d0:	695b      	ldr	r3, [r3, #20]
 800f5d2:	b2db      	uxtb	r3, r3
 800f5d4:	2b7f      	cmp	r3, #127	@ 0x7f
 800f5d6:	d017      	beq.n	800f608 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800f5d8:	4b58      	ldr	r3, [pc, #352]	@ (800f73c <ip4_input+0x244>)
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	617b      	str	r3, [r7, #20]
 800f5de:	e00e      	b.n	800f5fe <ip4_input+0x106>
          if (netif == inp) {
 800f5e0:	697a      	ldr	r2, [r7, #20]
 800f5e2:	683b      	ldr	r3, [r7, #0]
 800f5e4:	429a      	cmp	r2, r3
 800f5e6:	d006      	beq.n	800f5f6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800f5e8:	6978      	ldr	r0, [r7, #20]
 800f5ea:	f7ff ff5b 	bl	800f4a4 <ip4_input_accept>
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d108      	bne.n	800f606 <ip4_input+0x10e>
 800f5f4:	e000      	b.n	800f5f8 <ip4_input+0x100>
            continue;
 800f5f6:	bf00      	nop
        NETIF_FOREACH(netif) {
 800f5f8:	697b      	ldr	r3, [r7, #20]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	617b      	str	r3, [r7, #20]
 800f5fe:	697b      	ldr	r3, [r7, #20]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d1ed      	bne.n	800f5e0 <ip4_input+0xe8>
 800f604:	e000      	b.n	800f608 <ip4_input+0x110>
            break;
 800f606:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f608:	4b4b      	ldr	r3, [pc, #300]	@ (800f738 <ip4_input+0x240>)
 800f60a:	691b      	ldr	r3, [r3, #16]
 800f60c:	6839      	ldr	r1, [r7, #0]
 800f60e:	4618      	mov	r0, r3
 800f610:	f000 f96e 	bl	800f8f0 <ip4_addr_isbroadcast_u32>
 800f614:	4603      	mov	r3, r0
 800f616:	2b00      	cmp	r3, #0
 800f618:	d105      	bne.n	800f626 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800f61a:	4b47      	ldr	r3, [pc, #284]	@ (800f738 <ip4_input+0x240>)
 800f61c:	691b      	ldr	r3, [r3, #16]
 800f61e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f622:	2be0      	cmp	r3, #224	@ 0xe0
 800f624:	d104      	bne.n	800f630 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800f626:	6878      	ldr	r0, [r7, #4]
 800f628:	f7f7 fd64 	bl	80070f4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800f62c:	2300      	movs	r3, #0
 800f62e:	e07e      	b.n	800f72e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800f630:	697b      	ldr	r3, [r7, #20]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d104      	bne.n	800f640 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800f636:	6878      	ldr	r0, [r7, #4]
 800f638:	f7f7 fd5c 	bl	80070f4 <pbuf_free>
    return ERR_OK;
 800f63c:	2300      	movs	r3, #0
 800f63e:	e076      	b.n	800f72e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800f640:	693b      	ldr	r3, [r7, #16]
 800f642:	88db      	ldrh	r3, [r3, #6]
 800f644:	b29b      	uxth	r3, r3
 800f646:	461a      	mov	r2, r3
 800f648:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800f64c:	4013      	ands	r3, r2
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d00b      	beq.n	800f66a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800f652:	6878      	ldr	r0, [r7, #4]
 800f654:	f000 fc92 	bl	800ff7c <ip4_reass>
 800f658:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d101      	bne.n	800f664 <ip4_input+0x16c>
      return ERR_OK;
 800f660:	2300      	movs	r3, #0
 800f662:	e064      	b.n	800f72e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	685b      	ldr	r3, [r3, #4]
 800f668:	613b      	str	r3, [r7, #16]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800f66a:	4a33      	ldr	r2, [pc, #204]	@ (800f738 <ip4_input+0x240>)
 800f66c:	697b      	ldr	r3, [r7, #20]
 800f66e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800f670:	4a31      	ldr	r2, [pc, #196]	@ (800f738 <ip4_input+0x240>)
 800f672:	683b      	ldr	r3, [r7, #0]
 800f674:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800f676:	4a30      	ldr	r2, [pc, #192]	@ (800f738 <ip4_input+0x240>)
 800f678:	693b      	ldr	r3, [r7, #16]
 800f67a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800f67c:	693b      	ldr	r3, [r7, #16]
 800f67e:	781b      	ldrb	r3, [r3, #0]
 800f680:	f003 030f 	and.w	r3, r3, #15
 800f684:	b2db      	uxtb	r3, r3
 800f686:	009b      	lsls	r3, r3, #2
 800f688:	b2db      	uxtb	r3, r3
 800f68a:	461a      	mov	r2, r3
 800f68c:	4b2a      	ldr	r3, [pc, #168]	@ (800f738 <ip4_input+0x240>)
 800f68e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800f690:	89fb      	ldrh	r3, [r7, #14]
 800f692:	4619      	mov	r1, r3
 800f694:	6878      	ldr	r0, [r7, #4]
 800f696:	f7f7 fca7 	bl	8006fe8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800f69a:	693b      	ldr	r3, [r7, #16]
 800f69c:	7a5b      	ldrb	r3, [r3, #9]
 800f69e:	2b11      	cmp	r3, #17
 800f6a0:	d006      	beq.n	800f6b0 <ip4_input+0x1b8>
 800f6a2:	2b11      	cmp	r3, #17
 800f6a4:	dc13      	bgt.n	800f6ce <ip4_input+0x1d6>
 800f6a6:	2b01      	cmp	r3, #1
 800f6a8:	d00c      	beq.n	800f6c4 <ip4_input+0x1cc>
 800f6aa:	2b06      	cmp	r3, #6
 800f6ac:	d005      	beq.n	800f6ba <ip4_input+0x1c2>
 800f6ae:	e00e      	b.n	800f6ce <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800f6b0:	6839      	ldr	r1, [r7, #0]
 800f6b2:	6878      	ldr	r0, [r7, #4]
 800f6b4:	f7fe fc34 	bl	800df20 <udp_input>
        break;
 800f6b8:	e026      	b.n	800f708 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800f6ba:	6839      	ldr	r1, [r7, #0]
 800f6bc:	6878      	ldr	r0, [r7, #4]
 800f6be:	f7f9 fed3 	bl	8009468 <tcp_input>
        break;
 800f6c2:	e021      	b.n	800f708 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800f6c4:	6839      	ldr	r1, [r7, #0]
 800f6c6:	6878      	ldr	r0, [r7, #4]
 800f6c8:	f7ff fce8 	bl	800f09c <icmp_input>
        break;
 800f6cc:	e01c      	b.n	800f708 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f6ce:	4b1a      	ldr	r3, [pc, #104]	@ (800f738 <ip4_input+0x240>)
 800f6d0:	695b      	ldr	r3, [r3, #20]
 800f6d2:	6979      	ldr	r1, [r7, #20]
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	f000 f90b 	bl	800f8f0 <ip4_addr_isbroadcast_u32>
 800f6da:	4603      	mov	r3, r0
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d10f      	bne.n	800f700 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f6e0:	4b15      	ldr	r3, [pc, #84]	@ (800f738 <ip4_input+0x240>)
 800f6e2:	695b      	ldr	r3, [r3, #20]
 800f6e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f6e8:	2be0      	cmp	r3, #224	@ 0xe0
 800f6ea:	d009      	beq.n	800f700 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800f6ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f6f0:	4619      	mov	r1, r3
 800f6f2:	6878      	ldr	r0, [r7, #4]
 800f6f4:	f7f7 fceb 	bl	80070ce <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800f6f8:	2102      	movs	r1, #2
 800f6fa:	6878      	ldr	r0, [r7, #4]
 800f6fc:	f7ff fdd8 	bl	800f2b0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800f700:	6878      	ldr	r0, [r7, #4]
 800f702:	f7f7 fcf7 	bl	80070f4 <pbuf_free>
        break;
 800f706:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800f708:	4b0b      	ldr	r3, [pc, #44]	@ (800f738 <ip4_input+0x240>)
 800f70a:	2200      	movs	r2, #0
 800f70c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800f70e:	4b0a      	ldr	r3, [pc, #40]	@ (800f738 <ip4_input+0x240>)
 800f710:	2200      	movs	r2, #0
 800f712:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800f714:	4b08      	ldr	r3, [pc, #32]	@ (800f738 <ip4_input+0x240>)
 800f716:	2200      	movs	r2, #0
 800f718:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800f71a:	4b07      	ldr	r3, [pc, #28]	@ (800f738 <ip4_input+0x240>)
 800f71c:	2200      	movs	r2, #0
 800f71e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800f720:	4b05      	ldr	r3, [pc, #20]	@ (800f738 <ip4_input+0x240>)
 800f722:	2200      	movs	r2, #0
 800f724:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800f726:	4b04      	ldr	r3, [pc, #16]	@ (800f738 <ip4_input+0x240>)
 800f728:	2200      	movs	r2, #0
 800f72a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800f72c:	2300      	movs	r3, #0
}
 800f72e:	4618      	mov	r0, r3
 800f730:	3718      	adds	r7, #24
 800f732:	46bd      	mov	sp, r7
 800f734:	bd80      	pop	{r7, pc}
 800f736:	bf00      	nop
 800f738:	20005238 	.word	0x20005238
 800f73c:	200087dc 	.word	0x200087dc

0800f740 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800f740:	b580      	push	{r7, lr}
 800f742:	b08a      	sub	sp, #40	@ 0x28
 800f744:	af04      	add	r7, sp, #16
 800f746:	60f8      	str	r0, [r7, #12]
 800f748:	60b9      	str	r1, [r7, #8]
 800f74a:	607a      	str	r2, [r7, #4]
 800f74c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800f74e:	68bb      	ldr	r3, [r7, #8]
 800f750:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d009      	beq.n	800f76c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800f758:	68bb      	ldr	r3, [r7, #8]
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d003      	beq.n	800f766 <ip4_output_if+0x26>
 800f75e:	68bb      	ldr	r3, [r7, #8]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d102      	bne.n	800f76c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800f766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f768:	3304      	adds	r3, #4
 800f76a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800f76c:	78fa      	ldrb	r2, [r7, #3]
 800f76e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f770:	9302      	str	r3, [sp, #8]
 800f772:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f776:	9301      	str	r3, [sp, #4]
 800f778:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f77c:	9300      	str	r3, [sp, #0]
 800f77e:	4613      	mov	r3, r2
 800f780:	687a      	ldr	r2, [r7, #4]
 800f782:	6979      	ldr	r1, [r7, #20]
 800f784:	68f8      	ldr	r0, [r7, #12]
 800f786:	f000 f805 	bl	800f794 <ip4_output_if_src>
 800f78a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800f78c:	4618      	mov	r0, r3
 800f78e:	3718      	adds	r7, #24
 800f790:	46bd      	mov	sp, r7
 800f792:	bd80      	pop	{r7, pc}

0800f794 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b088      	sub	sp, #32
 800f798:	af00      	add	r7, sp, #0
 800f79a:	60f8      	str	r0, [r7, #12]
 800f79c:	60b9      	str	r1, [r7, #8]
 800f79e:	607a      	str	r2, [r7, #4]
 800f7a0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	7b9b      	ldrb	r3, [r3, #14]
 800f7a6:	2b01      	cmp	r3, #1
 800f7a8:	d006      	beq.n	800f7b8 <ip4_output_if_src+0x24>
 800f7aa:	4b4b      	ldr	r3, [pc, #300]	@ (800f8d8 <ip4_output_if_src+0x144>)
 800f7ac:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800f7b0:	494a      	ldr	r1, [pc, #296]	@ (800f8dc <ip4_output_if_src+0x148>)
 800f7b2:	484b      	ldr	r0, [pc, #300]	@ (800f8e0 <ip4_output_if_src+0x14c>)
 800f7b4:	f001 f922 	bl	80109fc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d060      	beq.n	800f880 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800f7be:	2314      	movs	r3, #20
 800f7c0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800f7c2:	2114      	movs	r1, #20
 800f7c4:	68f8      	ldr	r0, [r7, #12]
 800f7c6:	f7f7 fbff 	bl	8006fc8 <pbuf_add_header>
 800f7ca:	4603      	mov	r3, r0
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d002      	beq.n	800f7d6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f7d0:	f06f 0301 	mvn.w	r3, #1
 800f7d4:	e07c      	b.n	800f8d0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	685b      	ldr	r3, [r3, #4]
 800f7da:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	895b      	ldrh	r3, [r3, #10]
 800f7e0:	2b13      	cmp	r3, #19
 800f7e2:	d806      	bhi.n	800f7f2 <ip4_output_if_src+0x5e>
 800f7e4:	4b3c      	ldr	r3, [pc, #240]	@ (800f8d8 <ip4_output_if_src+0x144>)
 800f7e6:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800f7ea:	493e      	ldr	r1, [pc, #248]	@ (800f8e4 <ip4_output_if_src+0x150>)
 800f7ec:	483c      	ldr	r0, [pc, #240]	@ (800f8e0 <ip4_output_if_src+0x14c>)
 800f7ee:	f001 f905 	bl	80109fc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800f7f2:	69fb      	ldr	r3, [r7, #28]
 800f7f4:	78fa      	ldrb	r2, [r7, #3]
 800f7f6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800f7f8:	69fb      	ldr	r3, [r7, #28]
 800f7fa:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800f7fe:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	681a      	ldr	r2, [r3, #0]
 800f804:	69fb      	ldr	r3, [r7, #28]
 800f806:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800f808:	8b7b      	ldrh	r3, [r7, #26]
 800f80a:	089b      	lsrs	r3, r3, #2
 800f80c:	b29b      	uxth	r3, r3
 800f80e:	b2db      	uxtb	r3, r3
 800f810:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f814:	b2da      	uxtb	r2, r3
 800f816:	69fb      	ldr	r3, [r7, #28]
 800f818:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800f81a:	69fb      	ldr	r3, [r7, #28]
 800f81c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800f820:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	891b      	ldrh	r3, [r3, #8]
 800f826:	4618      	mov	r0, r3
 800f828:	f7f6 f906 	bl	8005a38 <lwip_htons>
 800f82c:	4603      	mov	r3, r0
 800f82e:	461a      	mov	r2, r3
 800f830:	69fb      	ldr	r3, [r7, #28]
 800f832:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800f834:	69fb      	ldr	r3, [r7, #28]
 800f836:	2200      	movs	r2, #0
 800f838:	719a      	strb	r2, [r3, #6]
 800f83a:	2200      	movs	r2, #0
 800f83c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800f83e:	4b2a      	ldr	r3, [pc, #168]	@ (800f8e8 <ip4_output_if_src+0x154>)
 800f840:	881b      	ldrh	r3, [r3, #0]
 800f842:	4618      	mov	r0, r3
 800f844:	f7f6 f8f8 	bl	8005a38 <lwip_htons>
 800f848:	4603      	mov	r3, r0
 800f84a:	461a      	mov	r2, r3
 800f84c:	69fb      	ldr	r3, [r7, #28]
 800f84e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800f850:	4b25      	ldr	r3, [pc, #148]	@ (800f8e8 <ip4_output_if_src+0x154>)
 800f852:	881b      	ldrh	r3, [r3, #0]
 800f854:	3301      	adds	r3, #1
 800f856:	b29a      	uxth	r2, r3
 800f858:	4b23      	ldr	r3, [pc, #140]	@ (800f8e8 <ip4_output_if_src+0x154>)
 800f85a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800f85c:	68bb      	ldr	r3, [r7, #8]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d104      	bne.n	800f86c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800f862:	4b22      	ldr	r3, [pc, #136]	@ (800f8ec <ip4_output_if_src+0x158>)
 800f864:	681a      	ldr	r2, [r3, #0]
 800f866:	69fb      	ldr	r3, [r7, #28]
 800f868:	60da      	str	r2, [r3, #12]
 800f86a:	e003      	b.n	800f874 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800f86c:	68bb      	ldr	r3, [r7, #8]
 800f86e:	681a      	ldr	r2, [r3, #0]
 800f870:	69fb      	ldr	r3, [r7, #28]
 800f872:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800f874:	69fb      	ldr	r3, [r7, #28]
 800f876:	2200      	movs	r2, #0
 800f878:	729a      	strb	r2, [r3, #10]
 800f87a:	2200      	movs	r2, #0
 800f87c:	72da      	strb	r2, [r3, #11]
 800f87e:	e00f      	b.n	800f8a0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	895b      	ldrh	r3, [r3, #10]
 800f884:	2b13      	cmp	r3, #19
 800f886:	d802      	bhi.n	800f88e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f888:	f06f 0301 	mvn.w	r3, #1
 800f88c:	e020      	b.n	800f8d0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	685b      	ldr	r3, [r3, #4]
 800f892:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800f894:	69fb      	ldr	r3, [r7, #28]
 800f896:	691b      	ldr	r3, [r3, #16]
 800f898:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800f89a:	f107 0314 	add.w	r3, r7, #20
 800f89e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800f8a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8a2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d00c      	beq.n	800f8c2 <ip4_output_if_src+0x12e>
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	891a      	ldrh	r2, [r3, #8]
 800f8ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8ae:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800f8b0:	429a      	cmp	r2, r3
 800f8b2:	d906      	bls.n	800f8c2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800f8b4:	687a      	ldr	r2, [r7, #4]
 800f8b6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f8b8:	68f8      	ldr	r0, [r7, #12]
 800f8ba:	f000 fd53 	bl	8010364 <ip4_frag>
 800f8be:	4603      	mov	r3, r0
 800f8c0:	e006      	b.n	800f8d0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800f8c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8c4:	695b      	ldr	r3, [r3, #20]
 800f8c6:	687a      	ldr	r2, [r7, #4]
 800f8c8:	68f9      	ldr	r1, [r7, #12]
 800f8ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f8cc:	4798      	blx	r3
 800f8ce:	4603      	mov	r3, r0
}
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	3720      	adds	r7, #32
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	bd80      	pop	{r7, pc}
 800f8d8:	08014bac 	.word	0x08014bac
 800f8dc:	08014be0 	.word	0x08014be0
 800f8e0:	08014bec 	.word	0x08014bec
 800f8e4:	08014c14 	.word	0x08014c14
 800f8e8:	2000893e 	.word	0x2000893e
 800f8ec:	08015050 	.word	0x08015050

0800f8f0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800f8f0:	b480      	push	{r7}
 800f8f2:	b085      	sub	sp, #20
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
 800f8f8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f904:	d002      	beq.n	800f90c <ip4_addr_isbroadcast_u32+0x1c>
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d101      	bne.n	800f910 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800f90c:	2301      	movs	r3, #1
 800f90e:	e02a      	b.n	800f966 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800f910:	683b      	ldr	r3, [r7, #0]
 800f912:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f916:	f003 0302 	and.w	r3, r3, #2
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d101      	bne.n	800f922 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800f91e:	2300      	movs	r3, #0
 800f920:	e021      	b.n	800f966 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800f922:	683b      	ldr	r3, [r7, #0]
 800f924:	3304      	adds	r3, #4
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	687a      	ldr	r2, [r7, #4]
 800f92a:	429a      	cmp	r2, r3
 800f92c:	d101      	bne.n	800f932 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800f92e:	2300      	movs	r3, #0
 800f930:	e019      	b.n	800f966 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800f932:	68fa      	ldr	r2, [r7, #12]
 800f934:	683b      	ldr	r3, [r7, #0]
 800f936:	3304      	adds	r3, #4
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	405a      	eors	r2, r3
 800f93c:	683b      	ldr	r3, [r7, #0]
 800f93e:	3308      	adds	r3, #8
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	4013      	ands	r3, r2
 800f944:	2b00      	cmp	r3, #0
 800f946:	d10d      	bne.n	800f964 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f948:	683b      	ldr	r3, [r7, #0]
 800f94a:	3308      	adds	r3, #8
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	43da      	mvns	r2, r3
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800f954:	683b      	ldr	r3, [r7, #0]
 800f956:	3308      	adds	r3, #8
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f95c:	429a      	cmp	r2, r3
 800f95e:	d101      	bne.n	800f964 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800f960:	2301      	movs	r3, #1
 800f962:	e000      	b.n	800f966 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800f964:	2300      	movs	r3, #0
  }
}
 800f966:	4618      	mov	r0, r3
 800f968:	3714      	adds	r7, #20
 800f96a:	46bd      	mov	sp, r7
 800f96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f970:	4770      	bx	lr
	...

0800f974 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800f974:	b580      	push	{r7, lr}
 800f976:	b084      	sub	sp, #16
 800f978:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800f97a:	2300      	movs	r3, #0
 800f97c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800f97e:	4b12      	ldr	r3, [pc, #72]	@ (800f9c8 <ip_reass_tmr+0x54>)
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800f984:	e018      	b.n	800f9b8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	7fdb      	ldrb	r3, [r3, #31]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d00b      	beq.n	800f9a6 <ip_reass_tmr+0x32>
      r->timer--;
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	7fdb      	ldrb	r3, [r3, #31]
 800f992:	3b01      	subs	r3, #1
 800f994:	b2da      	uxtb	r2, r3
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	60fb      	str	r3, [r7, #12]
 800f9a4:	e008      	b.n	800f9b8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800f9b0:	68b9      	ldr	r1, [r7, #8]
 800f9b2:	6878      	ldr	r0, [r7, #4]
 800f9b4:	f000 f80a 	bl	800f9cc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d1e3      	bne.n	800f986 <ip_reass_tmr+0x12>
    }
  }
}
 800f9be:	bf00      	nop
 800f9c0:	bf00      	nop
 800f9c2:	3710      	adds	r7, #16
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	bd80      	pop	{r7, pc}
 800f9c8:	20008940 	.word	0x20008940

0800f9cc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b088      	sub	sp, #32
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
 800f9d4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800f9da:	683a      	ldr	r2, [r7, #0]
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	429a      	cmp	r2, r3
 800f9e0:	d105      	bne.n	800f9ee <ip_reass_free_complete_datagram+0x22>
 800f9e2:	4b45      	ldr	r3, [pc, #276]	@ (800faf8 <ip_reass_free_complete_datagram+0x12c>)
 800f9e4:	22ab      	movs	r2, #171	@ 0xab
 800f9e6:	4945      	ldr	r1, [pc, #276]	@ (800fafc <ip_reass_free_complete_datagram+0x130>)
 800f9e8:	4845      	ldr	r0, [pc, #276]	@ (800fb00 <ip_reass_free_complete_datagram+0x134>)
 800f9ea:	f001 f807 	bl	80109fc <iprintf>
  if (prev != NULL) {
 800f9ee:	683b      	ldr	r3, [r7, #0]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d00a      	beq.n	800fa0a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	687a      	ldr	r2, [r7, #4]
 800f9fa:	429a      	cmp	r2, r3
 800f9fc:	d005      	beq.n	800fa0a <ip_reass_free_complete_datagram+0x3e>
 800f9fe:	4b3e      	ldr	r3, [pc, #248]	@ (800faf8 <ip_reass_free_complete_datagram+0x12c>)
 800fa00:	22ad      	movs	r2, #173	@ 0xad
 800fa02:	4940      	ldr	r1, [pc, #256]	@ (800fb04 <ip_reass_free_complete_datagram+0x138>)
 800fa04:	483e      	ldr	r0, [pc, #248]	@ (800fb00 <ip_reass_free_complete_datagram+0x134>)
 800fa06:	f000 fff9 	bl	80109fc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	685b      	ldr	r3, [r3, #4]
 800fa0e:	685b      	ldr	r3, [r3, #4]
 800fa10:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800fa12:	697b      	ldr	r3, [r7, #20]
 800fa14:	889b      	ldrh	r3, [r3, #4]
 800fa16:	b29b      	uxth	r3, r3
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d12a      	bne.n	800fa72 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	685b      	ldr	r3, [r3, #4]
 800fa20:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800fa22:	697b      	ldr	r3, [r7, #20]
 800fa24:	681a      	ldr	r2, [r3, #0]
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800fa2a:	69bb      	ldr	r3, [r7, #24]
 800fa2c:	6858      	ldr	r0, [r3, #4]
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	3308      	adds	r3, #8
 800fa32:	2214      	movs	r2, #20
 800fa34:	4619      	mov	r1, r3
 800fa36:	f001 f9b6 	bl	8010da6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800fa3a:	2101      	movs	r1, #1
 800fa3c:	69b8      	ldr	r0, [r7, #24]
 800fa3e:	f7ff fc47 	bl	800f2d0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800fa42:	69b8      	ldr	r0, [r7, #24]
 800fa44:	f7f7 fbde 	bl	8007204 <pbuf_clen>
 800fa48:	4603      	mov	r3, r0
 800fa4a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800fa4c:	8bfa      	ldrh	r2, [r7, #30]
 800fa4e:	8a7b      	ldrh	r3, [r7, #18]
 800fa50:	4413      	add	r3, r2
 800fa52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fa56:	db05      	blt.n	800fa64 <ip_reass_free_complete_datagram+0x98>
 800fa58:	4b27      	ldr	r3, [pc, #156]	@ (800faf8 <ip_reass_free_complete_datagram+0x12c>)
 800fa5a:	22bc      	movs	r2, #188	@ 0xbc
 800fa5c:	492a      	ldr	r1, [pc, #168]	@ (800fb08 <ip_reass_free_complete_datagram+0x13c>)
 800fa5e:	4828      	ldr	r0, [pc, #160]	@ (800fb00 <ip_reass_free_complete_datagram+0x134>)
 800fa60:	f000 ffcc 	bl	80109fc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800fa64:	8bfa      	ldrh	r2, [r7, #30]
 800fa66:	8a7b      	ldrh	r3, [r7, #18]
 800fa68:	4413      	add	r3, r2
 800fa6a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800fa6c:	69b8      	ldr	r0, [r7, #24]
 800fa6e:	f7f7 fb41 	bl	80070f4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	685b      	ldr	r3, [r3, #4]
 800fa76:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800fa78:	e01f      	b.n	800faba <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800fa7a:	69bb      	ldr	r3, [r7, #24]
 800fa7c:	685b      	ldr	r3, [r3, #4]
 800fa7e:	617b      	str	r3, [r7, #20]
    pcur = p;
 800fa80:	69bb      	ldr	r3, [r7, #24]
 800fa82:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800fa84:	697b      	ldr	r3, [r7, #20]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800fa8a:	68f8      	ldr	r0, [r7, #12]
 800fa8c:	f7f7 fbba 	bl	8007204 <pbuf_clen>
 800fa90:	4603      	mov	r3, r0
 800fa92:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800fa94:	8bfa      	ldrh	r2, [r7, #30]
 800fa96:	8a7b      	ldrh	r3, [r7, #18]
 800fa98:	4413      	add	r3, r2
 800fa9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fa9e:	db05      	blt.n	800faac <ip_reass_free_complete_datagram+0xe0>
 800faa0:	4b15      	ldr	r3, [pc, #84]	@ (800faf8 <ip_reass_free_complete_datagram+0x12c>)
 800faa2:	22cc      	movs	r2, #204	@ 0xcc
 800faa4:	4918      	ldr	r1, [pc, #96]	@ (800fb08 <ip_reass_free_complete_datagram+0x13c>)
 800faa6:	4816      	ldr	r0, [pc, #88]	@ (800fb00 <ip_reass_free_complete_datagram+0x134>)
 800faa8:	f000 ffa8 	bl	80109fc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800faac:	8bfa      	ldrh	r2, [r7, #30]
 800faae:	8a7b      	ldrh	r3, [r7, #18]
 800fab0:	4413      	add	r3, r2
 800fab2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800fab4:	68f8      	ldr	r0, [r7, #12]
 800fab6:	f7f7 fb1d 	bl	80070f4 <pbuf_free>
  while (p != NULL) {
 800faba:	69bb      	ldr	r3, [r7, #24]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d1dc      	bne.n	800fa7a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800fac0:	6839      	ldr	r1, [r7, #0]
 800fac2:	6878      	ldr	r0, [r7, #4]
 800fac4:	f000 f8c2 	bl	800fc4c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800fac8:	4b10      	ldr	r3, [pc, #64]	@ (800fb0c <ip_reass_free_complete_datagram+0x140>)
 800faca:	881b      	ldrh	r3, [r3, #0]
 800facc:	8bfa      	ldrh	r2, [r7, #30]
 800face:	429a      	cmp	r2, r3
 800fad0:	d905      	bls.n	800fade <ip_reass_free_complete_datagram+0x112>
 800fad2:	4b09      	ldr	r3, [pc, #36]	@ (800faf8 <ip_reass_free_complete_datagram+0x12c>)
 800fad4:	22d2      	movs	r2, #210	@ 0xd2
 800fad6:	490e      	ldr	r1, [pc, #56]	@ (800fb10 <ip_reass_free_complete_datagram+0x144>)
 800fad8:	4809      	ldr	r0, [pc, #36]	@ (800fb00 <ip_reass_free_complete_datagram+0x134>)
 800fada:	f000 ff8f 	bl	80109fc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800fade:	4b0b      	ldr	r3, [pc, #44]	@ (800fb0c <ip_reass_free_complete_datagram+0x140>)
 800fae0:	881a      	ldrh	r2, [r3, #0]
 800fae2:	8bfb      	ldrh	r3, [r7, #30]
 800fae4:	1ad3      	subs	r3, r2, r3
 800fae6:	b29a      	uxth	r2, r3
 800fae8:	4b08      	ldr	r3, [pc, #32]	@ (800fb0c <ip_reass_free_complete_datagram+0x140>)
 800faea:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800faec:	8bfb      	ldrh	r3, [r7, #30]
}
 800faee:	4618      	mov	r0, r3
 800faf0:	3720      	adds	r7, #32
 800faf2:	46bd      	mov	sp, r7
 800faf4:	bd80      	pop	{r7, pc}
 800faf6:	bf00      	nop
 800faf8:	08014c44 	.word	0x08014c44
 800fafc:	08014c80 	.word	0x08014c80
 800fb00:	08014c8c 	.word	0x08014c8c
 800fb04:	08014cb4 	.word	0x08014cb4
 800fb08:	08014cc8 	.word	0x08014cc8
 800fb0c:	20008944 	.word	0x20008944
 800fb10:	08014ce8 	.word	0x08014ce8

0800fb14 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b08a      	sub	sp, #40	@ 0x28
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
 800fb1c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800fb1e:	2300      	movs	r3, #0
 800fb20:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800fb22:	2300      	movs	r3, #0
 800fb24:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800fb26:	2300      	movs	r3, #0
 800fb28:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800fb2e:	2300      	movs	r3, #0
 800fb30:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800fb32:	4b28      	ldr	r3, [pc, #160]	@ (800fbd4 <ip_reass_remove_oldest_datagram+0xc0>)
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800fb38:	e030      	b.n	800fb9c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800fb3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb3c:	695a      	ldr	r2, [r3, #20]
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	68db      	ldr	r3, [r3, #12]
 800fb42:	429a      	cmp	r2, r3
 800fb44:	d10c      	bne.n	800fb60 <ip_reass_remove_oldest_datagram+0x4c>
 800fb46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb48:	699a      	ldr	r2, [r3, #24]
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	691b      	ldr	r3, [r3, #16]
 800fb4e:	429a      	cmp	r2, r3
 800fb50:	d106      	bne.n	800fb60 <ip_reass_remove_oldest_datagram+0x4c>
 800fb52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb54:	899a      	ldrh	r2, [r3, #12]
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	889b      	ldrh	r3, [r3, #4]
 800fb5a:	b29b      	uxth	r3, r3
 800fb5c:	429a      	cmp	r2, r3
 800fb5e:	d014      	beq.n	800fb8a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800fb60:	693b      	ldr	r3, [r7, #16]
 800fb62:	3301      	adds	r3, #1
 800fb64:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800fb66:	6a3b      	ldr	r3, [r7, #32]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d104      	bne.n	800fb76 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800fb6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb6e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800fb70:	69fb      	ldr	r3, [r7, #28]
 800fb72:	61bb      	str	r3, [r7, #24]
 800fb74:	e009      	b.n	800fb8a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800fb76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb78:	7fda      	ldrb	r2, [r3, #31]
 800fb7a:	6a3b      	ldr	r3, [r7, #32]
 800fb7c:	7fdb      	ldrb	r3, [r3, #31]
 800fb7e:	429a      	cmp	r2, r3
 800fb80:	d803      	bhi.n	800fb8a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800fb82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb84:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800fb86:	69fb      	ldr	r3, [r7, #28]
 800fb88:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800fb8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d001      	beq.n	800fb96 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800fb92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb94:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800fb96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800fb9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d1cb      	bne.n	800fb3a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800fba2:	6a3b      	ldr	r3, [r7, #32]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d008      	beq.n	800fbba <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800fba8:	69b9      	ldr	r1, [r7, #24]
 800fbaa:	6a38      	ldr	r0, [r7, #32]
 800fbac:	f7ff ff0e 	bl	800f9cc <ip_reass_free_complete_datagram>
 800fbb0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800fbb2:	697a      	ldr	r2, [r7, #20]
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	4413      	add	r3, r2
 800fbb8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800fbba:	697a      	ldr	r2, [r7, #20]
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	429a      	cmp	r2, r3
 800fbc0:	da02      	bge.n	800fbc8 <ip_reass_remove_oldest_datagram+0xb4>
 800fbc2:	693b      	ldr	r3, [r7, #16]
 800fbc4:	2b01      	cmp	r3, #1
 800fbc6:	dcac      	bgt.n	800fb22 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800fbc8:	697b      	ldr	r3, [r7, #20]
}
 800fbca:	4618      	mov	r0, r3
 800fbcc:	3728      	adds	r7, #40	@ 0x28
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	bd80      	pop	{r7, pc}
 800fbd2:	bf00      	nop
 800fbd4:	20008940 	.word	0x20008940

0800fbd8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b084      	sub	sp, #16
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
 800fbe0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800fbe2:	2004      	movs	r0, #4
 800fbe4:	f7f6 fba0 	bl	8006328 <memp_malloc>
 800fbe8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d110      	bne.n	800fc12 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800fbf0:	6839      	ldr	r1, [r7, #0]
 800fbf2:	6878      	ldr	r0, [r7, #4]
 800fbf4:	f7ff ff8e 	bl	800fb14 <ip_reass_remove_oldest_datagram>
 800fbf8:	4602      	mov	r2, r0
 800fbfa:	683b      	ldr	r3, [r7, #0]
 800fbfc:	4293      	cmp	r3, r2
 800fbfe:	dc03      	bgt.n	800fc08 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800fc00:	2004      	movs	r0, #4
 800fc02:	f7f6 fb91 	bl	8006328 <memp_malloc>
 800fc06:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d101      	bne.n	800fc12 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800fc0e:	2300      	movs	r3, #0
 800fc10:	e016      	b.n	800fc40 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800fc12:	2220      	movs	r2, #32
 800fc14:	2100      	movs	r1, #0
 800fc16:	68f8      	ldr	r0, [r7, #12]
 800fc18:	f001 f850 	bl	8010cbc <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	220f      	movs	r2, #15
 800fc20:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800fc22:	4b09      	ldr	r3, [pc, #36]	@ (800fc48 <ip_reass_enqueue_new_datagram+0x70>)
 800fc24:	681a      	ldr	r2, [r3, #0]
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800fc2a:	4a07      	ldr	r2, [pc, #28]	@ (800fc48 <ip_reass_enqueue_new_datagram+0x70>)
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	3308      	adds	r3, #8
 800fc34:	2214      	movs	r2, #20
 800fc36:	6879      	ldr	r1, [r7, #4]
 800fc38:	4618      	mov	r0, r3
 800fc3a:	f001 f8b4 	bl	8010da6 <memcpy>
  return ipr;
 800fc3e:	68fb      	ldr	r3, [r7, #12]
}
 800fc40:	4618      	mov	r0, r3
 800fc42:	3710      	adds	r7, #16
 800fc44:	46bd      	mov	sp, r7
 800fc46:	bd80      	pop	{r7, pc}
 800fc48:	20008940 	.word	0x20008940

0800fc4c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b082      	sub	sp, #8
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
 800fc54:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800fc56:	4b10      	ldr	r3, [pc, #64]	@ (800fc98 <ip_reass_dequeue_datagram+0x4c>)
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	687a      	ldr	r2, [r7, #4]
 800fc5c:	429a      	cmp	r2, r3
 800fc5e:	d104      	bne.n	800fc6a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	4a0c      	ldr	r2, [pc, #48]	@ (800fc98 <ip_reass_dequeue_datagram+0x4c>)
 800fc66:	6013      	str	r3, [r2, #0]
 800fc68:	e00d      	b.n	800fc86 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d106      	bne.n	800fc7e <ip_reass_dequeue_datagram+0x32>
 800fc70:	4b0a      	ldr	r3, [pc, #40]	@ (800fc9c <ip_reass_dequeue_datagram+0x50>)
 800fc72:	f240 1245 	movw	r2, #325	@ 0x145
 800fc76:	490a      	ldr	r1, [pc, #40]	@ (800fca0 <ip_reass_dequeue_datagram+0x54>)
 800fc78:	480a      	ldr	r0, [pc, #40]	@ (800fca4 <ip_reass_dequeue_datagram+0x58>)
 800fc7a:	f000 febf 	bl	80109fc <iprintf>
    prev->next = ipr->next;
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	681a      	ldr	r2, [r3, #0]
 800fc82:	683b      	ldr	r3, [r7, #0]
 800fc84:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800fc86:	6879      	ldr	r1, [r7, #4]
 800fc88:	2004      	movs	r0, #4
 800fc8a:	f7f6 fbbd 	bl	8006408 <memp_free>
}
 800fc8e:	bf00      	nop
 800fc90:	3708      	adds	r7, #8
 800fc92:	46bd      	mov	sp, r7
 800fc94:	bd80      	pop	{r7, pc}
 800fc96:	bf00      	nop
 800fc98:	20008940 	.word	0x20008940
 800fc9c:	08014c44 	.word	0x08014c44
 800fca0:	08014d0c 	.word	0x08014d0c
 800fca4:	08014c8c 	.word	0x08014c8c

0800fca8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b08c      	sub	sp, #48	@ 0x30
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	60f8      	str	r0, [r7, #12]
 800fcb0:	60b9      	str	r1, [r7, #8]
 800fcb2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800fcb8:	2301      	movs	r3, #1
 800fcba:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800fcbc:	68bb      	ldr	r3, [r7, #8]
 800fcbe:	685b      	ldr	r3, [r3, #4]
 800fcc0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800fcc2:	69fb      	ldr	r3, [r7, #28]
 800fcc4:	885b      	ldrh	r3, [r3, #2]
 800fcc6:	b29b      	uxth	r3, r3
 800fcc8:	4618      	mov	r0, r3
 800fcca:	f7f5 feb5 	bl	8005a38 <lwip_htons>
 800fcce:	4603      	mov	r3, r0
 800fcd0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800fcd2:	69fb      	ldr	r3, [r7, #28]
 800fcd4:	781b      	ldrb	r3, [r3, #0]
 800fcd6:	f003 030f 	and.w	r3, r3, #15
 800fcda:	b2db      	uxtb	r3, r3
 800fcdc:	009b      	lsls	r3, r3, #2
 800fcde:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800fce0:	7e7b      	ldrb	r3, [r7, #25]
 800fce2:	b29b      	uxth	r3, r3
 800fce4:	8b7a      	ldrh	r2, [r7, #26]
 800fce6:	429a      	cmp	r2, r3
 800fce8:	d202      	bcs.n	800fcf0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fcea:	f04f 33ff 	mov.w	r3, #4294967295
 800fcee:	e135      	b.n	800ff5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800fcf0:	7e7b      	ldrb	r3, [r7, #25]
 800fcf2:	b29b      	uxth	r3, r3
 800fcf4:	8b7a      	ldrh	r2, [r7, #26]
 800fcf6:	1ad3      	subs	r3, r2, r3
 800fcf8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800fcfa:	69fb      	ldr	r3, [r7, #28]
 800fcfc:	88db      	ldrh	r3, [r3, #6]
 800fcfe:	b29b      	uxth	r3, r3
 800fd00:	4618      	mov	r0, r3
 800fd02:	f7f5 fe99 	bl	8005a38 <lwip_htons>
 800fd06:	4603      	mov	r3, r0
 800fd08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fd0c:	b29b      	uxth	r3, r3
 800fd0e:	00db      	lsls	r3, r3, #3
 800fd10:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800fd12:	68bb      	ldr	r3, [r7, #8]
 800fd14:	685b      	ldr	r3, [r3, #4]
 800fd16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800fd18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	701a      	strb	r2, [r3, #0]
 800fd1e:	2200      	movs	r2, #0
 800fd20:	705a      	strb	r2, [r3, #1]
 800fd22:	2200      	movs	r2, #0
 800fd24:	709a      	strb	r2, [r3, #2]
 800fd26:	2200      	movs	r2, #0
 800fd28:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800fd2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd2c:	8afa      	ldrh	r2, [r7, #22]
 800fd2e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800fd30:	8afa      	ldrh	r2, [r7, #22]
 800fd32:	8b7b      	ldrh	r3, [r7, #26]
 800fd34:	4413      	add	r3, r2
 800fd36:	b29a      	uxth	r2, r3
 800fd38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd3a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800fd3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd3e:	88db      	ldrh	r3, [r3, #6]
 800fd40:	b29b      	uxth	r3, r3
 800fd42:	8afa      	ldrh	r2, [r7, #22]
 800fd44:	429a      	cmp	r2, r3
 800fd46:	d902      	bls.n	800fd4e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fd48:	f04f 33ff 	mov.w	r3, #4294967295
 800fd4c:	e106      	b.n	800ff5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	685b      	ldr	r3, [r3, #4]
 800fd52:	627b      	str	r3, [r7, #36]	@ 0x24
 800fd54:	e068      	b.n	800fe28 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800fd56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd58:	685b      	ldr	r3, [r3, #4]
 800fd5a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800fd5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd5e:	889b      	ldrh	r3, [r3, #4]
 800fd60:	b29a      	uxth	r2, r3
 800fd62:	693b      	ldr	r3, [r7, #16]
 800fd64:	889b      	ldrh	r3, [r3, #4]
 800fd66:	b29b      	uxth	r3, r3
 800fd68:	429a      	cmp	r2, r3
 800fd6a:	d235      	bcs.n	800fdd8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800fd6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fd70:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800fd72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d020      	beq.n	800fdba <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800fd78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd7a:	889b      	ldrh	r3, [r3, #4]
 800fd7c:	b29a      	uxth	r2, r3
 800fd7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd80:	88db      	ldrh	r3, [r3, #6]
 800fd82:	b29b      	uxth	r3, r3
 800fd84:	429a      	cmp	r2, r3
 800fd86:	d307      	bcc.n	800fd98 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800fd88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd8a:	88db      	ldrh	r3, [r3, #6]
 800fd8c:	b29a      	uxth	r2, r3
 800fd8e:	693b      	ldr	r3, [r7, #16]
 800fd90:	889b      	ldrh	r3, [r3, #4]
 800fd92:	b29b      	uxth	r3, r3
 800fd94:	429a      	cmp	r2, r3
 800fd96:	d902      	bls.n	800fd9e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fd98:	f04f 33ff 	mov.w	r3, #4294967295
 800fd9c:	e0de      	b.n	800ff5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800fd9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fda0:	68ba      	ldr	r2, [r7, #8]
 800fda2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800fda4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fda6:	88db      	ldrh	r3, [r3, #6]
 800fda8:	b29a      	uxth	r2, r3
 800fdaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdac:	889b      	ldrh	r3, [r3, #4]
 800fdae:	b29b      	uxth	r3, r3
 800fdb0:	429a      	cmp	r2, r3
 800fdb2:	d03d      	beq.n	800fe30 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800fdb8:	e03a      	b.n	800fe30 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800fdba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdbc:	88db      	ldrh	r3, [r3, #6]
 800fdbe:	b29a      	uxth	r2, r3
 800fdc0:	693b      	ldr	r3, [r7, #16]
 800fdc2:	889b      	ldrh	r3, [r3, #4]
 800fdc4:	b29b      	uxth	r3, r3
 800fdc6:	429a      	cmp	r2, r3
 800fdc8:	d902      	bls.n	800fdd0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fdca:	f04f 33ff 	mov.w	r3, #4294967295
 800fdce:	e0c5      	b.n	800ff5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	68ba      	ldr	r2, [r7, #8]
 800fdd4:	605a      	str	r2, [r3, #4]
      break;
 800fdd6:	e02b      	b.n	800fe30 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800fdd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdda:	889b      	ldrh	r3, [r3, #4]
 800fddc:	b29a      	uxth	r2, r3
 800fdde:	693b      	ldr	r3, [r7, #16]
 800fde0:	889b      	ldrh	r3, [r3, #4]
 800fde2:	b29b      	uxth	r3, r3
 800fde4:	429a      	cmp	r2, r3
 800fde6:	d102      	bne.n	800fdee <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fde8:	f04f 33ff 	mov.w	r3, #4294967295
 800fdec:	e0b6      	b.n	800ff5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800fdee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdf0:	889b      	ldrh	r3, [r3, #4]
 800fdf2:	b29a      	uxth	r2, r3
 800fdf4:	693b      	ldr	r3, [r7, #16]
 800fdf6:	88db      	ldrh	r3, [r3, #6]
 800fdf8:	b29b      	uxth	r3, r3
 800fdfa:	429a      	cmp	r2, r3
 800fdfc:	d202      	bcs.n	800fe04 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fdfe:	f04f 33ff 	mov.w	r3, #4294967295
 800fe02:	e0ab      	b.n	800ff5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800fe04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d009      	beq.n	800fe1e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800fe0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe0c:	88db      	ldrh	r3, [r3, #6]
 800fe0e:	b29a      	uxth	r2, r3
 800fe10:	693b      	ldr	r3, [r7, #16]
 800fe12:	889b      	ldrh	r3, [r3, #4]
 800fe14:	b29b      	uxth	r3, r3
 800fe16:	429a      	cmp	r2, r3
 800fe18:	d001      	beq.n	800fe1e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800fe1e:	693b      	ldr	r3, [r7, #16]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800fe24:	693b      	ldr	r3, [r7, #16]
 800fe26:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800fe28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d193      	bne.n	800fd56 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800fe2e:	e000      	b.n	800fe32 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800fe30:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800fe32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d12d      	bne.n	800fe94 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800fe38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d01c      	beq.n	800fe78 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800fe3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe40:	88db      	ldrh	r3, [r3, #6]
 800fe42:	b29a      	uxth	r2, r3
 800fe44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe46:	889b      	ldrh	r3, [r3, #4]
 800fe48:	b29b      	uxth	r3, r3
 800fe4a:	429a      	cmp	r2, r3
 800fe4c:	d906      	bls.n	800fe5c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800fe4e:	4b45      	ldr	r3, [pc, #276]	@ (800ff64 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fe50:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800fe54:	4944      	ldr	r1, [pc, #272]	@ (800ff68 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800fe56:	4845      	ldr	r0, [pc, #276]	@ (800ff6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fe58:	f000 fdd0 	bl	80109fc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800fe5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe5e:	68ba      	ldr	r2, [r7, #8]
 800fe60:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800fe62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe64:	88db      	ldrh	r3, [r3, #6]
 800fe66:	b29a      	uxth	r2, r3
 800fe68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe6a:	889b      	ldrh	r3, [r3, #4]
 800fe6c:	b29b      	uxth	r3, r3
 800fe6e:	429a      	cmp	r2, r3
 800fe70:	d010      	beq.n	800fe94 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800fe72:	2300      	movs	r3, #0
 800fe74:	623b      	str	r3, [r7, #32]
 800fe76:	e00d      	b.n	800fe94 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	685b      	ldr	r3, [r3, #4]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d006      	beq.n	800fe8e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800fe80:	4b38      	ldr	r3, [pc, #224]	@ (800ff64 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fe82:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800fe86:	493a      	ldr	r1, [pc, #232]	@ (800ff70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800fe88:	4838      	ldr	r0, [pc, #224]	@ (800ff6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fe8a:	f000 fdb7 	bl	80109fc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	68ba      	ldr	r2, [r7, #8]
 800fe92:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d105      	bne.n	800fea6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	7f9b      	ldrb	r3, [r3, #30]
 800fe9e:	f003 0301 	and.w	r3, r3, #1
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d059      	beq.n	800ff5a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800fea6:	6a3b      	ldr	r3, [r7, #32]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d04f      	beq.n	800ff4c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	685b      	ldr	r3, [r3, #4]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d006      	beq.n	800fec2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	685b      	ldr	r3, [r3, #4]
 800feb8:	685b      	ldr	r3, [r3, #4]
 800feba:	889b      	ldrh	r3, [r3, #4]
 800febc:	b29b      	uxth	r3, r3
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d002      	beq.n	800fec8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800fec2:	2300      	movs	r3, #0
 800fec4:	623b      	str	r3, [r7, #32]
 800fec6:	e041      	b.n	800ff4c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800fec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800feca:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800fecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800fed2:	e012      	b.n	800fefa <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800fed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fed6:	685b      	ldr	r3, [r3, #4]
 800fed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800feda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fedc:	88db      	ldrh	r3, [r3, #6]
 800fede:	b29a      	uxth	r2, r3
 800fee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fee2:	889b      	ldrh	r3, [r3, #4]
 800fee4:	b29b      	uxth	r3, r3
 800fee6:	429a      	cmp	r2, r3
 800fee8:	d002      	beq.n	800fef0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800feea:	2300      	movs	r3, #0
 800feec:	623b      	str	r3, [r7, #32]
            break;
 800feee:	e007      	b.n	800ff00 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800fef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fef2:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800fef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800fefa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d1e9      	bne.n	800fed4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800ff00:	6a3b      	ldr	r3, [r7, #32]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d022      	beq.n	800ff4c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	685b      	ldr	r3, [r3, #4]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d106      	bne.n	800ff1c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800ff0e:	4b15      	ldr	r3, [pc, #84]	@ (800ff64 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ff10:	f240 12df 	movw	r2, #479	@ 0x1df
 800ff14:	4917      	ldr	r1, [pc, #92]	@ (800ff74 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800ff16:	4815      	ldr	r0, [pc, #84]	@ (800ff6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ff18:	f000 fd70 	bl	80109fc <iprintf>
          LWIP_ASSERT("sanity check",
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	685b      	ldr	r3, [r3, #4]
 800ff20:	685b      	ldr	r3, [r3, #4]
 800ff22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ff24:	429a      	cmp	r2, r3
 800ff26:	d106      	bne.n	800ff36 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800ff28:	4b0e      	ldr	r3, [pc, #56]	@ (800ff64 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ff2a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800ff2e:	4911      	ldr	r1, [pc, #68]	@ (800ff74 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800ff30:	480e      	ldr	r0, [pc, #56]	@ (800ff6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ff32:	f000 fd63 	bl	80109fc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800ff36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d006      	beq.n	800ff4c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800ff3e:	4b09      	ldr	r3, [pc, #36]	@ (800ff64 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ff40:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800ff44:	490c      	ldr	r1, [pc, #48]	@ (800ff78 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800ff46:	4809      	ldr	r0, [pc, #36]	@ (800ff6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ff48:	f000 fd58 	bl	80109fc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800ff4c:	6a3b      	ldr	r3, [r7, #32]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	bf14      	ite	ne
 800ff52:	2301      	movne	r3, #1
 800ff54:	2300      	moveq	r3, #0
 800ff56:	b2db      	uxtb	r3, r3
 800ff58:	e000      	b.n	800ff5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800ff5a:	2300      	movs	r3, #0
}
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	3730      	adds	r7, #48	@ 0x30
 800ff60:	46bd      	mov	sp, r7
 800ff62:	bd80      	pop	{r7, pc}
 800ff64:	08014c44 	.word	0x08014c44
 800ff68:	08014d28 	.word	0x08014d28
 800ff6c:	08014c8c 	.word	0x08014c8c
 800ff70:	08014d48 	.word	0x08014d48
 800ff74:	08014d80 	.word	0x08014d80
 800ff78:	08014d90 	.word	0x08014d90

0800ff7c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b08e      	sub	sp, #56	@ 0x38
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	685b      	ldr	r3, [r3, #4]
 800ff88:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800ff8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff8c:	781b      	ldrb	r3, [r3, #0]
 800ff8e:	f003 030f 	and.w	r3, r3, #15
 800ff92:	b2db      	uxtb	r3, r3
 800ff94:	009b      	lsls	r3, r3, #2
 800ff96:	b2db      	uxtb	r3, r3
 800ff98:	2b14      	cmp	r3, #20
 800ff9a:	f040 8171 	bne.w	8010280 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800ff9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffa0:	88db      	ldrh	r3, [r3, #6]
 800ffa2:	b29b      	uxth	r3, r3
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	f7f5 fd47 	bl	8005a38 <lwip_htons>
 800ffaa:	4603      	mov	r3, r0
 800ffac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ffb0:	b29b      	uxth	r3, r3
 800ffb2:	00db      	lsls	r3, r3, #3
 800ffb4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800ffb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffb8:	885b      	ldrh	r3, [r3, #2]
 800ffba:	b29b      	uxth	r3, r3
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	f7f5 fd3b 	bl	8005a38 <lwip_htons>
 800ffc2:	4603      	mov	r3, r0
 800ffc4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800ffc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffc8:	781b      	ldrb	r3, [r3, #0]
 800ffca:	f003 030f 	and.w	r3, r3, #15
 800ffce:	b2db      	uxtb	r3, r3
 800ffd0:	009b      	lsls	r3, r3, #2
 800ffd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800ffd6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ffda:	b29b      	uxth	r3, r3
 800ffdc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ffde:	429a      	cmp	r2, r3
 800ffe0:	f0c0 8150 	bcc.w	8010284 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800ffe4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ffe8:	b29b      	uxth	r3, r3
 800ffea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ffec:	1ad3      	subs	r3, r2, r3
 800ffee:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800fff0:	6878      	ldr	r0, [r7, #4]
 800fff2:	f7f7 f907 	bl	8007204 <pbuf_clen>
 800fff6:	4603      	mov	r3, r0
 800fff8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800fffa:	4b8c      	ldr	r3, [pc, #560]	@ (801022c <ip4_reass+0x2b0>)
 800fffc:	881b      	ldrh	r3, [r3, #0]
 800fffe:	461a      	mov	r2, r3
 8010000:	8c3b      	ldrh	r3, [r7, #32]
 8010002:	4413      	add	r3, r2
 8010004:	2b0a      	cmp	r3, #10
 8010006:	dd10      	ble.n	801002a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010008:	8c3b      	ldrh	r3, [r7, #32]
 801000a:	4619      	mov	r1, r3
 801000c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801000e:	f7ff fd81 	bl	800fb14 <ip_reass_remove_oldest_datagram>
 8010012:	4603      	mov	r3, r0
 8010014:	2b00      	cmp	r3, #0
 8010016:	f000 8137 	beq.w	8010288 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801001a:	4b84      	ldr	r3, [pc, #528]	@ (801022c <ip4_reass+0x2b0>)
 801001c:	881b      	ldrh	r3, [r3, #0]
 801001e:	461a      	mov	r2, r3
 8010020:	8c3b      	ldrh	r3, [r7, #32]
 8010022:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010024:	2b0a      	cmp	r3, #10
 8010026:	f300 812f 	bgt.w	8010288 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801002a:	4b81      	ldr	r3, [pc, #516]	@ (8010230 <ip4_reass+0x2b4>)
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	633b      	str	r3, [r7, #48]	@ 0x30
 8010030:	e015      	b.n	801005e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8010032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010034:	695a      	ldr	r2, [r3, #20]
 8010036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010038:	68db      	ldr	r3, [r3, #12]
 801003a:	429a      	cmp	r2, r3
 801003c:	d10c      	bne.n	8010058 <ip4_reass+0xdc>
 801003e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010040:	699a      	ldr	r2, [r3, #24]
 8010042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010044:	691b      	ldr	r3, [r3, #16]
 8010046:	429a      	cmp	r2, r3
 8010048:	d106      	bne.n	8010058 <ip4_reass+0xdc>
 801004a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801004c:	899a      	ldrh	r2, [r3, #12]
 801004e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010050:	889b      	ldrh	r3, [r3, #4]
 8010052:	b29b      	uxth	r3, r3
 8010054:	429a      	cmp	r2, r3
 8010056:	d006      	beq.n	8010066 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	633b      	str	r3, [r7, #48]	@ 0x30
 801005e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010060:	2b00      	cmp	r3, #0
 8010062:	d1e6      	bne.n	8010032 <ip4_reass+0xb6>
 8010064:	e000      	b.n	8010068 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8010066:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8010068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801006a:	2b00      	cmp	r3, #0
 801006c:	d109      	bne.n	8010082 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801006e:	8c3b      	ldrh	r3, [r7, #32]
 8010070:	4619      	mov	r1, r3
 8010072:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010074:	f7ff fdb0 	bl	800fbd8 <ip_reass_enqueue_new_datagram>
 8010078:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801007a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801007c:	2b00      	cmp	r3, #0
 801007e:	d11c      	bne.n	80100ba <ip4_reass+0x13e>
      goto nullreturn;
 8010080:	e105      	b.n	801028e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010084:	88db      	ldrh	r3, [r3, #6]
 8010086:	b29b      	uxth	r3, r3
 8010088:	4618      	mov	r0, r3
 801008a:	f7f5 fcd5 	bl	8005a38 <lwip_htons>
 801008e:	4603      	mov	r3, r0
 8010090:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010094:	2b00      	cmp	r3, #0
 8010096:	d110      	bne.n	80100ba <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8010098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801009a:	89db      	ldrh	r3, [r3, #14]
 801009c:	4618      	mov	r0, r3
 801009e:	f7f5 fccb 	bl	8005a38 <lwip_htons>
 80100a2:	4603      	mov	r3, r0
 80100a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d006      	beq.n	80100ba <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80100ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100ae:	3308      	adds	r3, #8
 80100b0:	2214      	movs	r2, #20
 80100b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80100b4:	4618      	mov	r0, r3
 80100b6:	f000 fe76 	bl	8010da6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80100ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100bc:	88db      	ldrh	r3, [r3, #6]
 80100be:	b29b      	uxth	r3, r3
 80100c0:	f003 0320 	and.w	r3, r3, #32
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	bf0c      	ite	eq
 80100c8:	2301      	moveq	r3, #1
 80100ca:	2300      	movne	r3, #0
 80100cc:	b2db      	uxtb	r3, r3
 80100ce:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80100d0:	69fb      	ldr	r3, [r7, #28]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d00e      	beq.n	80100f4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80100d6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80100d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80100da:	4413      	add	r3, r2
 80100dc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80100de:	8b7a      	ldrh	r2, [r7, #26]
 80100e0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80100e2:	429a      	cmp	r2, r3
 80100e4:	f0c0 80a0 	bcc.w	8010228 <ip4_reass+0x2ac>
 80100e8:	8b7b      	ldrh	r3, [r7, #26]
 80100ea:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 80100ee:	4293      	cmp	r3, r2
 80100f0:	f200 809a 	bhi.w	8010228 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80100f4:	69fa      	ldr	r2, [r7, #28]
 80100f6:	6879      	ldr	r1, [r7, #4]
 80100f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80100fa:	f7ff fdd5 	bl	800fca8 <ip_reass_chain_frag_into_datagram_and_validate>
 80100fe:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8010100:	697b      	ldr	r3, [r7, #20]
 8010102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010106:	f000 809b 	beq.w	8010240 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801010a:	4b48      	ldr	r3, [pc, #288]	@ (801022c <ip4_reass+0x2b0>)
 801010c:	881a      	ldrh	r2, [r3, #0]
 801010e:	8c3b      	ldrh	r3, [r7, #32]
 8010110:	4413      	add	r3, r2
 8010112:	b29a      	uxth	r2, r3
 8010114:	4b45      	ldr	r3, [pc, #276]	@ (801022c <ip4_reass+0x2b0>)
 8010116:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8010118:	69fb      	ldr	r3, [r7, #28]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d00d      	beq.n	801013a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801011e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8010120:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010122:	4413      	add	r3, r2
 8010124:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8010126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010128:	8a7a      	ldrh	r2, [r7, #18]
 801012a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801012c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801012e:	7f9b      	ldrb	r3, [r3, #30]
 8010130:	f043 0301 	orr.w	r3, r3, #1
 8010134:	b2da      	uxtb	r2, r3
 8010136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010138:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801013a:	697b      	ldr	r3, [r7, #20]
 801013c:	2b01      	cmp	r3, #1
 801013e:	d171      	bne.n	8010224 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8010140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010142:	8b9b      	ldrh	r3, [r3, #28]
 8010144:	3314      	adds	r3, #20
 8010146:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8010148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801014a:	685b      	ldr	r3, [r3, #4]
 801014c:	685b      	ldr	r3, [r3, #4]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8010152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010154:	685b      	ldr	r3, [r3, #4]
 8010156:	685b      	ldr	r3, [r3, #4]
 8010158:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801015a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801015c:	3308      	adds	r3, #8
 801015e:	2214      	movs	r2, #20
 8010160:	4619      	mov	r1, r3
 8010162:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010164:	f000 fe1f 	bl	8010da6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8010168:	8a3b      	ldrh	r3, [r7, #16]
 801016a:	4618      	mov	r0, r3
 801016c:	f7f5 fc64 	bl	8005a38 <lwip_htons>
 8010170:	4603      	mov	r3, r0
 8010172:	461a      	mov	r2, r3
 8010174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010176:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8010178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801017a:	2200      	movs	r2, #0
 801017c:	719a      	strb	r2, [r3, #6]
 801017e:	2200      	movs	r2, #0
 8010180:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8010182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010184:	2200      	movs	r2, #0
 8010186:	729a      	strb	r2, [r3, #10]
 8010188:	2200      	movs	r2, #0
 801018a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801018c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801018e:	685b      	ldr	r3, [r3, #4]
 8010190:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8010192:	e00d      	b.n	80101b0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8010194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010196:	685b      	ldr	r3, [r3, #4]
 8010198:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801019a:	2114      	movs	r1, #20
 801019c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801019e:	f7f6 ff23 	bl	8006fe8 <pbuf_remove_header>
      pbuf_cat(p, r);
 80101a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80101a4:	6878      	ldr	r0, [r7, #4]
 80101a6:	f7f7 f867 	bl	8007278 <pbuf_cat>
      r = iprh->next_pbuf;
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (r != NULL) {
 80101b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d1ee      	bne.n	8010194 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80101b6:	4b1e      	ldr	r3, [pc, #120]	@ (8010230 <ip4_reass+0x2b4>)
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80101bc:	429a      	cmp	r2, r3
 80101be:	d102      	bne.n	80101c6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80101c0:	2300      	movs	r3, #0
 80101c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80101c4:	e010      	b.n	80101e8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80101c6:	4b1a      	ldr	r3, [pc, #104]	@ (8010230 <ip4_reass+0x2b4>)
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80101cc:	e007      	b.n	80101de <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80101ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80101d4:	429a      	cmp	r2, r3
 80101d6:	d006      	beq.n	80101e6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80101d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80101de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d1f4      	bne.n	80101ce <ip4_reass+0x252>
 80101e4:	e000      	b.n	80101e8 <ip4_reass+0x26c>
          break;
 80101e6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80101e8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80101ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80101ec:	f7ff fd2e 	bl	800fc4c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80101f0:	6878      	ldr	r0, [r7, #4]
 80101f2:	f7f7 f807 	bl	8007204 <pbuf_clen>
 80101f6:	4603      	mov	r3, r0
 80101f8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80101fa:	4b0c      	ldr	r3, [pc, #48]	@ (801022c <ip4_reass+0x2b0>)
 80101fc:	881b      	ldrh	r3, [r3, #0]
 80101fe:	8c3a      	ldrh	r2, [r7, #32]
 8010200:	429a      	cmp	r2, r3
 8010202:	d906      	bls.n	8010212 <ip4_reass+0x296>
 8010204:	4b0b      	ldr	r3, [pc, #44]	@ (8010234 <ip4_reass+0x2b8>)
 8010206:	f240 229b 	movw	r2, #667	@ 0x29b
 801020a:	490b      	ldr	r1, [pc, #44]	@ (8010238 <ip4_reass+0x2bc>)
 801020c:	480b      	ldr	r0, [pc, #44]	@ (801023c <ip4_reass+0x2c0>)
 801020e:	f000 fbf5 	bl	80109fc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8010212:	4b06      	ldr	r3, [pc, #24]	@ (801022c <ip4_reass+0x2b0>)
 8010214:	881a      	ldrh	r2, [r3, #0]
 8010216:	8c3b      	ldrh	r3, [r7, #32]
 8010218:	1ad3      	subs	r3, r2, r3
 801021a:	b29a      	uxth	r2, r3
 801021c:	4b03      	ldr	r3, [pc, #12]	@ (801022c <ip4_reass+0x2b0>)
 801021e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	e038      	b.n	8010296 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8010224:	2300      	movs	r3, #0
 8010226:	e036      	b.n	8010296 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8010228:	bf00      	nop
 801022a:	e00a      	b.n	8010242 <ip4_reass+0x2c6>
 801022c:	20008944 	.word	0x20008944
 8010230:	20008940 	.word	0x20008940
 8010234:	08014c44 	.word	0x08014c44
 8010238:	08014db4 	.word	0x08014db4
 801023c:	08014c8c 	.word	0x08014c8c
    goto nullreturn_ipr;
 8010240:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8010242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010244:	2b00      	cmp	r3, #0
 8010246:	d106      	bne.n	8010256 <ip4_reass+0x2da>
 8010248:	4b15      	ldr	r3, [pc, #84]	@ (80102a0 <ip4_reass+0x324>)
 801024a:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801024e:	4915      	ldr	r1, [pc, #84]	@ (80102a4 <ip4_reass+0x328>)
 8010250:	4815      	ldr	r0, [pc, #84]	@ (80102a8 <ip4_reass+0x32c>)
 8010252:	f000 fbd3 	bl	80109fc <iprintf>
  if (ipr->p == NULL) {
 8010256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010258:	685b      	ldr	r3, [r3, #4]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d116      	bne.n	801028c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801025e:	4b13      	ldr	r3, [pc, #76]	@ (80102ac <ip4_reass+0x330>)
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010264:	429a      	cmp	r2, r3
 8010266:	d006      	beq.n	8010276 <ip4_reass+0x2fa>
 8010268:	4b0d      	ldr	r3, [pc, #52]	@ (80102a0 <ip4_reass+0x324>)
 801026a:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801026e:	4910      	ldr	r1, [pc, #64]	@ (80102b0 <ip4_reass+0x334>)
 8010270:	480d      	ldr	r0, [pc, #52]	@ (80102a8 <ip4_reass+0x32c>)
 8010272:	f000 fbc3 	bl	80109fc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8010276:	2100      	movs	r1, #0
 8010278:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801027a:	f7ff fce7 	bl	800fc4c <ip_reass_dequeue_datagram>
 801027e:	e006      	b.n	801028e <ip4_reass+0x312>
    goto nullreturn;
 8010280:	bf00      	nop
 8010282:	e004      	b.n	801028e <ip4_reass+0x312>
    goto nullreturn;
 8010284:	bf00      	nop
 8010286:	e002      	b.n	801028e <ip4_reass+0x312>
      goto nullreturn;
 8010288:	bf00      	nop
 801028a:	e000      	b.n	801028e <ip4_reass+0x312>
  }

nullreturn:
 801028c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801028e:	6878      	ldr	r0, [r7, #4]
 8010290:	f7f6 ff30 	bl	80070f4 <pbuf_free>
  return NULL;
 8010294:	2300      	movs	r3, #0
}
 8010296:	4618      	mov	r0, r3
 8010298:	3738      	adds	r7, #56	@ 0x38
 801029a:	46bd      	mov	sp, r7
 801029c:	bd80      	pop	{r7, pc}
 801029e:	bf00      	nop
 80102a0:	08014c44 	.word	0x08014c44
 80102a4:	08014dd0 	.word	0x08014dd0
 80102a8:	08014c8c 	.word	0x08014c8c
 80102ac:	20008940 	.word	0x20008940
 80102b0:	08014ddc 	.word	0x08014ddc

080102b4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80102b4:	b580      	push	{r7, lr}
 80102b6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80102b8:	2005      	movs	r0, #5
 80102ba:	f7f6 f835 	bl	8006328 <memp_malloc>
 80102be:	4603      	mov	r3, r0
}
 80102c0:	4618      	mov	r0, r3
 80102c2:	bd80      	pop	{r7, pc}

080102c4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80102c4:	b580      	push	{r7, lr}
 80102c6:	b082      	sub	sp, #8
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d106      	bne.n	80102e0 <ip_frag_free_pbuf_custom_ref+0x1c>
 80102d2:	4b07      	ldr	r3, [pc, #28]	@ (80102f0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80102d4:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 80102d8:	4906      	ldr	r1, [pc, #24]	@ (80102f4 <ip_frag_free_pbuf_custom_ref+0x30>)
 80102da:	4807      	ldr	r0, [pc, #28]	@ (80102f8 <ip_frag_free_pbuf_custom_ref+0x34>)
 80102dc:	f000 fb8e 	bl	80109fc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80102e0:	6879      	ldr	r1, [r7, #4]
 80102e2:	2005      	movs	r0, #5
 80102e4:	f7f6 f890 	bl	8006408 <memp_free>
}
 80102e8:	bf00      	nop
 80102ea:	3708      	adds	r7, #8
 80102ec:	46bd      	mov	sp, r7
 80102ee:	bd80      	pop	{r7, pc}
 80102f0:	08014c44 	.word	0x08014c44
 80102f4:	08014dfc 	.word	0x08014dfc
 80102f8:	08014c8c 	.word	0x08014c8c

080102fc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b084      	sub	sp, #16
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d106      	bne.n	801031c <ipfrag_free_pbuf_custom+0x20>
 801030e:	4b11      	ldr	r3, [pc, #68]	@ (8010354 <ipfrag_free_pbuf_custom+0x58>)
 8010310:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8010314:	4910      	ldr	r1, [pc, #64]	@ (8010358 <ipfrag_free_pbuf_custom+0x5c>)
 8010316:	4811      	ldr	r0, [pc, #68]	@ (801035c <ipfrag_free_pbuf_custom+0x60>)
 8010318:	f000 fb70 	bl	80109fc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801031c:	68fa      	ldr	r2, [r7, #12]
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	429a      	cmp	r2, r3
 8010322:	d006      	beq.n	8010332 <ipfrag_free_pbuf_custom+0x36>
 8010324:	4b0b      	ldr	r3, [pc, #44]	@ (8010354 <ipfrag_free_pbuf_custom+0x58>)
 8010326:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801032a:	490d      	ldr	r1, [pc, #52]	@ (8010360 <ipfrag_free_pbuf_custom+0x64>)
 801032c:	480b      	ldr	r0, [pc, #44]	@ (801035c <ipfrag_free_pbuf_custom+0x60>)
 801032e:	f000 fb65 	bl	80109fc <iprintf>
  if (pcr->original != NULL) {
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	695b      	ldr	r3, [r3, #20]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d004      	beq.n	8010344 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	695b      	ldr	r3, [r3, #20]
 801033e:	4618      	mov	r0, r3
 8010340:	f7f6 fed8 	bl	80070f4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8010344:	68f8      	ldr	r0, [r7, #12]
 8010346:	f7ff ffbd 	bl	80102c4 <ip_frag_free_pbuf_custom_ref>
}
 801034a:	bf00      	nop
 801034c:	3710      	adds	r7, #16
 801034e:	46bd      	mov	sp, r7
 8010350:	bd80      	pop	{r7, pc}
 8010352:	bf00      	nop
 8010354:	08014c44 	.word	0x08014c44
 8010358:	08014e08 	.word	0x08014e08
 801035c:	08014c8c 	.word	0x08014c8c
 8010360:	08014e14 	.word	0x08014e14

08010364 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8010364:	b580      	push	{r7, lr}
 8010366:	b094      	sub	sp, #80	@ 0x50
 8010368:	af02      	add	r7, sp, #8
 801036a:	60f8      	str	r0, [r7, #12]
 801036c:	60b9      	str	r1, [r7, #8]
 801036e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8010370:	2300      	movs	r3, #0
 8010372:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8010376:	68bb      	ldr	r3, [r7, #8]
 8010378:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801037a:	3b14      	subs	r3, #20
 801037c:	2b00      	cmp	r3, #0
 801037e:	da00      	bge.n	8010382 <ip4_frag+0x1e>
 8010380:	3307      	adds	r3, #7
 8010382:	10db      	asrs	r3, r3, #3
 8010384:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8010386:	2314      	movs	r3, #20
 8010388:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	685b      	ldr	r3, [r3, #4]
 801038e:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8010390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010392:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8010394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010396:	781b      	ldrb	r3, [r3, #0]
 8010398:	f003 030f 	and.w	r3, r3, #15
 801039c:	b2db      	uxtb	r3, r3
 801039e:	009b      	lsls	r3, r3, #2
 80103a0:	b2db      	uxtb	r3, r3
 80103a2:	2b14      	cmp	r3, #20
 80103a4:	d002      	beq.n	80103ac <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80103a6:	f06f 0305 	mvn.w	r3, #5
 80103aa:	e110      	b.n	80105ce <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	895b      	ldrh	r3, [r3, #10]
 80103b0:	2b13      	cmp	r3, #19
 80103b2:	d809      	bhi.n	80103c8 <ip4_frag+0x64>
 80103b4:	4b88      	ldr	r3, [pc, #544]	@ (80105d8 <ip4_frag+0x274>)
 80103b6:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 80103ba:	4988      	ldr	r1, [pc, #544]	@ (80105dc <ip4_frag+0x278>)
 80103bc:	4888      	ldr	r0, [pc, #544]	@ (80105e0 <ip4_frag+0x27c>)
 80103be:	f000 fb1d 	bl	80109fc <iprintf>
 80103c2:	f06f 0305 	mvn.w	r3, #5
 80103c6:	e102      	b.n	80105ce <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80103c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103ca:	88db      	ldrh	r3, [r3, #6]
 80103cc:	b29b      	uxth	r3, r3
 80103ce:	4618      	mov	r0, r3
 80103d0:	f7f5 fb32 	bl	8005a38 <lwip_htons>
 80103d4:	4603      	mov	r3, r0
 80103d6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 80103d8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80103da:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80103de:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80103e2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80103e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80103e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	891b      	ldrh	r3, [r3, #8]
 80103ee:	3b14      	subs	r3, #20
 80103f0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 80103f4:	e0e1      	b.n	80105ba <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80103f6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80103f8:	00db      	lsls	r3, r3, #3
 80103fa:	b29b      	uxth	r3, r3
 80103fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010400:	4293      	cmp	r3, r2
 8010402:	bf28      	it	cs
 8010404:	4613      	movcs	r3, r2
 8010406:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8010408:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801040c:	2114      	movs	r1, #20
 801040e:	200e      	movs	r0, #14
 8010410:	f7f6 fb8c 	bl	8006b2c <pbuf_alloc>
 8010414:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8010416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010418:	2b00      	cmp	r3, #0
 801041a:	f000 80d5 	beq.w	80105c8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801041e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010420:	895b      	ldrh	r3, [r3, #10]
 8010422:	2b13      	cmp	r3, #19
 8010424:	d806      	bhi.n	8010434 <ip4_frag+0xd0>
 8010426:	4b6c      	ldr	r3, [pc, #432]	@ (80105d8 <ip4_frag+0x274>)
 8010428:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801042c:	496d      	ldr	r1, [pc, #436]	@ (80105e4 <ip4_frag+0x280>)
 801042e:	486c      	ldr	r0, [pc, #432]	@ (80105e0 <ip4_frag+0x27c>)
 8010430:	f000 fae4 	bl	80109fc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8010434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010436:	685b      	ldr	r3, [r3, #4]
 8010438:	2214      	movs	r2, #20
 801043a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801043c:	4618      	mov	r0, r3
 801043e:	f000 fcb2 	bl	8010da6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8010442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010444:	685b      	ldr	r3, [r3, #4]
 8010446:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8010448:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801044a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801044e:	e064      	b.n	801051a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	895a      	ldrh	r2, [r3, #10]
 8010454:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010456:	1ad3      	subs	r3, r2, r3
 8010458:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	895b      	ldrh	r3, [r3, #10]
 801045e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8010460:	429a      	cmp	r2, r3
 8010462:	d906      	bls.n	8010472 <ip4_frag+0x10e>
 8010464:	4b5c      	ldr	r3, [pc, #368]	@ (80105d8 <ip4_frag+0x274>)
 8010466:	f240 322d 	movw	r2, #813	@ 0x32d
 801046a:	495f      	ldr	r1, [pc, #380]	@ (80105e8 <ip4_frag+0x284>)
 801046c:	485c      	ldr	r0, [pc, #368]	@ (80105e0 <ip4_frag+0x27c>)
 801046e:	f000 fac5 	bl	80109fc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8010472:	8bfa      	ldrh	r2, [r7, #30]
 8010474:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8010478:	4293      	cmp	r3, r2
 801047a:	bf28      	it	cs
 801047c:	4613      	movcs	r3, r2
 801047e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8010482:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010486:	2b00      	cmp	r3, #0
 8010488:	d105      	bne.n	8010496 <ip4_frag+0x132>
        poff = 0;
 801048a:	2300      	movs	r3, #0
 801048c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	60fb      	str	r3, [r7, #12]
        continue;
 8010494:	e041      	b.n	801051a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8010496:	f7ff ff0d 	bl	80102b4 <ip_frag_alloc_pbuf_custom_ref>
 801049a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801049c:	69bb      	ldr	r3, [r7, #24]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d103      	bne.n	80104aa <ip4_frag+0x146>
        pbuf_free(rambuf);
 80104a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80104a4:	f7f6 fe26 	bl	80070f4 <pbuf_free>
        goto memerr;
 80104a8:	e08f      	b.n	80105ca <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80104aa:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80104b0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80104b2:	4413      	add	r3, r2
 80104b4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 80104b8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80104bc:	9201      	str	r2, [sp, #4]
 80104be:	9300      	str	r3, [sp, #0]
 80104c0:	4603      	mov	r3, r0
 80104c2:	2241      	movs	r2, #65	@ 0x41
 80104c4:	2000      	movs	r0, #0
 80104c6:	f7f6 fc5b 	bl	8006d80 <pbuf_alloced_custom>
 80104ca:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80104cc:	697b      	ldr	r3, [r7, #20]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d106      	bne.n	80104e0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80104d2:	69b8      	ldr	r0, [r7, #24]
 80104d4:	f7ff fef6 	bl	80102c4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80104d8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80104da:	f7f6 fe0b 	bl	80070f4 <pbuf_free>
        goto memerr;
 80104de:	e074      	b.n	80105ca <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80104e0:	68f8      	ldr	r0, [r7, #12]
 80104e2:	f7f6 fea7 	bl	8007234 <pbuf_ref>
      pcr->original = p;
 80104e6:	69bb      	ldr	r3, [r7, #24]
 80104e8:	68fa      	ldr	r2, [r7, #12]
 80104ea:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80104ec:	69bb      	ldr	r3, [r7, #24]
 80104ee:	4a3f      	ldr	r2, [pc, #252]	@ (80105ec <ip4_frag+0x288>)
 80104f0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80104f2:	6979      	ldr	r1, [r7, #20]
 80104f4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80104f6:	f7f6 febf 	bl	8007278 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80104fa:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80104fe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010502:	1ad3      	subs	r3, r2, r3
 8010504:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8010508:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801050c:	2b00      	cmp	r3, #0
 801050e:	d004      	beq.n	801051a <ip4_frag+0x1b6>
        poff = 0;
 8010510:	2300      	movs	r3, #0
 8010512:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801051a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801051e:	2b00      	cmp	r3, #0
 8010520:	d196      	bne.n	8010450 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8010522:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8010524:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010528:	4413      	add	r3, r2
 801052a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801052c:	68bb      	ldr	r3, [r7, #8]
 801052e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8010530:	f1a3 0213 	sub.w	r2, r3, #19
 8010534:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010538:	429a      	cmp	r2, r3
 801053a:	bfcc      	ite	gt
 801053c:	2301      	movgt	r3, #1
 801053e:	2300      	movle	r3, #0
 8010540:	b2db      	uxtb	r3, r3
 8010542:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8010544:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8010548:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801054c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801054e:	6a3b      	ldr	r3, [r7, #32]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d002      	beq.n	801055a <ip4_frag+0x1f6>
 8010554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010556:	2b00      	cmp	r3, #0
 8010558:	d003      	beq.n	8010562 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801055a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801055c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8010560:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8010562:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010564:	4618      	mov	r0, r3
 8010566:	f7f5 fa67 	bl	8005a38 <lwip_htons>
 801056a:	4603      	mov	r3, r0
 801056c:	461a      	mov	r2, r3
 801056e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010570:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8010572:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010574:	3314      	adds	r3, #20
 8010576:	b29b      	uxth	r3, r3
 8010578:	4618      	mov	r0, r3
 801057a:	f7f5 fa5d 	bl	8005a38 <lwip_htons>
 801057e:	4603      	mov	r3, r0
 8010580:	461a      	mov	r2, r3
 8010582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010584:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8010586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010588:	2200      	movs	r2, #0
 801058a:	729a      	strb	r2, [r3, #10]
 801058c:	2200      	movs	r2, #0
 801058e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8010590:	68bb      	ldr	r3, [r7, #8]
 8010592:	695b      	ldr	r3, [r3, #20]
 8010594:	687a      	ldr	r2, [r7, #4]
 8010596:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010598:	68b8      	ldr	r0, [r7, #8]
 801059a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801059c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801059e:	f7f6 fda9 	bl	80070f4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80105a2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80105a6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80105a8:	1ad3      	subs	r3, r2, r3
 80105aa:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 80105ae:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80105b2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80105b4:	4413      	add	r3, r2
 80105b6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 80105ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80105be:	2b00      	cmp	r3, #0
 80105c0:	f47f af19 	bne.w	80103f6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80105c4:	2300      	movs	r3, #0
 80105c6:	e002      	b.n	80105ce <ip4_frag+0x26a>
      goto memerr;
 80105c8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80105ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80105ce:	4618      	mov	r0, r3
 80105d0:	3748      	adds	r7, #72	@ 0x48
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd80      	pop	{r7, pc}
 80105d6:	bf00      	nop
 80105d8:	08014c44 	.word	0x08014c44
 80105dc:	08014e20 	.word	0x08014e20
 80105e0:	08014c8c 	.word	0x08014c8c
 80105e4:	08014e3c 	.word	0x08014e3c
 80105e8:	08014e5c 	.word	0x08014e5c
 80105ec:	080102fd 	.word	0x080102fd

080105f0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80105f0:	b580      	push	{r7, lr}
 80105f2:	b086      	sub	sp, #24
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
 80105f8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80105fa:	230e      	movs	r3, #14
 80105fc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	895b      	ldrh	r3, [r3, #10]
 8010602:	2b0e      	cmp	r3, #14
 8010604:	d96e      	bls.n	80106e4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	7bdb      	ldrb	r3, [r3, #15]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d106      	bne.n	801061c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801060e:	683b      	ldr	r3, [r7, #0]
 8010610:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010614:	3301      	adds	r3, #1
 8010616:	b2da      	uxtb	r2, r3
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	685b      	ldr	r3, [r3, #4]
 8010620:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8010622:	693b      	ldr	r3, [r7, #16]
 8010624:	7b1a      	ldrb	r2, [r3, #12]
 8010626:	7b5b      	ldrb	r3, [r3, #13]
 8010628:	021b      	lsls	r3, r3, #8
 801062a:	4313      	orrs	r3, r2
 801062c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801062e:	693b      	ldr	r3, [r7, #16]
 8010630:	781b      	ldrb	r3, [r3, #0]
 8010632:	f003 0301 	and.w	r3, r3, #1
 8010636:	2b00      	cmp	r3, #0
 8010638:	d023      	beq.n	8010682 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801063a:	693b      	ldr	r3, [r7, #16]
 801063c:	781b      	ldrb	r3, [r3, #0]
 801063e:	2b01      	cmp	r3, #1
 8010640:	d10f      	bne.n	8010662 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010642:	693b      	ldr	r3, [r7, #16]
 8010644:	785b      	ldrb	r3, [r3, #1]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d11b      	bne.n	8010682 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801064a:	693b      	ldr	r3, [r7, #16]
 801064c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801064e:	2b5e      	cmp	r3, #94	@ 0x5e
 8010650:	d117      	bne.n	8010682 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	7b5b      	ldrb	r3, [r3, #13]
 8010656:	f043 0310 	orr.w	r3, r3, #16
 801065a:	b2da      	uxtb	r2, r3
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	735a      	strb	r2, [r3, #13]
 8010660:	e00f      	b.n	8010682 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8010662:	693b      	ldr	r3, [r7, #16]
 8010664:	2206      	movs	r2, #6
 8010666:	4928      	ldr	r1, [pc, #160]	@ (8010708 <ethernet_input+0x118>)
 8010668:	4618      	mov	r0, r3
 801066a:	f000 fb17 	bl	8010c9c <memcmp>
 801066e:	4603      	mov	r3, r0
 8010670:	2b00      	cmp	r3, #0
 8010672:	d106      	bne.n	8010682 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	7b5b      	ldrb	r3, [r3, #13]
 8010678:	f043 0308 	orr.w	r3, r3, #8
 801067c:	b2da      	uxtb	r2, r3
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8010682:	89fb      	ldrh	r3, [r7, #14]
 8010684:	2b08      	cmp	r3, #8
 8010686:	d003      	beq.n	8010690 <ethernet_input+0xa0>
 8010688:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801068c:	d014      	beq.n	80106b8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801068e:	e032      	b.n	80106f6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010690:	683b      	ldr	r3, [r7, #0]
 8010692:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010696:	f003 0308 	and.w	r3, r3, #8
 801069a:	2b00      	cmp	r3, #0
 801069c:	d024      	beq.n	80106e8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801069e:	8afb      	ldrh	r3, [r7, #22]
 80106a0:	4619      	mov	r1, r3
 80106a2:	6878      	ldr	r0, [r7, #4]
 80106a4:	f7f6 fca0 	bl	8006fe8 <pbuf_remove_header>
 80106a8:	4603      	mov	r3, r0
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d11e      	bne.n	80106ec <ethernet_input+0xfc>
        ip4_input(p, netif);
 80106ae:	6839      	ldr	r1, [r7, #0]
 80106b0:	6878      	ldr	r0, [r7, #4]
 80106b2:	f7fe ff21 	bl	800f4f8 <ip4_input>
      break;
 80106b6:	e013      	b.n	80106e0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80106b8:	683b      	ldr	r3, [r7, #0]
 80106ba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80106be:	f003 0308 	and.w	r3, r3, #8
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d014      	beq.n	80106f0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80106c6:	8afb      	ldrh	r3, [r7, #22]
 80106c8:	4619      	mov	r1, r3
 80106ca:	6878      	ldr	r0, [r7, #4]
 80106cc:	f7f6 fc8c 	bl	8006fe8 <pbuf_remove_header>
 80106d0:	4603      	mov	r3, r0
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d10e      	bne.n	80106f4 <ethernet_input+0x104>
        etharp_input(p, netif);
 80106d6:	6839      	ldr	r1, [r7, #0]
 80106d8:	6878      	ldr	r0, [r7, #4]
 80106da:	f7fe f8bb 	bl	800e854 <etharp_input>
      break;
 80106de:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80106e0:	2300      	movs	r3, #0
 80106e2:	e00c      	b.n	80106fe <ethernet_input+0x10e>
    goto free_and_return;
 80106e4:	bf00      	nop
 80106e6:	e006      	b.n	80106f6 <ethernet_input+0x106>
        goto free_and_return;
 80106e8:	bf00      	nop
 80106ea:	e004      	b.n	80106f6 <ethernet_input+0x106>
        goto free_and_return;
 80106ec:	bf00      	nop
 80106ee:	e002      	b.n	80106f6 <ethernet_input+0x106>
        goto free_and_return;
 80106f0:	bf00      	nop
 80106f2:	e000      	b.n	80106f6 <ethernet_input+0x106>
        goto free_and_return;
 80106f4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80106f6:	6878      	ldr	r0, [r7, #4]
 80106f8:	f7f6 fcfc 	bl	80070f4 <pbuf_free>
  return ERR_OK;
 80106fc:	2300      	movs	r3, #0
}
 80106fe:	4618      	mov	r0, r3
 8010700:	3718      	adds	r7, #24
 8010702:	46bd      	mov	sp, r7
 8010704:	bd80      	pop	{r7, pc}
 8010706:	bf00      	nop
 8010708:	08015054 	.word	0x08015054

0801070c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801070c:	b580      	push	{r7, lr}
 801070e:	b086      	sub	sp, #24
 8010710:	af00      	add	r7, sp, #0
 8010712:	60f8      	str	r0, [r7, #12]
 8010714:	60b9      	str	r1, [r7, #8]
 8010716:	607a      	str	r2, [r7, #4]
 8010718:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801071a:	8c3b      	ldrh	r3, [r7, #32]
 801071c:	4618      	mov	r0, r3
 801071e:	f7f5 f98b 	bl	8005a38 <lwip_htons>
 8010722:	4603      	mov	r3, r0
 8010724:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8010726:	210e      	movs	r1, #14
 8010728:	68b8      	ldr	r0, [r7, #8]
 801072a:	f7f6 fc4d 	bl	8006fc8 <pbuf_add_header>
 801072e:	4603      	mov	r3, r0
 8010730:	2b00      	cmp	r3, #0
 8010732:	d125      	bne.n	8010780 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8010734:	68bb      	ldr	r3, [r7, #8]
 8010736:	685b      	ldr	r3, [r3, #4]
 8010738:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801073a:	693b      	ldr	r3, [r7, #16]
 801073c:	8afa      	ldrh	r2, [r7, #22]
 801073e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8010740:	693b      	ldr	r3, [r7, #16]
 8010742:	2206      	movs	r2, #6
 8010744:	6839      	ldr	r1, [r7, #0]
 8010746:	4618      	mov	r0, r3
 8010748:	f000 fb2d 	bl	8010da6 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801074c:	693b      	ldr	r3, [r7, #16]
 801074e:	3306      	adds	r3, #6
 8010750:	2206      	movs	r2, #6
 8010752:	6879      	ldr	r1, [r7, #4]
 8010754:	4618      	mov	r0, r3
 8010756:	f000 fb26 	bl	8010da6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8010760:	2b06      	cmp	r3, #6
 8010762:	d006      	beq.n	8010772 <ethernet_output+0x66>
 8010764:	4b0a      	ldr	r3, [pc, #40]	@ (8010790 <ethernet_output+0x84>)
 8010766:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801076a:	490a      	ldr	r1, [pc, #40]	@ (8010794 <ethernet_output+0x88>)
 801076c:	480a      	ldr	r0, [pc, #40]	@ (8010798 <ethernet_output+0x8c>)
 801076e:	f000 f945 	bl	80109fc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	699b      	ldr	r3, [r3, #24]
 8010776:	68b9      	ldr	r1, [r7, #8]
 8010778:	68f8      	ldr	r0, [r7, #12]
 801077a:	4798      	blx	r3
 801077c:	4603      	mov	r3, r0
 801077e:	e002      	b.n	8010786 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8010780:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8010782:	f06f 0301 	mvn.w	r3, #1
}
 8010786:	4618      	mov	r0, r3
 8010788:	3718      	adds	r7, #24
 801078a:	46bd      	mov	sp, r7
 801078c:	bd80      	pop	{r7, pc}
 801078e:	bf00      	nop
 8010790:	08014e6c 	.word	0x08014e6c
 8010794:	08014ea4 	.word	0x08014ea4
 8010798:	08014ed8 	.word	0x08014ed8

0801079c <__assert_func>:
 801079c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801079e:	4614      	mov	r4, r2
 80107a0:	461a      	mov	r2, r3
 80107a2:	4b09      	ldr	r3, [pc, #36]	@ (80107c8 <__assert_func+0x2c>)
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	4605      	mov	r5, r0
 80107a8:	68d8      	ldr	r0, [r3, #12]
 80107aa:	b954      	cbnz	r4, 80107c2 <__assert_func+0x26>
 80107ac:	4b07      	ldr	r3, [pc, #28]	@ (80107cc <__assert_func+0x30>)
 80107ae:	461c      	mov	r4, r3
 80107b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80107b4:	9100      	str	r1, [sp, #0]
 80107b6:	462b      	mov	r3, r5
 80107b8:	4905      	ldr	r1, [pc, #20]	@ (80107d0 <__assert_func+0x34>)
 80107ba:	f000 f8ef 	bl	801099c <fiprintf>
 80107be:	f000 fb00 	bl	8010dc2 <abort>
 80107c2:	4b04      	ldr	r3, [pc, #16]	@ (80107d4 <__assert_func+0x38>)
 80107c4:	e7f4      	b.n	80107b0 <__assert_func+0x14>
 80107c6:	bf00      	nop
 80107c8:	20000038 	.word	0x20000038
 80107cc:	0801509d 	.word	0x0801509d
 80107d0:	0801506f 	.word	0x0801506f
 80107d4:	08015062 	.word	0x08015062

080107d8 <rand>:
 80107d8:	4b16      	ldr	r3, [pc, #88]	@ (8010834 <rand+0x5c>)
 80107da:	b510      	push	{r4, lr}
 80107dc:	681c      	ldr	r4, [r3, #0]
 80107de:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80107e0:	b9b3      	cbnz	r3, 8010810 <rand+0x38>
 80107e2:	2018      	movs	r0, #24
 80107e4:	f000 fb3e 	bl	8010e64 <malloc>
 80107e8:	4602      	mov	r2, r0
 80107ea:	6320      	str	r0, [r4, #48]	@ 0x30
 80107ec:	b920      	cbnz	r0, 80107f8 <rand+0x20>
 80107ee:	4b12      	ldr	r3, [pc, #72]	@ (8010838 <rand+0x60>)
 80107f0:	4812      	ldr	r0, [pc, #72]	@ (801083c <rand+0x64>)
 80107f2:	2152      	movs	r1, #82	@ 0x52
 80107f4:	f7ff ffd2 	bl	801079c <__assert_func>
 80107f8:	4911      	ldr	r1, [pc, #68]	@ (8010840 <rand+0x68>)
 80107fa:	4b12      	ldr	r3, [pc, #72]	@ (8010844 <rand+0x6c>)
 80107fc:	e9c0 1300 	strd	r1, r3, [r0]
 8010800:	4b11      	ldr	r3, [pc, #68]	@ (8010848 <rand+0x70>)
 8010802:	6083      	str	r3, [r0, #8]
 8010804:	230b      	movs	r3, #11
 8010806:	8183      	strh	r3, [r0, #12]
 8010808:	2100      	movs	r1, #0
 801080a:	2001      	movs	r0, #1
 801080c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8010810:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010812:	480e      	ldr	r0, [pc, #56]	@ (801084c <rand+0x74>)
 8010814:	690b      	ldr	r3, [r1, #16]
 8010816:	694c      	ldr	r4, [r1, #20]
 8010818:	4a0d      	ldr	r2, [pc, #52]	@ (8010850 <rand+0x78>)
 801081a:	4358      	muls	r0, r3
 801081c:	fb02 0004 	mla	r0, r2, r4, r0
 8010820:	fba3 3202 	umull	r3, r2, r3, r2
 8010824:	3301      	adds	r3, #1
 8010826:	eb40 0002 	adc.w	r0, r0, r2
 801082a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801082e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8010832:	bd10      	pop	{r4, pc}
 8010834:	20000038 	.word	0x20000038
 8010838:	0801509e 	.word	0x0801509e
 801083c:	080150b5 	.word	0x080150b5
 8010840:	abcd330e 	.word	0xabcd330e
 8010844:	e66d1234 	.word	0xe66d1234
 8010848:	0005deec 	.word	0x0005deec
 801084c:	5851f42d 	.word	0x5851f42d
 8010850:	4c957f2d 	.word	0x4c957f2d

08010854 <std>:
 8010854:	2300      	movs	r3, #0
 8010856:	b510      	push	{r4, lr}
 8010858:	4604      	mov	r4, r0
 801085a:	e9c0 3300 	strd	r3, r3, [r0]
 801085e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010862:	6083      	str	r3, [r0, #8]
 8010864:	8181      	strh	r1, [r0, #12]
 8010866:	6643      	str	r3, [r0, #100]	@ 0x64
 8010868:	81c2      	strh	r2, [r0, #14]
 801086a:	6183      	str	r3, [r0, #24]
 801086c:	4619      	mov	r1, r3
 801086e:	2208      	movs	r2, #8
 8010870:	305c      	adds	r0, #92	@ 0x5c
 8010872:	f000 fa23 	bl	8010cbc <memset>
 8010876:	4b0d      	ldr	r3, [pc, #52]	@ (80108ac <std+0x58>)
 8010878:	6263      	str	r3, [r4, #36]	@ 0x24
 801087a:	4b0d      	ldr	r3, [pc, #52]	@ (80108b0 <std+0x5c>)
 801087c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801087e:	4b0d      	ldr	r3, [pc, #52]	@ (80108b4 <std+0x60>)
 8010880:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010882:	4b0d      	ldr	r3, [pc, #52]	@ (80108b8 <std+0x64>)
 8010884:	6323      	str	r3, [r4, #48]	@ 0x30
 8010886:	4b0d      	ldr	r3, [pc, #52]	@ (80108bc <std+0x68>)
 8010888:	6224      	str	r4, [r4, #32]
 801088a:	429c      	cmp	r4, r3
 801088c:	d006      	beq.n	801089c <std+0x48>
 801088e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010892:	4294      	cmp	r4, r2
 8010894:	d002      	beq.n	801089c <std+0x48>
 8010896:	33d0      	adds	r3, #208	@ 0xd0
 8010898:	429c      	cmp	r4, r3
 801089a:	d105      	bne.n	80108a8 <std+0x54>
 801089c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80108a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80108a4:	f000 ba7c 	b.w	8010da0 <__retarget_lock_init_recursive>
 80108a8:	bd10      	pop	{r4, pc}
 80108aa:	bf00      	nop
 80108ac:	08010aed 	.word	0x08010aed
 80108b0:	08010b0f 	.word	0x08010b0f
 80108b4:	08010b47 	.word	0x08010b47
 80108b8:	08010b6b 	.word	0x08010b6b
 80108bc:	20008948 	.word	0x20008948

080108c0 <stdio_exit_handler>:
 80108c0:	4a02      	ldr	r2, [pc, #8]	@ (80108cc <stdio_exit_handler+0xc>)
 80108c2:	4903      	ldr	r1, [pc, #12]	@ (80108d0 <stdio_exit_handler+0x10>)
 80108c4:	4803      	ldr	r0, [pc, #12]	@ (80108d4 <stdio_exit_handler+0x14>)
 80108c6:	f000 b87b 	b.w	80109c0 <_fwalk_sglue>
 80108ca:	bf00      	nop
 80108cc:	2000002c 	.word	0x2000002c
 80108d0:	08011679 	.word	0x08011679
 80108d4:	2000003c 	.word	0x2000003c

080108d8 <cleanup_stdio>:
 80108d8:	6841      	ldr	r1, [r0, #4]
 80108da:	4b0c      	ldr	r3, [pc, #48]	@ (801090c <cleanup_stdio+0x34>)
 80108dc:	4299      	cmp	r1, r3
 80108de:	b510      	push	{r4, lr}
 80108e0:	4604      	mov	r4, r0
 80108e2:	d001      	beq.n	80108e8 <cleanup_stdio+0x10>
 80108e4:	f000 fec8 	bl	8011678 <_fflush_r>
 80108e8:	68a1      	ldr	r1, [r4, #8]
 80108ea:	4b09      	ldr	r3, [pc, #36]	@ (8010910 <cleanup_stdio+0x38>)
 80108ec:	4299      	cmp	r1, r3
 80108ee:	d002      	beq.n	80108f6 <cleanup_stdio+0x1e>
 80108f0:	4620      	mov	r0, r4
 80108f2:	f000 fec1 	bl	8011678 <_fflush_r>
 80108f6:	68e1      	ldr	r1, [r4, #12]
 80108f8:	4b06      	ldr	r3, [pc, #24]	@ (8010914 <cleanup_stdio+0x3c>)
 80108fa:	4299      	cmp	r1, r3
 80108fc:	d004      	beq.n	8010908 <cleanup_stdio+0x30>
 80108fe:	4620      	mov	r0, r4
 8010900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010904:	f000 beb8 	b.w	8011678 <_fflush_r>
 8010908:	bd10      	pop	{r4, pc}
 801090a:	bf00      	nop
 801090c:	20008948 	.word	0x20008948
 8010910:	200089b0 	.word	0x200089b0
 8010914:	20008a18 	.word	0x20008a18

08010918 <global_stdio_init.part.0>:
 8010918:	b510      	push	{r4, lr}
 801091a:	4b0b      	ldr	r3, [pc, #44]	@ (8010948 <global_stdio_init.part.0+0x30>)
 801091c:	4c0b      	ldr	r4, [pc, #44]	@ (801094c <global_stdio_init.part.0+0x34>)
 801091e:	4a0c      	ldr	r2, [pc, #48]	@ (8010950 <global_stdio_init.part.0+0x38>)
 8010920:	601a      	str	r2, [r3, #0]
 8010922:	4620      	mov	r0, r4
 8010924:	2200      	movs	r2, #0
 8010926:	2104      	movs	r1, #4
 8010928:	f7ff ff94 	bl	8010854 <std>
 801092c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010930:	2201      	movs	r2, #1
 8010932:	2109      	movs	r1, #9
 8010934:	f7ff ff8e 	bl	8010854 <std>
 8010938:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801093c:	2202      	movs	r2, #2
 801093e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010942:	2112      	movs	r1, #18
 8010944:	f7ff bf86 	b.w	8010854 <std>
 8010948:	20008a80 	.word	0x20008a80
 801094c:	20008948 	.word	0x20008948
 8010950:	080108c1 	.word	0x080108c1

08010954 <__sfp_lock_acquire>:
 8010954:	4801      	ldr	r0, [pc, #4]	@ (801095c <__sfp_lock_acquire+0x8>)
 8010956:	f000 ba24 	b.w	8010da2 <__retarget_lock_acquire_recursive>
 801095a:	bf00      	nop
 801095c:	20008a89 	.word	0x20008a89

08010960 <__sfp_lock_release>:
 8010960:	4801      	ldr	r0, [pc, #4]	@ (8010968 <__sfp_lock_release+0x8>)
 8010962:	f000 ba1f 	b.w	8010da4 <__retarget_lock_release_recursive>
 8010966:	bf00      	nop
 8010968:	20008a89 	.word	0x20008a89

0801096c <__sinit>:
 801096c:	b510      	push	{r4, lr}
 801096e:	4604      	mov	r4, r0
 8010970:	f7ff fff0 	bl	8010954 <__sfp_lock_acquire>
 8010974:	6a23      	ldr	r3, [r4, #32]
 8010976:	b11b      	cbz	r3, 8010980 <__sinit+0x14>
 8010978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801097c:	f7ff bff0 	b.w	8010960 <__sfp_lock_release>
 8010980:	4b04      	ldr	r3, [pc, #16]	@ (8010994 <__sinit+0x28>)
 8010982:	6223      	str	r3, [r4, #32]
 8010984:	4b04      	ldr	r3, [pc, #16]	@ (8010998 <__sinit+0x2c>)
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d1f5      	bne.n	8010978 <__sinit+0xc>
 801098c:	f7ff ffc4 	bl	8010918 <global_stdio_init.part.0>
 8010990:	e7f2      	b.n	8010978 <__sinit+0xc>
 8010992:	bf00      	nop
 8010994:	080108d9 	.word	0x080108d9
 8010998:	20008a80 	.word	0x20008a80

0801099c <fiprintf>:
 801099c:	b40e      	push	{r1, r2, r3}
 801099e:	b503      	push	{r0, r1, lr}
 80109a0:	4601      	mov	r1, r0
 80109a2:	ab03      	add	r3, sp, #12
 80109a4:	4805      	ldr	r0, [pc, #20]	@ (80109bc <fiprintf+0x20>)
 80109a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80109aa:	6800      	ldr	r0, [r0, #0]
 80109ac:	9301      	str	r3, [sp, #4]
 80109ae:	f000 fb39 	bl	8011024 <_vfiprintf_r>
 80109b2:	b002      	add	sp, #8
 80109b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80109b8:	b003      	add	sp, #12
 80109ba:	4770      	bx	lr
 80109bc:	20000038 	.word	0x20000038

080109c0 <_fwalk_sglue>:
 80109c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80109c4:	4607      	mov	r7, r0
 80109c6:	4688      	mov	r8, r1
 80109c8:	4614      	mov	r4, r2
 80109ca:	2600      	movs	r6, #0
 80109cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80109d0:	f1b9 0901 	subs.w	r9, r9, #1
 80109d4:	d505      	bpl.n	80109e2 <_fwalk_sglue+0x22>
 80109d6:	6824      	ldr	r4, [r4, #0]
 80109d8:	2c00      	cmp	r4, #0
 80109da:	d1f7      	bne.n	80109cc <_fwalk_sglue+0xc>
 80109dc:	4630      	mov	r0, r6
 80109de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109e2:	89ab      	ldrh	r3, [r5, #12]
 80109e4:	2b01      	cmp	r3, #1
 80109e6:	d907      	bls.n	80109f8 <_fwalk_sglue+0x38>
 80109e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80109ec:	3301      	adds	r3, #1
 80109ee:	d003      	beq.n	80109f8 <_fwalk_sglue+0x38>
 80109f0:	4629      	mov	r1, r5
 80109f2:	4638      	mov	r0, r7
 80109f4:	47c0      	blx	r8
 80109f6:	4306      	orrs	r6, r0
 80109f8:	3568      	adds	r5, #104	@ 0x68
 80109fa:	e7e9      	b.n	80109d0 <_fwalk_sglue+0x10>

080109fc <iprintf>:
 80109fc:	b40f      	push	{r0, r1, r2, r3}
 80109fe:	b507      	push	{r0, r1, r2, lr}
 8010a00:	4906      	ldr	r1, [pc, #24]	@ (8010a1c <iprintf+0x20>)
 8010a02:	ab04      	add	r3, sp, #16
 8010a04:	6808      	ldr	r0, [r1, #0]
 8010a06:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a0a:	6881      	ldr	r1, [r0, #8]
 8010a0c:	9301      	str	r3, [sp, #4]
 8010a0e:	f000 fb09 	bl	8011024 <_vfiprintf_r>
 8010a12:	b003      	add	sp, #12
 8010a14:	f85d eb04 	ldr.w	lr, [sp], #4
 8010a18:	b004      	add	sp, #16
 8010a1a:	4770      	bx	lr
 8010a1c:	20000038 	.word	0x20000038

08010a20 <putchar>:
 8010a20:	4b02      	ldr	r3, [pc, #8]	@ (8010a2c <putchar+0xc>)
 8010a22:	4601      	mov	r1, r0
 8010a24:	6818      	ldr	r0, [r3, #0]
 8010a26:	6882      	ldr	r2, [r0, #8]
 8010a28:	f000 beb0 	b.w	801178c <_putc_r>
 8010a2c:	20000038 	.word	0x20000038

08010a30 <_puts_r>:
 8010a30:	6a03      	ldr	r3, [r0, #32]
 8010a32:	b570      	push	{r4, r5, r6, lr}
 8010a34:	6884      	ldr	r4, [r0, #8]
 8010a36:	4605      	mov	r5, r0
 8010a38:	460e      	mov	r6, r1
 8010a3a:	b90b      	cbnz	r3, 8010a40 <_puts_r+0x10>
 8010a3c:	f7ff ff96 	bl	801096c <__sinit>
 8010a40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010a42:	07db      	lsls	r3, r3, #31
 8010a44:	d405      	bmi.n	8010a52 <_puts_r+0x22>
 8010a46:	89a3      	ldrh	r3, [r4, #12]
 8010a48:	0598      	lsls	r0, r3, #22
 8010a4a:	d402      	bmi.n	8010a52 <_puts_r+0x22>
 8010a4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010a4e:	f000 f9a8 	bl	8010da2 <__retarget_lock_acquire_recursive>
 8010a52:	89a3      	ldrh	r3, [r4, #12]
 8010a54:	0719      	lsls	r1, r3, #28
 8010a56:	d502      	bpl.n	8010a5e <_puts_r+0x2e>
 8010a58:	6923      	ldr	r3, [r4, #16]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d135      	bne.n	8010aca <_puts_r+0x9a>
 8010a5e:	4621      	mov	r1, r4
 8010a60:	4628      	mov	r0, r5
 8010a62:	f000 f8c5 	bl	8010bf0 <__swsetup_r>
 8010a66:	b380      	cbz	r0, 8010aca <_puts_r+0x9a>
 8010a68:	f04f 35ff 	mov.w	r5, #4294967295
 8010a6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010a6e:	07da      	lsls	r2, r3, #31
 8010a70:	d405      	bmi.n	8010a7e <_puts_r+0x4e>
 8010a72:	89a3      	ldrh	r3, [r4, #12]
 8010a74:	059b      	lsls	r3, r3, #22
 8010a76:	d402      	bmi.n	8010a7e <_puts_r+0x4e>
 8010a78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010a7a:	f000 f993 	bl	8010da4 <__retarget_lock_release_recursive>
 8010a7e:	4628      	mov	r0, r5
 8010a80:	bd70      	pop	{r4, r5, r6, pc}
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	da04      	bge.n	8010a90 <_puts_r+0x60>
 8010a86:	69a2      	ldr	r2, [r4, #24]
 8010a88:	429a      	cmp	r2, r3
 8010a8a:	dc17      	bgt.n	8010abc <_puts_r+0x8c>
 8010a8c:	290a      	cmp	r1, #10
 8010a8e:	d015      	beq.n	8010abc <_puts_r+0x8c>
 8010a90:	6823      	ldr	r3, [r4, #0]
 8010a92:	1c5a      	adds	r2, r3, #1
 8010a94:	6022      	str	r2, [r4, #0]
 8010a96:	7019      	strb	r1, [r3, #0]
 8010a98:	68a3      	ldr	r3, [r4, #8]
 8010a9a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010a9e:	3b01      	subs	r3, #1
 8010aa0:	60a3      	str	r3, [r4, #8]
 8010aa2:	2900      	cmp	r1, #0
 8010aa4:	d1ed      	bne.n	8010a82 <_puts_r+0x52>
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	da11      	bge.n	8010ace <_puts_r+0x9e>
 8010aaa:	4622      	mov	r2, r4
 8010aac:	210a      	movs	r1, #10
 8010aae:	4628      	mov	r0, r5
 8010ab0:	f000 f85f 	bl	8010b72 <__swbuf_r>
 8010ab4:	3001      	adds	r0, #1
 8010ab6:	d0d7      	beq.n	8010a68 <_puts_r+0x38>
 8010ab8:	250a      	movs	r5, #10
 8010aba:	e7d7      	b.n	8010a6c <_puts_r+0x3c>
 8010abc:	4622      	mov	r2, r4
 8010abe:	4628      	mov	r0, r5
 8010ac0:	f000 f857 	bl	8010b72 <__swbuf_r>
 8010ac4:	3001      	adds	r0, #1
 8010ac6:	d1e7      	bne.n	8010a98 <_puts_r+0x68>
 8010ac8:	e7ce      	b.n	8010a68 <_puts_r+0x38>
 8010aca:	3e01      	subs	r6, #1
 8010acc:	e7e4      	b.n	8010a98 <_puts_r+0x68>
 8010ace:	6823      	ldr	r3, [r4, #0]
 8010ad0:	1c5a      	adds	r2, r3, #1
 8010ad2:	6022      	str	r2, [r4, #0]
 8010ad4:	220a      	movs	r2, #10
 8010ad6:	701a      	strb	r2, [r3, #0]
 8010ad8:	e7ee      	b.n	8010ab8 <_puts_r+0x88>
	...

08010adc <puts>:
 8010adc:	4b02      	ldr	r3, [pc, #8]	@ (8010ae8 <puts+0xc>)
 8010ade:	4601      	mov	r1, r0
 8010ae0:	6818      	ldr	r0, [r3, #0]
 8010ae2:	f7ff bfa5 	b.w	8010a30 <_puts_r>
 8010ae6:	bf00      	nop
 8010ae8:	20000038 	.word	0x20000038

08010aec <__sread>:
 8010aec:	b510      	push	{r4, lr}
 8010aee:	460c      	mov	r4, r1
 8010af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010af4:	f000 f90c 	bl	8010d10 <_read_r>
 8010af8:	2800      	cmp	r0, #0
 8010afa:	bfab      	itete	ge
 8010afc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010afe:	89a3      	ldrhlt	r3, [r4, #12]
 8010b00:	181b      	addge	r3, r3, r0
 8010b02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010b06:	bfac      	ite	ge
 8010b08:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010b0a:	81a3      	strhlt	r3, [r4, #12]
 8010b0c:	bd10      	pop	{r4, pc}

08010b0e <__swrite>:
 8010b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b12:	461f      	mov	r7, r3
 8010b14:	898b      	ldrh	r3, [r1, #12]
 8010b16:	05db      	lsls	r3, r3, #23
 8010b18:	4605      	mov	r5, r0
 8010b1a:	460c      	mov	r4, r1
 8010b1c:	4616      	mov	r6, r2
 8010b1e:	d505      	bpl.n	8010b2c <__swrite+0x1e>
 8010b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b24:	2302      	movs	r3, #2
 8010b26:	2200      	movs	r2, #0
 8010b28:	f000 f8e0 	bl	8010cec <_lseek_r>
 8010b2c:	89a3      	ldrh	r3, [r4, #12]
 8010b2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010b32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010b36:	81a3      	strh	r3, [r4, #12]
 8010b38:	4632      	mov	r2, r6
 8010b3a:	463b      	mov	r3, r7
 8010b3c:	4628      	mov	r0, r5
 8010b3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010b42:	f000 b8f7 	b.w	8010d34 <_write_r>

08010b46 <__sseek>:
 8010b46:	b510      	push	{r4, lr}
 8010b48:	460c      	mov	r4, r1
 8010b4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b4e:	f000 f8cd 	bl	8010cec <_lseek_r>
 8010b52:	1c43      	adds	r3, r0, #1
 8010b54:	89a3      	ldrh	r3, [r4, #12]
 8010b56:	bf15      	itete	ne
 8010b58:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010b5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010b5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010b62:	81a3      	strheq	r3, [r4, #12]
 8010b64:	bf18      	it	ne
 8010b66:	81a3      	strhne	r3, [r4, #12]
 8010b68:	bd10      	pop	{r4, pc}

08010b6a <__sclose>:
 8010b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b6e:	f000 b8ad 	b.w	8010ccc <_close_r>

08010b72 <__swbuf_r>:
 8010b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b74:	460e      	mov	r6, r1
 8010b76:	4614      	mov	r4, r2
 8010b78:	4605      	mov	r5, r0
 8010b7a:	b118      	cbz	r0, 8010b84 <__swbuf_r+0x12>
 8010b7c:	6a03      	ldr	r3, [r0, #32]
 8010b7e:	b90b      	cbnz	r3, 8010b84 <__swbuf_r+0x12>
 8010b80:	f7ff fef4 	bl	801096c <__sinit>
 8010b84:	69a3      	ldr	r3, [r4, #24]
 8010b86:	60a3      	str	r3, [r4, #8]
 8010b88:	89a3      	ldrh	r3, [r4, #12]
 8010b8a:	071a      	lsls	r2, r3, #28
 8010b8c:	d501      	bpl.n	8010b92 <__swbuf_r+0x20>
 8010b8e:	6923      	ldr	r3, [r4, #16]
 8010b90:	b943      	cbnz	r3, 8010ba4 <__swbuf_r+0x32>
 8010b92:	4621      	mov	r1, r4
 8010b94:	4628      	mov	r0, r5
 8010b96:	f000 f82b 	bl	8010bf0 <__swsetup_r>
 8010b9a:	b118      	cbz	r0, 8010ba4 <__swbuf_r+0x32>
 8010b9c:	f04f 37ff 	mov.w	r7, #4294967295
 8010ba0:	4638      	mov	r0, r7
 8010ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ba4:	6823      	ldr	r3, [r4, #0]
 8010ba6:	6922      	ldr	r2, [r4, #16]
 8010ba8:	1a98      	subs	r0, r3, r2
 8010baa:	6963      	ldr	r3, [r4, #20]
 8010bac:	b2f6      	uxtb	r6, r6
 8010bae:	4283      	cmp	r3, r0
 8010bb0:	4637      	mov	r7, r6
 8010bb2:	dc05      	bgt.n	8010bc0 <__swbuf_r+0x4e>
 8010bb4:	4621      	mov	r1, r4
 8010bb6:	4628      	mov	r0, r5
 8010bb8:	f000 fd5e 	bl	8011678 <_fflush_r>
 8010bbc:	2800      	cmp	r0, #0
 8010bbe:	d1ed      	bne.n	8010b9c <__swbuf_r+0x2a>
 8010bc0:	68a3      	ldr	r3, [r4, #8]
 8010bc2:	3b01      	subs	r3, #1
 8010bc4:	60a3      	str	r3, [r4, #8]
 8010bc6:	6823      	ldr	r3, [r4, #0]
 8010bc8:	1c5a      	adds	r2, r3, #1
 8010bca:	6022      	str	r2, [r4, #0]
 8010bcc:	701e      	strb	r6, [r3, #0]
 8010bce:	6962      	ldr	r2, [r4, #20]
 8010bd0:	1c43      	adds	r3, r0, #1
 8010bd2:	429a      	cmp	r2, r3
 8010bd4:	d004      	beq.n	8010be0 <__swbuf_r+0x6e>
 8010bd6:	89a3      	ldrh	r3, [r4, #12]
 8010bd8:	07db      	lsls	r3, r3, #31
 8010bda:	d5e1      	bpl.n	8010ba0 <__swbuf_r+0x2e>
 8010bdc:	2e0a      	cmp	r6, #10
 8010bde:	d1df      	bne.n	8010ba0 <__swbuf_r+0x2e>
 8010be0:	4621      	mov	r1, r4
 8010be2:	4628      	mov	r0, r5
 8010be4:	f000 fd48 	bl	8011678 <_fflush_r>
 8010be8:	2800      	cmp	r0, #0
 8010bea:	d0d9      	beq.n	8010ba0 <__swbuf_r+0x2e>
 8010bec:	e7d6      	b.n	8010b9c <__swbuf_r+0x2a>
	...

08010bf0 <__swsetup_r>:
 8010bf0:	b538      	push	{r3, r4, r5, lr}
 8010bf2:	4b29      	ldr	r3, [pc, #164]	@ (8010c98 <__swsetup_r+0xa8>)
 8010bf4:	4605      	mov	r5, r0
 8010bf6:	6818      	ldr	r0, [r3, #0]
 8010bf8:	460c      	mov	r4, r1
 8010bfa:	b118      	cbz	r0, 8010c04 <__swsetup_r+0x14>
 8010bfc:	6a03      	ldr	r3, [r0, #32]
 8010bfe:	b90b      	cbnz	r3, 8010c04 <__swsetup_r+0x14>
 8010c00:	f7ff feb4 	bl	801096c <__sinit>
 8010c04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c08:	0719      	lsls	r1, r3, #28
 8010c0a:	d422      	bmi.n	8010c52 <__swsetup_r+0x62>
 8010c0c:	06da      	lsls	r2, r3, #27
 8010c0e:	d407      	bmi.n	8010c20 <__swsetup_r+0x30>
 8010c10:	2209      	movs	r2, #9
 8010c12:	602a      	str	r2, [r5, #0]
 8010c14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c18:	81a3      	strh	r3, [r4, #12]
 8010c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8010c1e:	e033      	b.n	8010c88 <__swsetup_r+0x98>
 8010c20:	0758      	lsls	r0, r3, #29
 8010c22:	d512      	bpl.n	8010c4a <__swsetup_r+0x5a>
 8010c24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010c26:	b141      	cbz	r1, 8010c3a <__swsetup_r+0x4a>
 8010c28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010c2c:	4299      	cmp	r1, r3
 8010c2e:	d002      	beq.n	8010c36 <__swsetup_r+0x46>
 8010c30:	4628      	mov	r0, r5
 8010c32:	f000 f8cd 	bl	8010dd0 <_free_r>
 8010c36:	2300      	movs	r3, #0
 8010c38:	6363      	str	r3, [r4, #52]	@ 0x34
 8010c3a:	89a3      	ldrh	r3, [r4, #12]
 8010c3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010c40:	81a3      	strh	r3, [r4, #12]
 8010c42:	2300      	movs	r3, #0
 8010c44:	6063      	str	r3, [r4, #4]
 8010c46:	6923      	ldr	r3, [r4, #16]
 8010c48:	6023      	str	r3, [r4, #0]
 8010c4a:	89a3      	ldrh	r3, [r4, #12]
 8010c4c:	f043 0308 	orr.w	r3, r3, #8
 8010c50:	81a3      	strh	r3, [r4, #12]
 8010c52:	6923      	ldr	r3, [r4, #16]
 8010c54:	b94b      	cbnz	r3, 8010c6a <__swsetup_r+0x7a>
 8010c56:	89a3      	ldrh	r3, [r4, #12]
 8010c58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010c5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010c60:	d003      	beq.n	8010c6a <__swsetup_r+0x7a>
 8010c62:	4621      	mov	r1, r4
 8010c64:	4628      	mov	r0, r5
 8010c66:	f000 fd55 	bl	8011714 <__smakebuf_r>
 8010c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c6e:	f013 0201 	ands.w	r2, r3, #1
 8010c72:	d00a      	beq.n	8010c8a <__swsetup_r+0x9a>
 8010c74:	2200      	movs	r2, #0
 8010c76:	60a2      	str	r2, [r4, #8]
 8010c78:	6962      	ldr	r2, [r4, #20]
 8010c7a:	4252      	negs	r2, r2
 8010c7c:	61a2      	str	r2, [r4, #24]
 8010c7e:	6922      	ldr	r2, [r4, #16]
 8010c80:	b942      	cbnz	r2, 8010c94 <__swsetup_r+0xa4>
 8010c82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010c86:	d1c5      	bne.n	8010c14 <__swsetup_r+0x24>
 8010c88:	bd38      	pop	{r3, r4, r5, pc}
 8010c8a:	0799      	lsls	r1, r3, #30
 8010c8c:	bf58      	it	pl
 8010c8e:	6962      	ldrpl	r2, [r4, #20]
 8010c90:	60a2      	str	r2, [r4, #8]
 8010c92:	e7f4      	b.n	8010c7e <__swsetup_r+0x8e>
 8010c94:	2000      	movs	r0, #0
 8010c96:	e7f7      	b.n	8010c88 <__swsetup_r+0x98>
 8010c98:	20000038 	.word	0x20000038

08010c9c <memcmp>:
 8010c9c:	b510      	push	{r4, lr}
 8010c9e:	3901      	subs	r1, #1
 8010ca0:	4402      	add	r2, r0
 8010ca2:	4290      	cmp	r0, r2
 8010ca4:	d101      	bne.n	8010caa <memcmp+0xe>
 8010ca6:	2000      	movs	r0, #0
 8010ca8:	e005      	b.n	8010cb6 <memcmp+0x1a>
 8010caa:	7803      	ldrb	r3, [r0, #0]
 8010cac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010cb0:	42a3      	cmp	r3, r4
 8010cb2:	d001      	beq.n	8010cb8 <memcmp+0x1c>
 8010cb4:	1b18      	subs	r0, r3, r4
 8010cb6:	bd10      	pop	{r4, pc}
 8010cb8:	3001      	adds	r0, #1
 8010cba:	e7f2      	b.n	8010ca2 <memcmp+0x6>

08010cbc <memset>:
 8010cbc:	4402      	add	r2, r0
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	4293      	cmp	r3, r2
 8010cc2:	d100      	bne.n	8010cc6 <memset+0xa>
 8010cc4:	4770      	bx	lr
 8010cc6:	f803 1b01 	strb.w	r1, [r3], #1
 8010cca:	e7f9      	b.n	8010cc0 <memset+0x4>

08010ccc <_close_r>:
 8010ccc:	b538      	push	{r3, r4, r5, lr}
 8010cce:	4d06      	ldr	r5, [pc, #24]	@ (8010ce8 <_close_r+0x1c>)
 8010cd0:	2300      	movs	r3, #0
 8010cd2:	4604      	mov	r4, r0
 8010cd4:	4608      	mov	r0, r1
 8010cd6:	602b      	str	r3, [r5, #0]
 8010cd8:	f7f0 f890 	bl	8000dfc <_close>
 8010cdc:	1c43      	adds	r3, r0, #1
 8010cde:	d102      	bne.n	8010ce6 <_close_r+0x1a>
 8010ce0:	682b      	ldr	r3, [r5, #0]
 8010ce2:	b103      	cbz	r3, 8010ce6 <_close_r+0x1a>
 8010ce4:	6023      	str	r3, [r4, #0]
 8010ce6:	bd38      	pop	{r3, r4, r5, pc}
 8010ce8:	20008a84 	.word	0x20008a84

08010cec <_lseek_r>:
 8010cec:	b538      	push	{r3, r4, r5, lr}
 8010cee:	4d07      	ldr	r5, [pc, #28]	@ (8010d0c <_lseek_r+0x20>)
 8010cf0:	4604      	mov	r4, r0
 8010cf2:	4608      	mov	r0, r1
 8010cf4:	4611      	mov	r1, r2
 8010cf6:	2200      	movs	r2, #0
 8010cf8:	602a      	str	r2, [r5, #0]
 8010cfa:	461a      	mov	r2, r3
 8010cfc:	f7f0 f8a5 	bl	8000e4a <_lseek>
 8010d00:	1c43      	adds	r3, r0, #1
 8010d02:	d102      	bne.n	8010d0a <_lseek_r+0x1e>
 8010d04:	682b      	ldr	r3, [r5, #0]
 8010d06:	b103      	cbz	r3, 8010d0a <_lseek_r+0x1e>
 8010d08:	6023      	str	r3, [r4, #0]
 8010d0a:	bd38      	pop	{r3, r4, r5, pc}
 8010d0c:	20008a84 	.word	0x20008a84

08010d10 <_read_r>:
 8010d10:	b538      	push	{r3, r4, r5, lr}
 8010d12:	4d07      	ldr	r5, [pc, #28]	@ (8010d30 <_read_r+0x20>)
 8010d14:	4604      	mov	r4, r0
 8010d16:	4608      	mov	r0, r1
 8010d18:	4611      	mov	r1, r2
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	602a      	str	r2, [r5, #0]
 8010d1e:	461a      	mov	r2, r3
 8010d20:	f7f0 f833 	bl	8000d8a <_read>
 8010d24:	1c43      	adds	r3, r0, #1
 8010d26:	d102      	bne.n	8010d2e <_read_r+0x1e>
 8010d28:	682b      	ldr	r3, [r5, #0]
 8010d2a:	b103      	cbz	r3, 8010d2e <_read_r+0x1e>
 8010d2c:	6023      	str	r3, [r4, #0]
 8010d2e:	bd38      	pop	{r3, r4, r5, pc}
 8010d30:	20008a84 	.word	0x20008a84

08010d34 <_write_r>:
 8010d34:	b538      	push	{r3, r4, r5, lr}
 8010d36:	4d07      	ldr	r5, [pc, #28]	@ (8010d54 <_write_r+0x20>)
 8010d38:	4604      	mov	r4, r0
 8010d3a:	4608      	mov	r0, r1
 8010d3c:	4611      	mov	r1, r2
 8010d3e:	2200      	movs	r2, #0
 8010d40:	602a      	str	r2, [r5, #0]
 8010d42:	461a      	mov	r2, r3
 8010d44:	f7f0 f83e 	bl	8000dc4 <_write>
 8010d48:	1c43      	adds	r3, r0, #1
 8010d4a:	d102      	bne.n	8010d52 <_write_r+0x1e>
 8010d4c:	682b      	ldr	r3, [r5, #0]
 8010d4e:	b103      	cbz	r3, 8010d52 <_write_r+0x1e>
 8010d50:	6023      	str	r3, [r4, #0]
 8010d52:	bd38      	pop	{r3, r4, r5, pc}
 8010d54:	20008a84 	.word	0x20008a84

08010d58 <__libc_init_array>:
 8010d58:	b570      	push	{r4, r5, r6, lr}
 8010d5a:	4d0d      	ldr	r5, [pc, #52]	@ (8010d90 <__libc_init_array+0x38>)
 8010d5c:	4c0d      	ldr	r4, [pc, #52]	@ (8010d94 <__libc_init_array+0x3c>)
 8010d5e:	1b64      	subs	r4, r4, r5
 8010d60:	10a4      	asrs	r4, r4, #2
 8010d62:	2600      	movs	r6, #0
 8010d64:	42a6      	cmp	r6, r4
 8010d66:	d109      	bne.n	8010d7c <__libc_init_array+0x24>
 8010d68:	4d0b      	ldr	r5, [pc, #44]	@ (8010d98 <__libc_init_array+0x40>)
 8010d6a:	4c0c      	ldr	r4, [pc, #48]	@ (8010d9c <__libc_init_array+0x44>)
 8010d6c:	f000 fdb8 	bl	80118e0 <_init>
 8010d70:	1b64      	subs	r4, r4, r5
 8010d72:	10a4      	asrs	r4, r4, #2
 8010d74:	2600      	movs	r6, #0
 8010d76:	42a6      	cmp	r6, r4
 8010d78:	d105      	bne.n	8010d86 <__libc_init_array+0x2e>
 8010d7a:	bd70      	pop	{r4, r5, r6, pc}
 8010d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010d80:	4798      	blx	r3
 8010d82:	3601      	adds	r6, #1
 8010d84:	e7ee      	b.n	8010d64 <__libc_init_array+0xc>
 8010d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8010d8a:	4798      	blx	r3
 8010d8c:	3601      	adds	r6, #1
 8010d8e:	e7f2      	b.n	8010d76 <__libc_init_array+0x1e>
 8010d90:	08015148 	.word	0x08015148
 8010d94:	08015148 	.word	0x08015148
 8010d98:	08015148 	.word	0x08015148
 8010d9c:	0801514c 	.word	0x0801514c

08010da0 <__retarget_lock_init_recursive>:
 8010da0:	4770      	bx	lr

08010da2 <__retarget_lock_acquire_recursive>:
 8010da2:	4770      	bx	lr

08010da4 <__retarget_lock_release_recursive>:
 8010da4:	4770      	bx	lr

08010da6 <memcpy>:
 8010da6:	440a      	add	r2, r1
 8010da8:	4291      	cmp	r1, r2
 8010daa:	f100 33ff 	add.w	r3, r0, #4294967295
 8010dae:	d100      	bne.n	8010db2 <memcpy+0xc>
 8010db0:	4770      	bx	lr
 8010db2:	b510      	push	{r4, lr}
 8010db4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010db8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010dbc:	4291      	cmp	r1, r2
 8010dbe:	d1f9      	bne.n	8010db4 <memcpy+0xe>
 8010dc0:	bd10      	pop	{r4, pc}

08010dc2 <abort>:
 8010dc2:	b508      	push	{r3, lr}
 8010dc4:	2006      	movs	r0, #6
 8010dc6:	f000 fd3d 	bl	8011844 <raise>
 8010dca:	2001      	movs	r0, #1
 8010dcc:	f7ef ffd2 	bl	8000d74 <_exit>

08010dd0 <_free_r>:
 8010dd0:	b538      	push	{r3, r4, r5, lr}
 8010dd2:	4605      	mov	r5, r0
 8010dd4:	2900      	cmp	r1, #0
 8010dd6:	d041      	beq.n	8010e5c <_free_r+0x8c>
 8010dd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ddc:	1f0c      	subs	r4, r1, #4
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	bfb8      	it	lt
 8010de2:	18e4      	addlt	r4, r4, r3
 8010de4:	f000 f8e8 	bl	8010fb8 <__malloc_lock>
 8010de8:	4a1d      	ldr	r2, [pc, #116]	@ (8010e60 <_free_r+0x90>)
 8010dea:	6813      	ldr	r3, [r2, #0]
 8010dec:	b933      	cbnz	r3, 8010dfc <_free_r+0x2c>
 8010dee:	6063      	str	r3, [r4, #4]
 8010df0:	6014      	str	r4, [r2, #0]
 8010df2:	4628      	mov	r0, r5
 8010df4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010df8:	f000 b8e4 	b.w	8010fc4 <__malloc_unlock>
 8010dfc:	42a3      	cmp	r3, r4
 8010dfe:	d908      	bls.n	8010e12 <_free_r+0x42>
 8010e00:	6820      	ldr	r0, [r4, #0]
 8010e02:	1821      	adds	r1, r4, r0
 8010e04:	428b      	cmp	r3, r1
 8010e06:	bf01      	itttt	eq
 8010e08:	6819      	ldreq	r1, [r3, #0]
 8010e0a:	685b      	ldreq	r3, [r3, #4]
 8010e0c:	1809      	addeq	r1, r1, r0
 8010e0e:	6021      	streq	r1, [r4, #0]
 8010e10:	e7ed      	b.n	8010dee <_free_r+0x1e>
 8010e12:	461a      	mov	r2, r3
 8010e14:	685b      	ldr	r3, [r3, #4]
 8010e16:	b10b      	cbz	r3, 8010e1c <_free_r+0x4c>
 8010e18:	42a3      	cmp	r3, r4
 8010e1a:	d9fa      	bls.n	8010e12 <_free_r+0x42>
 8010e1c:	6811      	ldr	r1, [r2, #0]
 8010e1e:	1850      	adds	r0, r2, r1
 8010e20:	42a0      	cmp	r0, r4
 8010e22:	d10b      	bne.n	8010e3c <_free_r+0x6c>
 8010e24:	6820      	ldr	r0, [r4, #0]
 8010e26:	4401      	add	r1, r0
 8010e28:	1850      	adds	r0, r2, r1
 8010e2a:	4283      	cmp	r3, r0
 8010e2c:	6011      	str	r1, [r2, #0]
 8010e2e:	d1e0      	bne.n	8010df2 <_free_r+0x22>
 8010e30:	6818      	ldr	r0, [r3, #0]
 8010e32:	685b      	ldr	r3, [r3, #4]
 8010e34:	6053      	str	r3, [r2, #4]
 8010e36:	4408      	add	r0, r1
 8010e38:	6010      	str	r0, [r2, #0]
 8010e3a:	e7da      	b.n	8010df2 <_free_r+0x22>
 8010e3c:	d902      	bls.n	8010e44 <_free_r+0x74>
 8010e3e:	230c      	movs	r3, #12
 8010e40:	602b      	str	r3, [r5, #0]
 8010e42:	e7d6      	b.n	8010df2 <_free_r+0x22>
 8010e44:	6820      	ldr	r0, [r4, #0]
 8010e46:	1821      	adds	r1, r4, r0
 8010e48:	428b      	cmp	r3, r1
 8010e4a:	bf04      	itt	eq
 8010e4c:	6819      	ldreq	r1, [r3, #0]
 8010e4e:	685b      	ldreq	r3, [r3, #4]
 8010e50:	6063      	str	r3, [r4, #4]
 8010e52:	bf04      	itt	eq
 8010e54:	1809      	addeq	r1, r1, r0
 8010e56:	6021      	streq	r1, [r4, #0]
 8010e58:	6054      	str	r4, [r2, #4]
 8010e5a:	e7ca      	b.n	8010df2 <_free_r+0x22>
 8010e5c:	bd38      	pop	{r3, r4, r5, pc}
 8010e5e:	bf00      	nop
 8010e60:	20008a90 	.word	0x20008a90

08010e64 <malloc>:
 8010e64:	4b02      	ldr	r3, [pc, #8]	@ (8010e70 <malloc+0xc>)
 8010e66:	4601      	mov	r1, r0
 8010e68:	6818      	ldr	r0, [r3, #0]
 8010e6a:	f000 b825 	b.w	8010eb8 <_malloc_r>
 8010e6e:	bf00      	nop
 8010e70:	20000038 	.word	0x20000038

08010e74 <sbrk_aligned>:
 8010e74:	b570      	push	{r4, r5, r6, lr}
 8010e76:	4e0f      	ldr	r6, [pc, #60]	@ (8010eb4 <sbrk_aligned+0x40>)
 8010e78:	460c      	mov	r4, r1
 8010e7a:	6831      	ldr	r1, [r6, #0]
 8010e7c:	4605      	mov	r5, r0
 8010e7e:	b911      	cbnz	r1, 8010e86 <sbrk_aligned+0x12>
 8010e80:	f000 fd1e 	bl	80118c0 <_sbrk_r>
 8010e84:	6030      	str	r0, [r6, #0]
 8010e86:	4621      	mov	r1, r4
 8010e88:	4628      	mov	r0, r5
 8010e8a:	f000 fd19 	bl	80118c0 <_sbrk_r>
 8010e8e:	1c43      	adds	r3, r0, #1
 8010e90:	d103      	bne.n	8010e9a <sbrk_aligned+0x26>
 8010e92:	f04f 34ff 	mov.w	r4, #4294967295
 8010e96:	4620      	mov	r0, r4
 8010e98:	bd70      	pop	{r4, r5, r6, pc}
 8010e9a:	1cc4      	adds	r4, r0, #3
 8010e9c:	f024 0403 	bic.w	r4, r4, #3
 8010ea0:	42a0      	cmp	r0, r4
 8010ea2:	d0f8      	beq.n	8010e96 <sbrk_aligned+0x22>
 8010ea4:	1a21      	subs	r1, r4, r0
 8010ea6:	4628      	mov	r0, r5
 8010ea8:	f000 fd0a 	bl	80118c0 <_sbrk_r>
 8010eac:	3001      	adds	r0, #1
 8010eae:	d1f2      	bne.n	8010e96 <sbrk_aligned+0x22>
 8010eb0:	e7ef      	b.n	8010e92 <sbrk_aligned+0x1e>
 8010eb2:	bf00      	nop
 8010eb4:	20008a8c 	.word	0x20008a8c

08010eb8 <_malloc_r>:
 8010eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ebc:	1ccd      	adds	r5, r1, #3
 8010ebe:	f025 0503 	bic.w	r5, r5, #3
 8010ec2:	3508      	adds	r5, #8
 8010ec4:	2d0c      	cmp	r5, #12
 8010ec6:	bf38      	it	cc
 8010ec8:	250c      	movcc	r5, #12
 8010eca:	2d00      	cmp	r5, #0
 8010ecc:	4606      	mov	r6, r0
 8010ece:	db01      	blt.n	8010ed4 <_malloc_r+0x1c>
 8010ed0:	42a9      	cmp	r1, r5
 8010ed2:	d904      	bls.n	8010ede <_malloc_r+0x26>
 8010ed4:	230c      	movs	r3, #12
 8010ed6:	6033      	str	r3, [r6, #0]
 8010ed8:	2000      	movs	r0, #0
 8010eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ede:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010fb4 <_malloc_r+0xfc>
 8010ee2:	f000 f869 	bl	8010fb8 <__malloc_lock>
 8010ee6:	f8d8 3000 	ldr.w	r3, [r8]
 8010eea:	461c      	mov	r4, r3
 8010eec:	bb44      	cbnz	r4, 8010f40 <_malloc_r+0x88>
 8010eee:	4629      	mov	r1, r5
 8010ef0:	4630      	mov	r0, r6
 8010ef2:	f7ff ffbf 	bl	8010e74 <sbrk_aligned>
 8010ef6:	1c43      	adds	r3, r0, #1
 8010ef8:	4604      	mov	r4, r0
 8010efa:	d158      	bne.n	8010fae <_malloc_r+0xf6>
 8010efc:	f8d8 4000 	ldr.w	r4, [r8]
 8010f00:	4627      	mov	r7, r4
 8010f02:	2f00      	cmp	r7, #0
 8010f04:	d143      	bne.n	8010f8e <_malloc_r+0xd6>
 8010f06:	2c00      	cmp	r4, #0
 8010f08:	d04b      	beq.n	8010fa2 <_malloc_r+0xea>
 8010f0a:	6823      	ldr	r3, [r4, #0]
 8010f0c:	4639      	mov	r1, r7
 8010f0e:	4630      	mov	r0, r6
 8010f10:	eb04 0903 	add.w	r9, r4, r3
 8010f14:	f000 fcd4 	bl	80118c0 <_sbrk_r>
 8010f18:	4581      	cmp	r9, r0
 8010f1a:	d142      	bne.n	8010fa2 <_malloc_r+0xea>
 8010f1c:	6821      	ldr	r1, [r4, #0]
 8010f1e:	1a6d      	subs	r5, r5, r1
 8010f20:	4629      	mov	r1, r5
 8010f22:	4630      	mov	r0, r6
 8010f24:	f7ff ffa6 	bl	8010e74 <sbrk_aligned>
 8010f28:	3001      	adds	r0, #1
 8010f2a:	d03a      	beq.n	8010fa2 <_malloc_r+0xea>
 8010f2c:	6823      	ldr	r3, [r4, #0]
 8010f2e:	442b      	add	r3, r5
 8010f30:	6023      	str	r3, [r4, #0]
 8010f32:	f8d8 3000 	ldr.w	r3, [r8]
 8010f36:	685a      	ldr	r2, [r3, #4]
 8010f38:	bb62      	cbnz	r2, 8010f94 <_malloc_r+0xdc>
 8010f3a:	f8c8 7000 	str.w	r7, [r8]
 8010f3e:	e00f      	b.n	8010f60 <_malloc_r+0xa8>
 8010f40:	6822      	ldr	r2, [r4, #0]
 8010f42:	1b52      	subs	r2, r2, r5
 8010f44:	d420      	bmi.n	8010f88 <_malloc_r+0xd0>
 8010f46:	2a0b      	cmp	r2, #11
 8010f48:	d917      	bls.n	8010f7a <_malloc_r+0xc2>
 8010f4a:	1961      	adds	r1, r4, r5
 8010f4c:	42a3      	cmp	r3, r4
 8010f4e:	6025      	str	r5, [r4, #0]
 8010f50:	bf18      	it	ne
 8010f52:	6059      	strne	r1, [r3, #4]
 8010f54:	6863      	ldr	r3, [r4, #4]
 8010f56:	bf08      	it	eq
 8010f58:	f8c8 1000 	streq.w	r1, [r8]
 8010f5c:	5162      	str	r2, [r4, r5]
 8010f5e:	604b      	str	r3, [r1, #4]
 8010f60:	4630      	mov	r0, r6
 8010f62:	f000 f82f 	bl	8010fc4 <__malloc_unlock>
 8010f66:	f104 000b 	add.w	r0, r4, #11
 8010f6a:	1d23      	adds	r3, r4, #4
 8010f6c:	f020 0007 	bic.w	r0, r0, #7
 8010f70:	1ac2      	subs	r2, r0, r3
 8010f72:	bf1c      	itt	ne
 8010f74:	1a1b      	subne	r3, r3, r0
 8010f76:	50a3      	strne	r3, [r4, r2]
 8010f78:	e7af      	b.n	8010eda <_malloc_r+0x22>
 8010f7a:	6862      	ldr	r2, [r4, #4]
 8010f7c:	42a3      	cmp	r3, r4
 8010f7e:	bf0c      	ite	eq
 8010f80:	f8c8 2000 	streq.w	r2, [r8]
 8010f84:	605a      	strne	r2, [r3, #4]
 8010f86:	e7eb      	b.n	8010f60 <_malloc_r+0xa8>
 8010f88:	4623      	mov	r3, r4
 8010f8a:	6864      	ldr	r4, [r4, #4]
 8010f8c:	e7ae      	b.n	8010eec <_malloc_r+0x34>
 8010f8e:	463c      	mov	r4, r7
 8010f90:	687f      	ldr	r7, [r7, #4]
 8010f92:	e7b6      	b.n	8010f02 <_malloc_r+0x4a>
 8010f94:	461a      	mov	r2, r3
 8010f96:	685b      	ldr	r3, [r3, #4]
 8010f98:	42a3      	cmp	r3, r4
 8010f9a:	d1fb      	bne.n	8010f94 <_malloc_r+0xdc>
 8010f9c:	2300      	movs	r3, #0
 8010f9e:	6053      	str	r3, [r2, #4]
 8010fa0:	e7de      	b.n	8010f60 <_malloc_r+0xa8>
 8010fa2:	230c      	movs	r3, #12
 8010fa4:	6033      	str	r3, [r6, #0]
 8010fa6:	4630      	mov	r0, r6
 8010fa8:	f000 f80c 	bl	8010fc4 <__malloc_unlock>
 8010fac:	e794      	b.n	8010ed8 <_malloc_r+0x20>
 8010fae:	6005      	str	r5, [r0, #0]
 8010fb0:	e7d6      	b.n	8010f60 <_malloc_r+0xa8>
 8010fb2:	bf00      	nop
 8010fb4:	20008a90 	.word	0x20008a90

08010fb8 <__malloc_lock>:
 8010fb8:	4801      	ldr	r0, [pc, #4]	@ (8010fc0 <__malloc_lock+0x8>)
 8010fba:	f7ff bef2 	b.w	8010da2 <__retarget_lock_acquire_recursive>
 8010fbe:	bf00      	nop
 8010fc0:	20008a88 	.word	0x20008a88

08010fc4 <__malloc_unlock>:
 8010fc4:	4801      	ldr	r0, [pc, #4]	@ (8010fcc <__malloc_unlock+0x8>)
 8010fc6:	f7ff beed 	b.w	8010da4 <__retarget_lock_release_recursive>
 8010fca:	bf00      	nop
 8010fcc:	20008a88 	.word	0x20008a88

08010fd0 <__sfputc_r>:
 8010fd0:	6893      	ldr	r3, [r2, #8]
 8010fd2:	3b01      	subs	r3, #1
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	b410      	push	{r4}
 8010fd8:	6093      	str	r3, [r2, #8]
 8010fda:	da08      	bge.n	8010fee <__sfputc_r+0x1e>
 8010fdc:	6994      	ldr	r4, [r2, #24]
 8010fde:	42a3      	cmp	r3, r4
 8010fe0:	db01      	blt.n	8010fe6 <__sfputc_r+0x16>
 8010fe2:	290a      	cmp	r1, #10
 8010fe4:	d103      	bne.n	8010fee <__sfputc_r+0x1e>
 8010fe6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010fea:	f7ff bdc2 	b.w	8010b72 <__swbuf_r>
 8010fee:	6813      	ldr	r3, [r2, #0]
 8010ff0:	1c58      	adds	r0, r3, #1
 8010ff2:	6010      	str	r0, [r2, #0]
 8010ff4:	7019      	strb	r1, [r3, #0]
 8010ff6:	4608      	mov	r0, r1
 8010ff8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010ffc:	4770      	bx	lr

08010ffe <__sfputs_r>:
 8010ffe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011000:	4606      	mov	r6, r0
 8011002:	460f      	mov	r7, r1
 8011004:	4614      	mov	r4, r2
 8011006:	18d5      	adds	r5, r2, r3
 8011008:	42ac      	cmp	r4, r5
 801100a:	d101      	bne.n	8011010 <__sfputs_r+0x12>
 801100c:	2000      	movs	r0, #0
 801100e:	e007      	b.n	8011020 <__sfputs_r+0x22>
 8011010:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011014:	463a      	mov	r2, r7
 8011016:	4630      	mov	r0, r6
 8011018:	f7ff ffda 	bl	8010fd0 <__sfputc_r>
 801101c:	1c43      	adds	r3, r0, #1
 801101e:	d1f3      	bne.n	8011008 <__sfputs_r+0xa>
 8011020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011024 <_vfiprintf_r>:
 8011024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011028:	460d      	mov	r5, r1
 801102a:	b09d      	sub	sp, #116	@ 0x74
 801102c:	4614      	mov	r4, r2
 801102e:	4698      	mov	r8, r3
 8011030:	4606      	mov	r6, r0
 8011032:	b118      	cbz	r0, 801103c <_vfiprintf_r+0x18>
 8011034:	6a03      	ldr	r3, [r0, #32]
 8011036:	b90b      	cbnz	r3, 801103c <_vfiprintf_r+0x18>
 8011038:	f7ff fc98 	bl	801096c <__sinit>
 801103c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801103e:	07d9      	lsls	r1, r3, #31
 8011040:	d405      	bmi.n	801104e <_vfiprintf_r+0x2a>
 8011042:	89ab      	ldrh	r3, [r5, #12]
 8011044:	059a      	lsls	r2, r3, #22
 8011046:	d402      	bmi.n	801104e <_vfiprintf_r+0x2a>
 8011048:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801104a:	f7ff feaa 	bl	8010da2 <__retarget_lock_acquire_recursive>
 801104e:	89ab      	ldrh	r3, [r5, #12]
 8011050:	071b      	lsls	r3, r3, #28
 8011052:	d501      	bpl.n	8011058 <_vfiprintf_r+0x34>
 8011054:	692b      	ldr	r3, [r5, #16]
 8011056:	b99b      	cbnz	r3, 8011080 <_vfiprintf_r+0x5c>
 8011058:	4629      	mov	r1, r5
 801105a:	4630      	mov	r0, r6
 801105c:	f7ff fdc8 	bl	8010bf0 <__swsetup_r>
 8011060:	b170      	cbz	r0, 8011080 <_vfiprintf_r+0x5c>
 8011062:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011064:	07dc      	lsls	r4, r3, #31
 8011066:	d504      	bpl.n	8011072 <_vfiprintf_r+0x4e>
 8011068:	f04f 30ff 	mov.w	r0, #4294967295
 801106c:	b01d      	add	sp, #116	@ 0x74
 801106e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011072:	89ab      	ldrh	r3, [r5, #12]
 8011074:	0598      	lsls	r0, r3, #22
 8011076:	d4f7      	bmi.n	8011068 <_vfiprintf_r+0x44>
 8011078:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801107a:	f7ff fe93 	bl	8010da4 <__retarget_lock_release_recursive>
 801107e:	e7f3      	b.n	8011068 <_vfiprintf_r+0x44>
 8011080:	2300      	movs	r3, #0
 8011082:	9309      	str	r3, [sp, #36]	@ 0x24
 8011084:	2320      	movs	r3, #32
 8011086:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801108a:	f8cd 800c 	str.w	r8, [sp, #12]
 801108e:	2330      	movs	r3, #48	@ 0x30
 8011090:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011240 <_vfiprintf_r+0x21c>
 8011094:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011098:	f04f 0901 	mov.w	r9, #1
 801109c:	4623      	mov	r3, r4
 801109e:	469a      	mov	sl, r3
 80110a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80110a4:	b10a      	cbz	r2, 80110aa <_vfiprintf_r+0x86>
 80110a6:	2a25      	cmp	r2, #37	@ 0x25
 80110a8:	d1f9      	bne.n	801109e <_vfiprintf_r+0x7a>
 80110aa:	ebba 0b04 	subs.w	fp, sl, r4
 80110ae:	d00b      	beq.n	80110c8 <_vfiprintf_r+0xa4>
 80110b0:	465b      	mov	r3, fp
 80110b2:	4622      	mov	r2, r4
 80110b4:	4629      	mov	r1, r5
 80110b6:	4630      	mov	r0, r6
 80110b8:	f7ff ffa1 	bl	8010ffe <__sfputs_r>
 80110bc:	3001      	adds	r0, #1
 80110be:	f000 80a7 	beq.w	8011210 <_vfiprintf_r+0x1ec>
 80110c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80110c4:	445a      	add	r2, fp
 80110c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80110c8:	f89a 3000 	ldrb.w	r3, [sl]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	f000 809f 	beq.w	8011210 <_vfiprintf_r+0x1ec>
 80110d2:	2300      	movs	r3, #0
 80110d4:	f04f 32ff 	mov.w	r2, #4294967295
 80110d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80110dc:	f10a 0a01 	add.w	sl, sl, #1
 80110e0:	9304      	str	r3, [sp, #16]
 80110e2:	9307      	str	r3, [sp, #28]
 80110e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80110e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80110ea:	4654      	mov	r4, sl
 80110ec:	2205      	movs	r2, #5
 80110ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110f2:	4853      	ldr	r0, [pc, #332]	@ (8011240 <_vfiprintf_r+0x21c>)
 80110f4:	f7ef f8a4 	bl	8000240 <memchr>
 80110f8:	9a04      	ldr	r2, [sp, #16]
 80110fa:	b9d8      	cbnz	r0, 8011134 <_vfiprintf_r+0x110>
 80110fc:	06d1      	lsls	r1, r2, #27
 80110fe:	bf44      	itt	mi
 8011100:	2320      	movmi	r3, #32
 8011102:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011106:	0713      	lsls	r3, r2, #28
 8011108:	bf44      	itt	mi
 801110a:	232b      	movmi	r3, #43	@ 0x2b
 801110c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011110:	f89a 3000 	ldrb.w	r3, [sl]
 8011114:	2b2a      	cmp	r3, #42	@ 0x2a
 8011116:	d015      	beq.n	8011144 <_vfiprintf_r+0x120>
 8011118:	9a07      	ldr	r2, [sp, #28]
 801111a:	4654      	mov	r4, sl
 801111c:	2000      	movs	r0, #0
 801111e:	f04f 0c0a 	mov.w	ip, #10
 8011122:	4621      	mov	r1, r4
 8011124:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011128:	3b30      	subs	r3, #48	@ 0x30
 801112a:	2b09      	cmp	r3, #9
 801112c:	d94b      	bls.n	80111c6 <_vfiprintf_r+0x1a2>
 801112e:	b1b0      	cbz	r0, 801115e <_vfiprintf_r+0x13a>
 8011130:	9207      	str	r2, [sp, #28]
 8011132:	e014      	b.n	801115e <_vfiprintf_r+0x13a>
 8011134:	eba0 0308 	sub.w	r3, r0, r8
 8011138:	fa09 f303 	lsl.w	r3, r9, r3
 801113c:	4313      	orrs	r3, r2
 801113e:	9304      	str	r3, [sp, #16]
 8011140:	46a2      	mov	sl, r4
 8011142:	e7d2      	b.n	80110ea <_vfiprintf_r+0xc6>
 8011144:	9b03      	ldr	r3, [sp, #12]
 8011146:	1d19      	adds	r1, r3, #4
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	9103      	str	r1, [sp, #12]
 801114c:	2b00      	cmp	r3, #0
 801114e:	bfbb      	ittet	lt
 8011150:	425b      	neglt	r3, r3
 8011152:	f042 0202 	orrlt.w	r2, r2, #2
 8011156:	9307      	strge	r3, [sp, #28]
 8011158:	9307      	strlt	r3, [sp, #28]
 801115a:	bfb8      	it	lt
 801115c:	9204      	strlt	r2, [sp, #16]
 801115e:	7823      	ldrb	r3, [r4, #0]
 8011160:	2b2e      	cmp	r3, #46	@ 0x2e
 8011162:	d10a      	bne.n	801117a <_vfiprintf_r+0x156>
 8011164:	7863      	ldrb	r3, [r4, #1]
 8011166:	2b2a      	cmp	r3, #42	@ 0x2a
 8011168:	d132      	bne.n	80111d0 <_vfiprintf_r+0x1ac>
 801116a:	9b03      	ldr	r3, [sp, #12]
 801116c:	1d1a      	adds	r2, r3, #4
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	9203      	str	r2, [sp, #12]
 8011172:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011176:	3402      	adds	r4, #2
 8011178:	9305      	str	r3, [sp, #20]
 801117a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011250 <_vfiprintf_r+0x22c>
 801117e:	7821      	ldrb	r1, [r4, #0]
 8011180:	2203      	movs	r2, #3
 8011182:	4650      	mov	r0, sl
 8011184:	f7ef f85c 	bl	8000240 <memchr>
 8011188:	b138      	cbz	r0, 801119a <_vfiprintf_r+0x176>
 801118a:	9b04      	ldr	r3, [sp, #16]
 801118c:	eba0 000a 	sub.w	r0, r0, sl
 8011190:	2240      	movs	r2, #64	@ 0x40
 8011192:	4082      	lsls	r2, r0
 8011194:	4313      	orrs	r3, r2
 8011196:	3401      	adds	r4, #1
 8011198:	9304      	str	r3, [sp, #16]
 801119a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801119e:	4829      	ldr	r0, [pc, #164]	@ (8011244 <_vfiprintf_r+0x220>)
 80111a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80111a4:	2206      	movs	r2, #6
 80111a6:	f7ef f84b 	bl	8000240 <memchr>
 80111aa:	2800      	cmp	r0, #0
 80111ac:	d03f      	beq.n	801122e <_vfiprintf_r+0x20a>
 80111ae:	4b26      	ldr	r3, [pc, #152]	@ (8011248 <_vfiprintf_r+0x224>)
 80111b0:	bb1b      	cbnz	r3, 80111fa <_vfiprintf_r+0x1d6>
 80111b2:	9b03      	ldr	r3, [sp, #12]
 80111b4:	3307      	adds	r3, #7
 80111b6:	f023 0307 	bic.w	r3, r3, #7
 80111ba:	3308      	adds	r3, #8
 80111bc:	9303      	str	r3, [sp, #12]
 80111be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111c0:	443b      	add	r3, r7
 80111c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80111c4:	e76a      	b.n	801109c <_vfiprintf_r+0x78>
 80111c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80111ca:	460c      	mov	r4, r1
 80111cc:	2001      	movs	r0, #1
 80111ce:	e7a8      	b.n	8011122 <_vfiprintf_r+0xfe>
 80111d0:	2300      	movs	r3, #0
 80111d2:	3401      	adds	r4, #1
 80111d4:	9305      	str	r3, [sp, #20]
 80111d6:	4619      	mov	r1, r3
 80111d8:	f04f 0c0a 	mov.w	ip, #10
 80111dc:	4620      	mov	r0, r4
 80111de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80111e2:	3a30      	subs	r2, #48	@ 0x30
 80111e4:	2a09      	cmp	r2, #9
 80111e6:	d903      	bls.n	80111f0 <_vfiprintf_r+0x1cc>
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d0c6      	beq.n	801117a <_vfiprintf_r+0x156>
 80111ec:	9105      	str	r1, [sp, #20]
 80111ee:	e7c4      	b.n	801117a <_vfiprintf_r+0x156>
 80111f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80111f4:	4604      	mov	r4, r0
 80111f6:	2301      	movs	r3, #1
 80111f8:	e7f0      	b.n	80111dc <_vfiprintf_r+0x1b8>
 80111fa:	ab03      	add	r3, sp, #12
 80111fc:	9300      	str	r3, [sp, #0]
 80111fe:	462a      	mov	r2, r5
 8011200:	4b12      	ldr	r3, [pc, #72]	@ (801124c <_vfiprintf_r+0x228>)
 8011202:	a904      	add	r1, sp, #16
 8011204:	4630      	mov	r0, r6
 8011206:	f3af 8000 	nop.w
 801120a:	4607      	mov	r7, r0
 801120c:	1c78      	adds	r0, r7, #1
 801120e:	d1d6      	bne.n	80111be <_vfiprintf_r+0x19a>
 8011210:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011212:	07d9      	lsls	r1, r3, #31
 8011214:	d405      	bmi.n	8011222 <_vfiprintf_r+0x1fe>
 8011216:	89ab      	ldrh	r3, [r5, #12]
 8011218:	059a      	lsls	r2, r3, #22
 801121a:	d402      	bmi.n	8011222 <_vfiprintf_r+0x1fe>
 801121c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801121e:	f7ff fdc1 	bl	8010da4 <__retarget_lock_release_recursive>
 8011222:	89ab      	ldrh	r3, [r5, #12]
 8011224:	065b      	lsls	r3, r3, #25
 8011226:	f53f af1f 	bmi.w	8011068 <_vfiprintf_r+0x44>
 801122a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801122c:	e71e      	b.n	801106c <_vfiprintf_r+0x48>
 801122e:	ab03      	add	r3, sp, #12
 8011230:	9300      	str	r3, [sp, #0]
 8011232:	462a      	mov	r2, r5
 8011234:	4b05      	ldr	r3, [pc, #20]	@ (801124c <_vfiprintf_r+0x228>)
 8011236:	a904      	add	r1, sp, #16
 8011238:	4630      	mov	r0, r6
 801123a:	f000 f879 	bl	8011330 <_printf_i>
 801123e:	e7e4      	b.n	801120a <_vfiprintf_r+0x1e6>
 8011240:	0801510d 	.word	0x0801510d
 8011244:	08015117 	.word	0x08015117
 8011248:	00000000 	.word	0x00000000
 801124c:	08010fff 	.word	0x08010fff
 8011250:	08015113 	.word	0x08015113

08011254 <_printf_common>:
 8011254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011258:	4616      	mov	r6, r2
 801125a:	4698      	mov	r8, r3
 801125c:	688a      	ldr	r2, [r1, #8]
 801125e:	690b      	ldr	r3, [r1, #16]
 8011260:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011264:	4293      	cmp	r3, r2
 8011266:	bfb8      	it	lt
 8011268:	4613      	movlt	r3, r2
 801126a:	6033      	str	r3, [r6, #0]
 801126c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011270:	4607      	mov	r7, r0
 8011272:	460c      	mov	r4, r1
 8011274:	b10a      	cbz	r2, 801127a <_printf_common+0x26>
 8011276:	3301      	adds	r3, #1
 8011278:	6033      	str	r3, [r6, #0]
 801127a:	6823      	ldr	r3, [r4, #0]
 801127c:	0699      	lsls	r1, r3, #26
 801127e:	bf42      	ittt	mi
 8011280:	6833      	ldrmi	r3, [r6, #0]
 8011282:	3302      	addmi	r3, #2
 8011284:	6033      	strmi	r3, [r6, #0]
 8011286:	6825      	ldr	r5, [r4, #0]
 8011288:	f015 0506 	ands.w	r5, r5, #6
 801128c:	d106      	bne.n	801129c <_printf_common+0x48>
 801128e:	f104 0a19 	add.w	sl, r4, #25
 8011292:	68e3      	ldr	r3, [r4, #12]
 8011294:	6832      	ldr	r2, [r6, #0]
 8011296:	1a9b      	subs	r3, r3, r2
 8011298:	42ab      	cmp	r3, r5
 801129a:	dc26      	bgt.n	80112ea <_printf_common+0x96>
 801129c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80112a0:	6822      	ldr	r2, [r4, #0]
 80112a2:	3b00      	subs	r3, #0
 80112a4:	bf18      	it	ne
 80112a6:	2301      	movne	r3, #1
 80112a8:	0692      	lsls	r2, r2, #26
 80112aa:	d42b      	bmi.n	8011304 <_printf_common+0xb0>
 80112ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80112b0:	4641      	mov	r1, r8
 80112b2:	4638      	mov	r0, r7
 80112b4:	47c8      	blx	r9
 80112b6:	3001      	adds	r0, #1
 80112b8:	d01e      	beq.n	80112f8 <_printf_common+0xa4>
 80112ba:	6823      	ldr	r3, [r4, #0]
 80112bc:	6922      	ldr	r2, [r4, #16]
 80112be:	f003 0306 	and.w	r3, r3, #6
 80112c2:	2b04      	cmp	r3, #4
 80112c4:	bf02      	ittt	eq
 80112c6:	68e5      	ldreq	r5, [r4, #12]
 80112c8:	6833      	ldreq	r3, [r6, #0]
 80112ca:	1aed      	subeq	r5, r5, r3
 80112cc:	68a3      	ldr	r3, [r4, #8]
 80112ce:	bf0c      	ite	eq
 80112d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80112d4:	2500      	movne	r5, #0
 80112d6:	4293      	cmp	r3, r2
 80112d8:	bfc4      	itt	gt
 80112da:	1a9b      	subgt	r3, r3, r2
 80112dc:	18ed      	addgt	r5, r5, r3
 80112de:	2600      	movs	r6, #0
 80112e0:	341a      	adds	r4, #26
 80112e2:	42b5      	cmp	r5, r6
 80112e4:	d11a      	bne.n	801131c <_printf_common+0xc8>
 80112e6:	2000      	movs	r0, #0
 80112e8:	e008      	b.n	80112fc <_printf_common+0xa8>
 80112ea:	2301      	movs	r3, #1
 80112ec:	4652      	mov	r2, sl
 80112ee:	4641      	mov	r1, r8
 80112f0:	4638      	mov	r0, r7
 80112f2:	47c8      	blx	r9
 80112f4:	3001      	adds	r0, #1
 80112f6:	d103      	bne.n	8011300 <_printf_common+0xac>
 80112f8:	f04f 30ff 	mov.w	r0, #4294967295
 80112fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011300:	3501      	adds	r5, #1
 8011302:	e7c6      	b.n	8011292 <_printf_common+0x3e>
 8011304:	18e1      	adds	r1, r4, r3
 8011306:	1c5a      	adds	r2, r3, #1
 8011308:	2030      	movs	r0, #48	@ 0x30
 801130a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801130e:	4422      	add	r2, r4
 8011310:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011314:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011318:	3302      	adds	r3, #2
 801131a:	e7c7      	b.n	80112ac <_printf_common+0x58>
 801131c:	2301      	movs	r3, #1
 801131e:	4622      	mov	r2, r4
 8011320:	4641      	mov	r1, r8
 8011322:	4638      	mov	r0, r7
 8011324:	47c8      	blx	r9
 8011326:	3001      	adds	r0, #1
 8011328:	d0e6      	beq.n	80112f8 <_printf_common+0xa4>
 801132a:	3601      	adds	r6, #1
 801132c:	e7d9      	b.n	80112e2 <_printf_common+0x8e>
	...

08011330 <_printf_i>:
 8011330:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011334:	7e0f      	ldrb	r7, [r1, #24]
 8011336:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011338:	2f78      	cmp	r7, #120	@ 0x78
 801133a:	4691      	mov	r9, r2
 801133c:	4680      	mov	r8, r0
 801133e:	460c      	mov	r4, r1
 8011340:	469a      	mov	sl, r3
 8011342:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011346:	d807      	bhi.n	8011358 <_printf_i+0x28>
 8011348:	2f62      	cmp	r7, #98	@ 0x62
 801134a:	d80a      	bhi.n	8011362 <_printf_i+0x32>
 801134c:	2f00      	cmp	r7, #0
 801134e:	f000 80d2 	beq.w	80114f6 <_printf_i+0x1c6>
 8011352:	2f58      	cmp	r7, #88	@ 0x58
 8011354:	f000 80b9 	beq.w	80114ca <_printf_i+0x19a>
 8011358:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801135c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011360:	e03a      	b.n	80113d8 <_printf_i+0xa8>
 8011362:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011366:	2b15      	cmp	r3, #21
 8011368:	d8f6      	bhi.n	8011358 <_printf_i+0x28>
 801136a:	a101      	add	r1, pc, #4	@ (adr r1, 8011370 <_printf_i+0x40>)
 801136c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011370:	080113c9 	.word	0x080113c9
 8011374:	080113dd 	.word	0x080113dd
 8011378:	08011359 	.word	0x08011359
 801137c:	08011359 	.word	0x08011359
 8011380:	08011359 	.word	0x08011359
 8011384:	08011359 	.word	0x08011359
 8011388:	080113dd 	.word	0x080113dd
 801138c:	08011359 	.word	0x08011359
 8011390:	08011359 	.word	0x08011359
 8011394:	08011359 	.word	0x08011359
 8011398:	08011359 	.word	0x08011359
 801139c:	080114dd 	.word	0x080114dd
 80113a0:	08011407 	.word	0x08011407
 80113a4:	08011497 	.word	0x08011497
 80113a8:	08011359 	.word	0x08011359
 80113ac:	08011359 	.word	0x08011359
 80113b0:	080114ff 	.word	0x080114ff
 80113b4:	08011359 	.word	0x08011359
 80113b8:	08011407 	.word	0x08011407
 80113bc:	08011359 	.word	0x08011359
 80113c0:	08011359 	.word	0x08011359
 80113c4:	0801149f 	.word	0x0801149f
 80113c8:	6833      	ldr	r3, [r6, #0]
 80113ca:	1d1a      	adds	r2, r3, #4
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	6032      	str	r2, [r6, #0]
 80113d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80113d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80113d8:	2301      	movs	r3, #1
 80113da:	e09d      	b.n	8011518 <_printf_i+0x1e8>
 80113dc:	6833      	ldr	r3, [r6, #0]
 80113de:	6820      	ldr	r0, [r4, #0]
 80113e0:	1d19      	adds	r1, r3, #4
 80113e2:	6031      	str	r1, [r6, #0]
 80113e4:	0606      	lsls	r6, r0, #24
 80113e6:	d501      	bpl.n	80113ec <_printf_i+0xbc>
 80113e8:	681d      	ldr	r5, [r3, #0]
 80113ea:	e003      	b.n	80113f4 <_printf_i+0xc4>
 80113ec:	0645      	lsls	r5, r0, #25
 80113ee:	d5fb      	bpl.n	80113e8 <_printf_i+0xb8>
 80113f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80113f4:	2d00      	cmp	r5, #0
 80113f6:	da03      	bge.n	8011400 <_printf_i+0xd0>
 80113f8:	232d      	movs	r3, #45	@ 0x2d
 80113fa:	426d      	negs	r5, r5
 80113fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011400:	4859      	ldr	r0, [pc, #356]	@ (8011568 <_printf_i+0x238>)
 8011402:	230a      	movs	r3, #10
 8011404:	e011      	b.n	801142a <_printf_i+0xfa>
 8011406:	6821      	ldr	r1, [r4, #0]
 8011408:	6833      	ldr	r3, [r6, #0]
 801140a:	0608      	lsls	r0, r1, #24
 801140c:	f853 5b04 	ldr.w	r5, [r3], #4
 8011410:	d402      	bmi.n	8011418 <_printf_i+0xe8>
 8011412:	0649      	lsls	r1, r1, #25
 8011414:	bf48      	it	mi
 8011416:	b2ad      	uxthmi	r5, r5
 8011418:	2f6f      	cmp	r7, #111	@ 0x6f
 801141a:	4853      	ldr	r0, [pc, #332]	@ (8011568 <_printf_i+0x238>)
 801141c:	6033      	str	r3, [r6, #0]
 801141e:	bf14      	ite	ne
 8011420:	230a      	movne	r3, #10
 8011422:	2308      	moveq	r3, #8
 8011424:	2100      	movs	r1, #0
 8011426:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801142a:	6866      	ldr	r6, [r4, #4]
 801142c:	60a6      	str	r6, [r4, #8]
 801142e:	2e00      	cmp	r6, #0
 8011430:	bfa2      	ittt	ge
 8011432:	6821      	ldrge	r1, [r4, #0]
 8011434:	f021 0104 	bicge.w	r1, r1, #4
 8011438:	6021      	strge	r1, [r4, #0]
 801143a:	b90d      	cbnz	r5, 8011440 <_printf_i+0x110>
 801143c:	2e00      	cmp	r6, #0
 801143e:	d04b      	beq.n	80114d8 <_printf_i+0x1a8>
 8011440:	4616      	mov	r6, r2
 8011442:	fbb5 f1f3 	udiv	r1, r5, r3
 8011446:	fb03 5711 	mls	r7, r3, r1, r5
 801144a:	5dc7      	ldrb	r7, [r0, r7]
 801144c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011450:	462f      	mov	r7, r5
 8011452:	42bb      	cmp	r3, r7
 8011454:	460d      	mov	r5, r1
 8011456:	d9f4      	bls.n	8011442 <_printf_i+0x112>
 8011458:	2b08      	cmp	r3, #8
 801145a:	d10b      	bne.n	8011474 <_printf_i+0x144>
 801145c:	6823      	ldr	r3, [r4, #0]
 801145e:	07df      	lsls	r7, r3, #31
 8011460:	d508      	bpl.n	8011474 <_printf_i+0x144>
 8011462:	6923      	ldr	r3, [r4, #16]
 8011464:	6861      	ldr	r1, [r4, #4]
 8011466:	4299      	cmp	r1, r3
 8011468:	bfde      	ittt	le
 801146a:	2330      	movle	r3, #48	@ 0x30
 801146c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011470:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011474:	1b92      	subs	r2, r2, r6
 8011476:	6122      	str	r2, [r4, #16]
 8011478:	f8cd a000 	str.w	sl, [sp]
 801147c:	464b      	mov	r3, r9
 801147e:	aa03      	add	r2, sp, #12
 8011480:	4621      	mov	r1, r4
 8011482:	4640      	mov	r0, r8
 8011484:	f7ff fee6 	bl	8011254 <_printf_common>
 8011488:	3001      	adds	r0, #1
 801148a:	d14a      	bne.n	8011522 <_printf_i+0x1f2>
 801148c:	f04f 30ff 	mov.w	r0, #4294967295
 8011490:	b004      	add	sp, #16
 8011492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011496:	6823      	ldr	r3, [r4, #0]
 8011498:	f043 0320 	orr.w	r3, r3, #32
 801149c:	6023      	str	r3, [r4, #0]
 801149e:	4833      	ldr	r0, [pc, #204]	@ (801156c <_printf_i+0x23c>)
 80114a0:	2778      	movs	r7, #120	@ 0x78
 80114a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80114a6:	6823      	ldr	r3, [r4, #0]
 80114a8:	6831      	ldr	r1, [r6, #0]
 80114aa:	061f      	lsls	r7, r3, #24
 80114ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80114b0:	d402      	bmi.n	80114b8 <_printf_i+0x188>
 80114b2:	065f      	lsls	r7, r3, #25
 80114b4:	bf48      	it	mi
 80114b6:	b2ad      	uxthmi	r5, r5
 80114b8:	6031      	str	r1, [r6, #0]
 80114ba:	07d9      	lsls	r1, r3, #31
 80114bc:	bf44      	itt	mi
 80114be:	f043 0320 	orrmi.w	r3, r3, #32
 80114c2:	6023      	strmi	r3, [r4, #0]
 80114c4:	b11d      	cbz	r5, 80114ce <_printf_i+0x19e>
 80114c6:	2310      	movs	r3, #16
 80114c8:	e7ac      	b.n	8011424 <_printf_i+0xf4>
 80114ca:	4827      	ldr	r0, [pc, #156]	@ (8011568 <_printf_i+0x238>)
 80114cc:	e7e9      	b.n	80114a2 <_printf_i+0x172>
 80114ce:	6823      	ldr	r3, [r4, #0]
 80114d0:	f023 0320 	bic.w	r3, r3, #32
 80114d4:	6023      	str	r3, [r4, #0]
 80114d6:	e7f6      	b.n	80114c6 <_printf_i+0x196>
 80114d8:	4616      	mov	r6, r2
 80114da:	e7bd      	b.n	8011458 <_printf_i+0x128>
 80114dc:	6833      	ldr	r3, [r6, #0]
 80114de:	6825      	ldr	r5, [r4, #0]
 80114e0:	6961      	ldr	r1, [r4, #20]
 80114e2:	1d18      	adds	r0, r3, #4
 80114e4:	6030      	str	r0, [r6, #0]
 80114e6:	062e      	lsls	r6, r5, #24
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	d501      	bpl.n	80114f0 <_printf_i+0x1c0>
 80114ec:	6019      	str	r1, [r3, #0]
 80114ee:	e002      	b.n	80114f6 <_printf_i+0x1c6>
 80114f0:	0668      	lsls	r0, r5, #25
 80114f2:	d5fb      	bpl.n	80114ec <_printf_i+0x1bc>
 80114f4:	8019      	strh	r1, [r3, #0]
 80114f6:	2300      	movs	r3, #0
 80114f8:	6123      	str	r3, [r4, #16]
 80114fa:	4616      	mov	r6, r2
 80114fc:	e7bc      	b.n	8011478 <_printf_i+0x148>
 80114fe:	6833      	ldr	r3, [r6, #0]
 8011500:	1d1a      	adds	r2, r3, #4
 8011502:	6032      	str	r2, [r6, #0]
 8011504:	681e      	ldr	r6, [r3, #0]
 8011506:	6862      	ldr	r2, [r4, #4]
 8011508:	2100      	movs	r1, #0
 801150a:	4630      	mov	r0, r6
 801150c:	f7ee fe98 	bl	8000240 <memchr>
 8011510:	b108      	cbz	r0, 8011516 <_printf_i+0x1e6>
 8011512:	1b80      	subs	r0, r0, r6
 8011514:	6060      	str	r0, [r4, #4]
 8011516:	6863      	ldr	r3, [r4, #4]
 8011518:	6123      	str	r3, [r4, #16]
 801151a:	2300      	movs	r3, #0
 801151c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011520:	e7aa      	b.n	8011478 <_printf_i+0x148>
 8011522:	6923      	ldr	r3, [r4, #16]
 8011524:	4632      	mov	r2, r6
 8011526:	4649      	mov	r1, r9
 8011528:	4640      	mov	r0, r8
 801152a:	47d0      	blx	sl
 801152c:	3001      	adds	r0, #1
 801152e:	d0ad      	beq.n	801148c <_printf_i+0x15c>
 8011530:	6823      	ldr	r3, [r4, #0]
 8011532:	079b      	lsls	r3, r3, #30
 8011534:	d413      	bmi.n	801155e <_printf_i+0x22e>
 8011536:	68e0      	ldr	r0, [r4, #12]
 8011538:	9b03      	ldr	r3, [sp, #12]
 801153a:	4298      	cmp	r0, r3
 801153c:	bfb8      	it	lt
 801153e:	4618      	movlt	r0, r3
 8011540:	e7a6      	b.n	8011490 <_printf_i+0x160>
 8011542:	2301      	movs	r3, #1
 8011544:	4632      	mov	r2, r6
 8011546:	4649      	mov	r1, r9
 8011548:	4640      	mov	r0, r8
 801154a:	47d0      	blx	sl
 801154c:	3001      	adds	r0, #1
 801154e:	d09d      	beq.n	801148c <_printf_i+0x15c>
 8011550:	3501      	adds	r5, #1
 8011552:	68e3      	ldr	r3, [r4, #12]
 8011554:	9903      	ldr	r1, [sp, #12]
 8011556:	1a5b      	subs	r3, r3, r1
 8011558:	42ab      	cmp	r3, r5
 801155a:	dcf2      	bgt.n	8011542 <_printf_i+0x212>
 801155c:	e7eb      	b.n	8011536 <_printf_i+0x206>
 801155e:	2500      	movs	r5, #0
 8011560:	f104 0619 	add.w	r6, r4, #25
 8011564:	e7f5      	b.n	8011552 <_printf_i+0x222>
 8011566:	bf00      	nop
 8011568:	0801511e 	.word	0x0801511e
 801156c:	0801512f 	.word	0x0801512f

08011570 <__sflush_r>:
 8011570:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011578:	0716      	lsls	r6, r2, #28
 801157a:	4605      	mov	r5, r0
 801157c:	460c      	mov	r4, r1
 801157e:	d454      	bmi.n	801162a <__sflush_r+0xba>
 8011580:	684b      	ldr	r3, [r1, #4]
 8011582:	2b00      	cmp	r3, #0
 8011584:	dc02      	bgt.n	801158c <__sflush_r+0x1c>
 8011586:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011588:	2b00      	cmp	r3, #0
 801158a:	dd48      	ble.n	801161e <__sflush_r+0xae>
 801158c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801158e:	2e00      	cmp	r6, #0
 8011590:	d045      	beq.n	801161e <__sflush_r+0xae>
 8011592:	2300      	movs	r3, #0
 8011594:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011598:	682f      	ldr	r7, [r5, #0]
 801159a:	6a21      	ldr	r1, [r4, #32]
 801159c:	602b      	str	r3, [r5, #0]
 801159e:	d030      	beq.n	8011602 <__sflush_r+0x92>
 80115a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80115a2:	89a3      	ldrh	r3, [r4, #12]
 80115a4:	0759      	lsls	r1, r3, #29
 80115a6:	d505      	bpl.n	80115b4 <__sflush_r+0x44>
 80115a8:	6863      	ldr	r3, [r4, #4]
 80115aa:	1ad2      	subs	r2, r2, r3
 80115ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80115ae:	b10b      	cbz	r3, 80115b4 <__sflush_r+0x44>
 80115b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80115b2:	1ad2      	subs	r2, r2, r3
 80115b4:	2300      	movs	r3, #0
 80115b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80115b8:	6a21      	ldr	r1, [r4, #32]
 80115ba:	4628      	mov	r0, r5
 80115bc:	47b0      	blx	r6
 80115be:	1c43      	adds	r3, r0, #1
 80115c0:	89a3      	ldrh	r3, [r4, #12]
 80115c2:	d106      	bne.n	80115d2 <__sflush_r+0x62>
 80115c4:	6829      	ldr	r1, [r5, #0]
 80115c6:	291d      	cmp	r1, #29
 80115c8:	d82b      	bhi.n	8011622 <__sflush_r+0xb2>
 80115ca:	4a2a      	ldr	r2, [pc, #168]	@ (8011674 <__sflush_r+0x104>)
 80115cc:	410a      	asrs	r2, r1
 80115ce:	07d6      	lsls	r6, r2, #31
 80115d0:	d427      	bmi.n	8011622 <__sflush_r+0xb2>
 80115d2:	2200      	movs	r2, #0
 80115d4:	6062      	str	r2, [r4, #4]
 80115d6:	04d9      	lsls	r1, r3, #19
 80115d8:	6922      	ldr	r2, [r4, #16]
 80115da:	6022      	str	r2, [r4, #0]
 80115dc:	d504      	bpl.n	80115e8 <__sflush_r+0x78>
 80115de:	1c42      	adds	r2, r0, #1
 80115e0:	d101      	bne.n	80115e6 <__sflush_r+0x76>
 80115e2:	682b      	ldr	r3, [r5, #0]
 80115e4:	b903      	cbnz	r3, 80115e8 <__sflush_r+0x78>
 80115e6:	6560      	str	r0, [r4, #84]	@ 0x54
 80115e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80115ea:	602f      	str	r7, [r5, #0]
 80115ec:	b1b9      	cbz	r1, 801161e <__sflush_r+0xae>
 80115ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80115f2:	4299      	cmp	r1, r3
 80115f4:	d002      	beq.n	80115fc <__sflush_r+0x8c>
 80115f6:	4628      	mov	r0, r5
 80115f8:	f7ff fbea 	bl	8010dd0 <_free_r>
 80115fc:	2300      	movs	r3, #0
 80115fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8011600:	e00d      	b.n	801161e <__sflush_r+0xae>
 8011602:	2301      	movs	r3, #1
 8011604:	4628      	mov	r0, r5
 8011606:	47b0      	blx	r6
 8011608:	4602      	mov	r2, r0
 801160a:	1c50      	adds	r0, r2, #1
 801160c:	d1c9      	bne.n	80115a2 <__sflush_r+0x32>
 801160e:	682b      	ldr	r3, [r5, #0]
 8011610:	2b00      	cmp	r3, #0
 8011612:	d0c6      	beq.n	80115a2 <__sflush_r+0x32>
 8011614:	2b1d      	cmp	r3, #29
 8011616:	d001      	beq.n	801161c <__sflush_r+0xac>
 8011618:	2b16      	cmp	r3, #22
 801161a:	d11e      	bne.n	801165a <__sflush_r+0xea>
 801161c:	602f      	str	r7, [r5, #0]
 801161e:	2000      	movs	r0, #0
 8011620:	e022      	b.n	8011668 <__sflush_r+0xf8>
 8011622:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011626:	b21b      	sxth	r3, r3
 8011628:	e01b      	b.n	8011662 <__sflush_r+0xf2>
 801162a:	690f      	ldr	r7, [r1, #16]
 801162c:	2f00      	cmp	r7, #0
 801162e:	d0f6      	beq.n	801161e <__sflush_r+0xae>
 8011630:	0793      	lsls	r3, r2, #30
 8011632:	680e      	ldr	r6, [r1, #0]
 8011634:	bf08      	it	eq
 8011636:	694b      	ldreq	r3, [r1, #20]
 8011638:	600f      	str	r7, [r1, #0]
 801163a:	bf18      	it	ne
 801163c:	2300      	movne	r3, #0
 801163e:	eba6 0807 	sub.w	r8, r6, r7
 8011642:	608b      	str	r3, [r1, #8]
 8011644:	f1b8 0f00 	cmp.w	r8, #0
 8011648:	dde9      	ble.n	801161e <__sflush_r+0xae>
 801164a:	6a21      	ldr	r1, [r4, #32]
 801164c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801164e:	4643      	mov	r3, r8
 8011650:	463a      	mov	r2, r7
 8011652:	4628      	mov	r0, r5
 8011654:	47b0      	blx	r6
 8011656:	2800      	cmp	r0, #0
 8011658:	dc08      	bgt.n	801166c <__sflush_r+0xfc>
 801165a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801165e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011662:	81a3      	strh	r3, [r4, #12]
 8011664:	f04f 30ff 	mov.w	r0, #4294967295
 8011668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801166c:	4407      	add	r7, r0
 801166e:	eba8 0800 	sub.w	r8, r8, r0
 8011672:	e7e7      	b.n	8011644 <__sflush_r+0xd4>
 8011674:	dfbffffe 	.word	0xdfbffffe

08011678 <_fflush_r>:
 8011678:	b538      	push	{r3, r4, r5, lr}
 801167a:	690b      	ldr	r3, [r1, #16]
 801167c:	4605      	mov	r5, r0
 801167e:	460c      	mov	r4, r1
 8011680:	b913      	cbnz	r3, 8011688 <_fflush_r+0x10>
 8011682:	2500      	movs	r5, #0
 8011684:	4628      	mov	r0, r5
 8011686:	bd38      	pop	{r3, r4, r5, pc}
 8011688:	b118      	cbz	r0, 8011692 <_fflush_r+0x1a>
 801168a:	6a03      	ldr	r3, [r0, #32]
 801168c:	b90b      	cbnz	r3, 8011692 <_fflush_r+0x1a>
 801168e:	f7ff f96d 	bl	801096c <__sinit>
 8011692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d0f3      	beq.n	8011682 <_fflush_r+0xa>
 801169a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801169c:	07d0      	lsls	r0, r2, #31
 801169e:	d404      	bmi.n	80116aa <_fflush_r+0x32>
 80116a0:	0599      	lsls	r1, r3, #22
 80116a2:	d402      	bmi.n	80116aa <_fflush_r+0x32>
 80116a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80116a6:	f7ff fb7c 	bl	8010da2 <__retarget_lock_acquire_recursive>
 80116aa:	4628      	mov	r0, r5
 80116ac:	4621      	mov	r1, r4
 80116ae:	f7ff ff5f 	bl	8011570 <__sflush_r>
 80116b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80116b4:	07da      	lsls	r2, r3, #31
 80116b6:	4605      	mov	r5, r0
 80116b8:	d4e4      	bmi.n	8011684 <_fflush_r+0xc>
 80116ba:	89a3      	ldrh	r3, [r4, #12]
 80116bc:	059b      	lsls	r3, r3, #22
 80116be:	d4e1      	bmi.n	8011684 <_fflush_r+0xc>
 80116c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80116c2:	f7ff fb6f 	bl	8010da4 <__retarget_lock_release_recursive>
 80116c6:	e7dd      	b.n	8011684 <_fflush_r+0xc>

080116c8 <__swhatbuf_r>:
 80116c8:	b570      	push	{r4, r5, r6, lr}
 80116ca:	460c      	mov	r4, r1
 80116cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116d0:	2900      	cmp	r1, #0
 80116d2:	b096      	sub	sp, #88	@ 0x58
 80116d4:	4615      	mov	r5, r2
 80116d6:	461e      	mov	r6, r3
 80116d8:	da0d      	bge.n	80116f6 <__swhatbuf_r+0x2e>
 80116da:	89a3      	ldrh	r3, [r4, #12]
 80116dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80116e0:	f04f 0100 	mov.w	r1, #0
 80116e4:	bf14      	ite	ne
 80116e6:	2340      	movne	r3, #64	@ 0x40
 80116e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80116ec:	2000      	movs	r0, #0
 80116ee:	6031      	str	r1, [r6, #0]
 80116f0:	602b      	str	r3, [r5, #0]
 80116f2:	b016      	add	sp, #88	@ 0x58
 80116f4:	bd70      	pop	{r4, r5, r6, pc}
 80116f6:	466a      	mov	r2, sp
 80116f8:	f000 f8ac 	bl	8011854 <_fstat_r>
 80116fc:	2800      	cmp	r0, #0
 80116fe:	dbec      	blt.n	80116da <__swhatbuf_r+0x12>
 8011700:	9901      	ldr	r1, [sp, #4]
 8011702:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011706:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801170a:	4259      	negs	r1, r3
 801170c:	4159      	adcs	r1, r3
 801170e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011712:	e7eb      	b.n	80116ec <__swhatbuf_r+0x24>

08011714 <__smakebuf_r>:
 8011714:	898b      	ldrh	r3, [r1, #12]
 8011716:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011718:	079d      	lsls	r5, r3, #30
 801171a:	4606      	mov	r6, r0
 801171c:	460c      	mov	r4, r1
 801171e:	d507      	bpl.n	8011730 <__smakebuf_r+0x1c>
 8011720:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011724:	6023      	str	r3, [r4, #0]
 8011726:	6123      	str	r3, [r4, #16]
 8011728:	2301      	movs	r3, #1
 801172a:	6163      	str	r3, [r4, #20]
 801172c:	b003      	add	sp, #12
 801172e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011730:	ab01      	add	r3, sp, #4
 8011732:	466a      	mov	r2, sp
 8011734:	f7ff ffc8 	bl	80116c8 <__swhatbuf_r>
 8011738:	9f00      	ldr	r7, [sp, #0]
 801173a:	4605      	mov	r5, r0
 801173c:	4639      	mov	r1, r7
 801173e:	4630      	mov	r0, r6
 8011740:	f7ff fbba 	bl	8010eb8 <_malloc_r>
 8011744:	b948      	cbnz	r0, 801175a <__smakebuf_r+0x46>
 8011746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801174a:	059a      	lsls	r2, r3, #22
 801174c:	d4ee      	bmi.n	801172c <__smakebuf_r+0x18>
 801174e:	f023 0303 	bic.w	r3, r3, #3
 8011752:	f043 0302 	orr.w	r3, r3, #2
 8011756:	81a3      	strh	r3, [r4, #12]
 8011758:	e7e2      	b.n	8011720 <__smakebuf_r+0xc>
 801175a:	89a3      	ldrh	r3, [r4, #12]
 801175c:	6020      	str	r0, [r4, #0]
 801175e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011762:	81a3      	strh	r3, [r4, #12]
 8011764:	9b01      	ldr	r3, [sp, #4]
 8011766:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801176a:	b15b      	cbz	r3, 8011784 <__smakebuf_r+0x70>
 801176c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011770:	4630      	mov	r0, r6
 8011772:	f000 f881 	bl	8011878 <_isatty_r>
 8011776:	b128      	cbz	r0, 8011784 <__smakebuf_r+0x70>
 8011778:	89a3      	ldrh	r3, [r4, #12]
 801177a:	f023 0303 	bic.w	r3, r3, #3
 801177e:	f043 0301 	orr.w	r3, r3, #1
 8011782:	81a3      	strh	r3, [r4, #12]
 8011784:	89a3      	ldrh	r3, [r4, #12]
 8011786:	431d      	orrs	r5, r3
 8011788:	81a5      	strh	r5, [r4, #12]
 801178a:	e7cf      	b.n	801172c <__smakebuf_r+0x18>

0801178c <_putc_r>:
 801178c:	b570      	push	{r4, r5, r6, lr}
 801178e:	460d      	mov	r5, r1
 8011790:	4614      	mov	r4, r2
 8011792:	4606      	mov	r6, r0
 8011794:	b118      	cbz	r0, 801179e <_putc_r+0x12>
 8011796:	6a03      	ldr	r3, [r0, #32]
 8011798:	b90b      	cbnz	r3, 801179e <_putc_r+0x12>
 801179a:	f7ff f8e7 	bl	801096c <__sinit>
 801179e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80117a0:	07d8      	lsls	r0, r3, #31
 80117a2:	d405      	bmi.n	80117b0 <_putc_r+0x24>
 80117a4:	89a3      	ldrh	r3, [r4, #12]
 80117a6:	0599      	lsls	r1, r3, #22
 80117a8:	d402      	bmi.n	80117b0 <_putc_r+0x24>
 80117aa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80117ac:	f7ff faf9 	bl	8010da2 <__retarget_lock_acquire_recursive>
 80117b0:	68a3      	ldr	r3, [r4, #8]
 80117b2:	3b01      	subs	r3, #1
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	60a3      	str	r3, [r4, #8]
 80117b8:	da05      	bge.n	80117c6 <_putc_r+0x3a>
 80117ba:	69a2      	ldr	r2, [r4, #24]
 80117bc:	4293      	cmp	r3, r2
 80117be:	db12      	blt.n	80117e6 <_putc_r+0x5a>
 80117c0:	b2eb      	uxtb	r3, r5
 80117c2:	2b0a      	cmp	r3, #10
 80117c4:	d00f      	beq.n	80117e6 <_putc_r+0x5a>
 80117c6:	6823      	ldr	r3, [r4, #0]
 80117c8:	1c5a      	adds	r2, r3, #1
 80117ca:	6022      	str	r2, [r4, #0]
 80117cc:	701d      	strb	r5, [r3, #0]
 80117ce:	b2ed      	uxtb	r5, r5
 80117d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80117d2:	07da      	lsls	r2, r3, #31
 80117d4:	d405      	bmi.n	80117e2 <_putc_r+0x56>
 80117d6:	89a3      	ldrh	r3, [r4, #12]
 80117d8:	059b      	lsls	r3, r3, #22
 80117da:	d402      	bmi.n	80117e2 <_putc_r+0x56>
 80117dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80117de:	f7ff fae1 	bl	8010da4 <__retarget_lock_release_recursive>
 80117e2:	4628      	mov	r0, r5
 80117e4:	bd70      	pop	{r4, r5, r6, pc}
 80117e6:	4629      	mov	r1, r5
 80117e8:	4622      	mov	r2, r4
 80117ea:	4630      	mov	r0, r6
 80117ec:	f7ff f9c1 	bl	8010b72 <__swbuf_r>
 80117f0:	4605      	mov	r5, r0
 80117f2:	e7ed      	b.n	80117d0 <_putc_r+0x44>

080117f4 <_raise_r>:
 80117f4:	291f      	cmp	r1, #31
 80117f6:	b538      	push	{r3, r4, r5, lr}
 80117f8:	4605      	mov	r5, r0
 80117fa:	460c      	mov	r4, r1
 80117fc:	d904      	bls.n	8011808 <_raise_r+0x14>
 80117fe:	2316      	movs	r3, #22
 8011800:	6003      	str	r3, [r0, #0]
 8011802:	f04f 30ff 	mov.w	r0, #4294967295
 8011806:	bd38      	pop	{r3, r4, r5, pc}
 8011808:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801180a:	b112      	cbz	r2, 8011812 <_raise_r+0x1e>
 801180c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011810:	b94b      	cbnz	r3, 8011826 <_raise_r+0x32>
 8011812:	4628      	mov	r0, r5
 8011814:	f000 f852 	bl	80118bc <_getpid_r>
 8011818:	4622      	mov	r2, r4
 801181a:	4601      	mov	r1, r0
 801181c:	4628      	mov	r0, r5
 801181e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011822:	f000 b839 	b.w	8011898 <_kill_r>
 8011826:	2b01      	cmp	r3, #1
 8011828:	d00a      	beq.n	8011840 <_raise_r+0x4c>
 801182a:	1c59      	adds	r1, r3, #1
 801182c:	d103      	bne.n	8011836 <_raise_r+0x42>
 801182e:	2316      	movs	r3, #22
 8011830:	6003      	str	r3, [r0, #0]
 8011832:	2001      	movs	r0, #1
 8011834:	e7e7      	b.n	8011806 <_raise_r+0x12>
 8011836:	2100      	movs	r1, #0
 8011838:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801183c:	4620      	mov	r0, r4
 801183e:	4798      	blx	r3
 8011840:	2000      	movs	r0, #0
 8011842:	e7e0      	b.n	8011806 <_raise_r+0x12>

08011844 <raise>:
 8011844:	4b02      	ldr	r3, [pc, #8]	@ (8011850 <raise+0xc>)
 8011846:	4601      	mov	r1, r0
 8011848:	6818      	ldr	r0, [r3, #0]
 801184a:	f7ff bfd3 	b.w	80117f4 <_raise_r>
 801184e:	bf00      	nop
 8011850:	20000038 	.word	0x20000038

08011854 <_fstat_r>:
 8011854:	b538      	push	{r3, r4, r5, lr}
 8011856:	4d07      	ldr	r5, [pc, #28]	@ (8011874 <_fstat_r+0x20>)
 8011858:	2300      	movs	r3, #0
 801185a:	4604      	mov	r4, r0
 801185c:	4608      	mov	r0, r1
 801185e:	4611      	mov	r1, r2
 8011860:	602b      	str	r3, [r5, #0]
 8011862:	f7ef fad7 	bl	8000e14 <_fstat>
 8011866:	1c43      	adds	r3, r0, #1
 8011868:	d102      	bne.n	8011870 <_fstat_r+0x1c>
 801186a:	682b      	ldr	r3, [r5, #0]
 801186c:	b103      	cbz	r3, 8011870 <_fstat_r+0x1c>
 801186e:	6023      	str	r3, [r4, #0]
 8011870:	bd38      	pop	{r3, r4, r5, pc}
 8011872:	bf00      	nop
 8011874:	20008a84 	.word	0x20008a84

08011878 <_isatty_r>:
 8011878:	b538      	push	{r3, r4, r5, lr}
 801187a:	4d06      	ldr	r5, [pc, #24]	@ (8011894 <_isatty_r+0x1c>)
 801187c:	2300      	movs	r3, #0
 801187e:	4604      	mov	r4, r0
 8011880:	4608      	mov	r0, r1
 8011882:	602b      	str	r3, [r5, #0]
 8011884:	f7ef fad6 	bl	8000e34 <_isatty>
 8011888:	1c43      	adds	r3, r0, #1
 801188a:	d102      	bne.n	8011892 <_isatty_r+0x1a>
 801188c:	682b      	ldr	r3, [r5, #0]
 801188e:	b103      	cbz	r3, 8011892 <_isatty_r+0x1a>
 8011890:	6023      	str	r3, [r4, #0]
 8011892:	bd38      	pop	{r3, r4, r5, pc}
 8011894:	20008a84 	.word	0x20008a84

08011898 <_kill_r>:
 8011898:	b538      	push	{r3, r4, r5, lr}
 801189a:	4d07      	ldr	r5, [pc, #28]	@ (80118b8 <_kill_r+0x20>)
 801189c:	2300      	movs	r3, #0
 801189e:	4604      	mov	r4, r0
 80118a0:	4608      	mov	r0, r1
 80118a2:	4611      	mov	r1, r2
 80118a4:	602b      	str	r3, [r5, #0]
 80118a6:	f7ef fa53 	bl	8000d50 <_kill>
 80118aa:	1c43      	adds	r3, r0, #1
 80118ac:	d102      	bne.n	80118b4 <_kill_r+0x1c>
 80118ae:	682b      	ldr	r3, [r5, #0]
 80118b0:	b103      	cbz	r3, 80118b4 <_kill_r+0x1c>
 80118b2:	6023      	str	r3, [r4, #0]
 80118b4:	bd38      	pop	{r3, r4, r5, pc}
 80118b6:	bf00      	nop
 80118b8:	20008a84 	.word	0x20008a84

080118bc <_getpid_r>:
 80118bc:	f7ef ba3f 	b.w	8000d3e <_getpid>

080118c0 <_sbrk_r>:
 80118c0:	b538      	push	{r3, r4, r5, lr}
 80118c2:	4d06      	ldr	r5, [pc, #24]	@ (80118dc <_sbrk_r+0x1c>)
 80118c4:	2300      	movs	r3, #0
 80118c6:	4604      	mov	r4, r0
 80118c8:	4608      	mov	r0, r1
 80118ca:	602b      	str	r3, [r5, #0]
 80118cc:	f7ef faca 	bl	8000e64 <_sbrk>
 80118d0:	1c43      	adds	r3, r0, #1
 80118d2:	d102      	bne.n	80118da <_sbrk_r+0x1a>
 80118d4:	682b      	ldr	r3, [r5, #0]
 80118d6:	b103      	cbz	r3, 80118da <_sbrk_r+0x1a>
 80118d8:	6023      	str	r3, [r4, #0]
 80118da:	bd38      	pop	{r3, r4, r5, pc}
 80118dc:	20008a84 	.word	0x20008a84

080118e0 <_init>:
 80118e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118e2:	bf00      	nop
 80118e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80118e6:	bc08      	pop	{r3}
 80118e8:	469e      	mov	lr, r3
 80118ea:	4770      	bx	lr

080118ec <_fini>:
 80118ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118ee:	bf00      	nop
 80118f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80118f2:	bc08      	pop	{r3}
 80118f4:	469e      	mov	lr, r3
 80118f6:	4770      	bx	lr
